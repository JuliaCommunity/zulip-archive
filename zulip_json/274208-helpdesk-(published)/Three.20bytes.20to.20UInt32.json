[
    {
        "content": "<p>How do I implement <code>three_bytes_to_UInt32</code> more efficiently?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">three_bytes_to_UInt32</span><span class=\"p\">(</span> <span class=\"n\">bytes</span><span class=\"o\">::</span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"kt\">UInt8</span><span class=\"p\">}</span> <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">UInt32</span><span class=\"p\">,</span> <span class=\"p\">[</span> <span class=\"n\">bytes</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"kt\">UInt8</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">]</span> <span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">three_bytes_to_UInt32</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mh\">0x39</span><span class=\"p\">,</span><span class=\"mh\">0xfa</span><span class=\"p\">,</span><span class=\"mh\">0x14</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mh\">0x39</span><span class=\"p\">,</span> <span class=\"mh\">0xfa</span><span class=\"p\">,</span> <span class=\"mh\">0x14</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">three_bytes_to_UInt32</span><span class=\"p\">(</span> <span class=\"n\">data</span> <span class=\"p\">)</span>\n<span class=\"mh\">0x0014fa39</span>\n</code></pre></div>",
        "id": 227871392,
        "sender_full_name": "Mark Kittisopikul",
        "timestamp": 1614305186
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">UInt32</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"kt\">UInt32</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"kt\">UInt32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">data</span><span class=\"p\">)</span>\n  <span class=\"mf\">1.700</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n<span class=\"mh\">0x0014fa39</span>\n</code></pre></div>",
        "id": 227872943,
        "sender_full_name": "Alex Ames",
        "timestamp": 1614306466
    },
    {
        "content": "<p>Performance is 15x slower if the compiler is prevented from optimizing the operation away :( </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"n\">setup</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n  <span class=\"mf\">26.908</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n<span class=\"mh\">0x0014fa39</span>\n</code></pre></div>",
        "id": 227873454,
        "sender_full_name": "Alex Ames",
        "timestamp": 1614306872
    },
    {
        "content": "<p>I believe <code>setup</code> is not doing what you think it is there. One should use <code>Ref</code> for the benchmark barrier instead:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">UInt32</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"kt\">UInt32</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"kt\">UInt32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"kt\">Ref</span><span class=\"p\">((</span><span class=\"mh\">0x39</span><span class=\"p\">,</span><span class=\"mh\">0xfa</span><span class=\"p\">,</span><span class=\"mh\">0x14</span><span class=\"p\">))</span>\n           <span class=\"nd\">@btime</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">data</span><span class=\"p\">[])</span>\n       <span class=\"k\">end</span>\n  <span class=\"mf\">1.290</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n<span class=\"mh\">0x0014fa39</span>\n</code></pre></div>",
        "id": 227873677,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614307128
    },
    {
        "content": "<p>Hah, you're right!</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">);</span>\n  <span class=\"mf\">541.327</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mf\">4.06</span> <span class=\"n\">KiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 227874001,
        "sender_full_name": "Alex Ames",
        "timestamp": 1614307447
    },
    {
        "content": "<p>versus</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">three_bytes_to_UInt32</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">);</span>\n  <span class=\"mf\">41.300</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1001</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">109.50</span> <span class=\"n\">KiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 227874066,
        "sender_full_name": "Alex Ames",
        "timestamp": 1614307523
    },
    {
        "content": "<p>Thanks. I generalized this to convert any tuple of bytes into a larger unsigned integer:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"n\">T</span><span class=\"p\">})(</span><span class=\"n\">bytes</span><span class=\"o\">::</span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"kt\">UInt8</span><span class=\"p\">})</span> <span class=\"n\">where</span> <span class=\"p\">{</span><span class=\"n\">T</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">Unsigned</span><span class=\"p\">}</span> <span class=\"n\">where</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">N</span> <span class=\"o\">&gt;</span> <span class=\"n\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">?</span>\n           <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"Number of bytes larger than sizeof(</span><span class=\"si\">$T</span><span class=\"s\">)\"</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n           <span class=\"o\">|</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)]</span><span class=\"o\">...</span> <span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"kt\">UInt32</span><span class=\"p\">((</span><span class=\"mh\">0x01</span><span class=\"p\">,</span><span class=\"mh\">0x03</span><span class=\"p\">,</span><span class=\"mh\">0x05</span><span class=\"p\">))</span>\n<span class=\"mh\">0x00050301</span>\n</code></pre></div>",
        "id": 227948063,
        "sender_full_name": "Mark Kittisopikul",
        "timestamp": 1614355253
    }
]