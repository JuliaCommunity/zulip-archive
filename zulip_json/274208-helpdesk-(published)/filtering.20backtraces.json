[
    {
        "content": "<p>How do I filter backtraces to only include up to top level as in <code>g()</code></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">f</span><span class=\"p\">()</span>\n           <span class=\"k\">try</span>\n               <span class=\"n\">error</span><span class=\"p\">()</span>\n           <span class=\"k\">catch</span> <span class=\"n\">err</span>\n               <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">sprint</span><span class=\"p\">(</span><span class=\"n\">showerror</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">),</span> <span class=\"n\">sprint</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">show_backtrace</span><span class=\"p\">,</span> <span class=\"n\">catch_backtrace</span><span class=\"p\">()))</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">()</span>\n\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">error</span><span class=\"p\">()</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">42</span>\n  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">f</span><span class=\"p\">()</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">3</span>\n  <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">eval</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">369</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">eval_user_input</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">::</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">REPLBackend</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">REPL</span> <span class=\"o\">~/</span><span class=\"n\">julia</span><span class=\"o\">-</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">REPL</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">139</span>\n  <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">repl_backend_loop</span><span class=\"p\">(</span><span class=\"n\">backend</span><span class=\"o\">::</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">REPLBackend</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">REPL</span> <span class=\"o\">~/</span><span class=\"n\">julia</span><span class=\"o\">-</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">REPL</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">200</span>\n<span class=\"p\">[</span><span class=\"o\">.....</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"p\">()</span>\n<span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span><span class=\"p\">()</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">error</span><span class=\"p\">()</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">42</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">g</span><span class=\"p\">()</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 224554002,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1611966225
    },
    {
        "content": "<p>Alternative question: How do I print a stacktrace formatted like the one from <code>g</code> from a <code>catch</code> block?</p>",
        "id": 224554123,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1611966321
    },
    {
        "content": "<p>I believe <a href=\"https://stackoverflow.com/a/59690947/2442087\">https://stackoverflow.com/a/59690947/2442087</a> answers your alternative question</p>",
        "id": 224554242,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1611966434
    },
    {
        "content": "<p>Thanks, I thought it tried the three-arg showerrror, guess not.</p>",
        "id": 224554491,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1611966629
    },
    {
        "content": "<p>Ah, I did try that, but it does not filter the trace.</p>",
        "id": 224554635,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1611966770
    },
    {
        "content": "<p>Oh, I think you're right</p>",
        "id": 224554935,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1611967004
    },
    {
        "content": "<p>I'm not at the computer, but I think there is a function in <code>Test</code> called <code>scrub_backtrace</code> or smthg like that which does some backtrace filtering</p>",
        "id": 224571680,
        "sender_full_name": "Rafael Fourquet",
        "timestamp": 1611993055
    },
    {
        "content": "<p>Thanks, <code>Base.scrub_repl_backtrace</code> it is.</p>",
        "id": 224581025,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1612006417
    }
]