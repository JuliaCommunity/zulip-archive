[
    {
        "content": "<p>These two provide the same \"functionality\"</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">fna</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n<span class=\"k\">struct</span> <span class=\"kt\">fnb</span> <span class=\"k\">end</span>\n<span class=\"n\">fnb</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n</code></pre></div>\n<p>Is it possible to dispatch in a way that catches both?</p>",
        "id": 238915665,
        "sender_full_name": "Jeffrey Sarnoff",
        "timestamp": 1621102425
    },
    {
        "content": "<p>You can define</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">fnb</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">Function</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>and dispatch on <code>::Function</code>.</p>",
        "id": 238915837,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1621102577
    },
    {
        "content": "<p>great and good to know</p>",
        "id": 238916590,
        "sender_full_name": "Jeffrey Sarnoff",
        "timestamp": 1621103303
    },
    {
        "content": "<p>Sometimes <code>Base.Callable == Union{Function,Type}</code>is also used for this purpose.</p>",
        "id": 238953490,
        "sender_full_name": "Rafael Fourquet",
        "timestamp": 1621145754
    }
]