[
    {
        "content": "<p>Say I have two arrays of Floats, is there a way to compare them using the bitwise and operator <code>.&amp;</code> or some other operator?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ŷ</span> <span class=\"o\">.&amp;</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>The above works for Int and Bool but not Floats</p>",
        "id": 243082325,
        "sender_full_name": "Dale Black",
        "timestamp": 1623962824
    },
    {
        "content": "<p>Or maybe a better question, is there a better way to convert Floats to integers?</p>\n<p>Here is the full code and I am getting an inexact error when I try to run this</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">dice_metric</span><span class=\"p\">(</span><span class=\"n\">ŷ</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"n\">ŷ</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"kt\">Int64</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">ŷ</span><span class=\"p\">),</span> <span class=\"kt\">Int64</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"n\">dice</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">ŷ</span> <span class=\"o\">.&amp;</span> <span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">ŷ</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">dice</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 243082742,
        "sender_full_name": "Dale Black",
        "timestamp": 1623963012
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">InexactError</span><span class=\"o\">:</span> <span class=\"kt\">Int64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">5.5319665e-6</span><span class=\"p\">)</span>\n\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"kt\">Int64</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">float</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">723</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">_broadcast_getindex_evalf</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">648</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">_broadcast_getindex</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">621</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">getindex</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">575</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">984</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">simdloop</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">77</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">copyto!</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">983</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"n\">copyto!</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">936</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"n\">copy</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">908</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"n\">materialize</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">883</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span> <span class=\"n\">dice_metric</span><span class=\"p\">(</span><span class=\"n\">ŷ</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">},</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">37</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">39</span>\n <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"n\">eval</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">360</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span> <span class=\"n\">include_string</span><span class=\"p\">(</span><span class=\"n\">mapexpr</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">softscope</span><span class=\"p\">),</span> <span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1094</span>\n</code></pre></div>",
        "id": 243082855,
        "sender_full_name": "Dale Black",
        "timestamp": 1623963073
    },
    {
        "content": "<p>What's a <code>true</code> floating point value to you?</p>",
        "id": 243082896,
        "sender_full_name": "Matt Bauman",
        "timestamp": 1623963094
    },
    {
        "content": "<p>all nonzeros?</p>",
        "id": 243082907,
        "sender_full_name": "Matt Bauman",
        "timestamp": 1623963097
    },
    {
        "content": "<p>Yes I am working with binary arrays currently so that should be correct</p>",
        "id": 243083008,
        "sender_full_name": "Dale Black",
        "timestamp": 1623963143
    },
    {
        "content": "<p>what's a binary array?</p>",
        "id": 243083140,
        "sender_full_name": "Matt Bauman",
        "timestamp": 1623963207
    },
    {
        "content": "<p>In any case, I think I'd do <code>@. !iszero(ŷ) &amp; !iszero(y)</code></p>",
        "id": 243083176,
        "sender_full_name": "Matt Bauman",
        "timestamp": 1623963226
    },
    {
        "content": "<p>To me, this is what I think of when I think of bitwise and between floats:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">0.4136385097187676</span>\n <span class=\"mf\">0.8561170860323639</span>\n <span class=\"mf\">0.5673269657861939</span>\n <span class=\"mf\">0.3364253326881379</span>\n <span class=\"mf\">0.2945387286498147</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">0.6559688998496613</span>\n <span class=\"mf\">0.033461184123736</span>\n <span class=\"mf\">0.6446603481441768</span>\n <span class=\"mf\">0.9123783704466826</span>\n <span class=\"mf\">0.7033529950179171</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">UInt64</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">.&amp;</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">UInt64</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">UInt64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mh\">0x3fc0790025808400</span>\n <span class=\"mh\">0x3fa1214300c04100</span>\n <span class=\"mh\">0x3fe0210aa1001082</span>\n <span class=\"mh\">0x3fc502341e540000</span>\n <span class=\"mh\">0x3fc2819823a42004</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">UInt64</span><span class=\"p\">})</span><span class=\"o\">:</span>\n <span class=\"mf\">0.1286926444163612</span>\n <span class=\"mf\">0.03345689186255818</span>\n <span class=\"mf\">0.5040333885704202</span>\n <span class=\"mf\">0.16412974816194037</span>\n <span class=\"mf\">0.14457990398682352</span>\n</code></pre></div>",
        "id": 243083487,
        "sender_full_name": "Mason Protter",
        "timestamp": 1623963356
    },
    {
        "content": "<p>Yeah, I think you're after logical <code>&amp;&amp;</code>, not bitwise <code>&amp;</code></p>",
        "id": 243083576,
        "sender_full_name": "Matt Bauman",
        "timestamp": 1623963380
    },
    {
        "content": "<p>Okay I will do some investigating because I realize now I don't really understand bitwise and</p>",
        "id": 243084600,
        "sender_full_name": "Dale Black",
        "timestamp": 1623963858
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">bitstring</span><span class=\"p\">(</span><span class=\"mh\">0x55</span><span class=\"p\">)</span>\n<span class=\"s\">\"01010101\"</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">bitstring</span><span class=\"p\">(</span><span class=\"mh\">0x0f</span><span class=\"p\">)</span>\n<span class=\"s\">\"00001111\"</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">bitstring</span><span class=\"p\">(</span><span class=\"mh\">0x55</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x0f</span><span class=\"p\">)</span>\n<span class=\"s\">\"00000101\"</span>\n</code></pre></div>\n<p>Bitwise <code>&amp;</code> does <code>&amp;</code> between the individual bits of the number.</p>",
        "id": 243402440,
        "sender_full_name": "chriselrod",
        "timestamp": 1624290422
    },
    {
        "content": "<p>Okay, it looks like bitwise <code>&amp;</code> is actually what I am looking for then. I just need to figure out the best way to turn an array of numbers into a binary array of zeros and ones after they go through a training loop</p>",
        "id": 243465460,
        "sender_full_name": "Dale Black",
        "timestamp": 1624328169
    },
    {
        "content": "<p>I'm simply trying to use this <code>dice_metric</code></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">dice_metric</span><span class=\"p\">(</span><span class=\"n\">ŷ</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"n\">dice</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">ŷ</span> <span class=\"o\">.&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">ŷ</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">dice</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 243465466,
        "sender_full_name": "Dale Black",
        "timestamp": 1624328185
    },
    {
        "content": "<p>I will go with this for now since it seems to work fine</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">as_discrete</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">logit_threshold</span><span class=\"p\">)</span>\n    <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">array</span> <span class=\"o\">.&gt;=</span> <span class=\"n\">logit_threshold</span>\n    <span class=\"k\">return</span> <span class=\"n\">array</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 243466185,
        "sender_full_name": "Dale Black",
        "timestamp": 1624329063
    }
]