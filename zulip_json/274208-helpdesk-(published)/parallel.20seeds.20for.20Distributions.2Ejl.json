[
    {
        "content": "<p>Currently, if I want to parallelize my independent computations (e.g. 10 monte carlo paths), on each subprocess, I initialize an RNG, <code>rng = Random.MersenneTwister(process_number)</code>, and then generate a random number using e.g. <code>randn(rng)</code>. But I can't seem able to feed this <code>rng</code> object if I were to use a distribution object from <a href=\"https://github.com/search?q=Distributions.jl&amp;type=Repositories\">Distributions.jl</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">import</span> <span class=\"n\">Distributions</span>\n<span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">Distributions</span><span class=\"o\">.</span><span class=\"n\">Uniform</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">20.0</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Is there a way to feed in the <code>rng</code> object into the code above?</p>",
        "id": 240460434,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1622119284
    },
    {
        "content": "<p>You can pass the rng as the first argument to <code>rand</code> as usual, I think?</p>",
        "id": 240460999,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1622119581
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">Distributions</span><span class=\"p\">,</span> <span class=\"n\">Random</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">MersenneTwister</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">),</span> <span class=\"n\">Uniform</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">20.0</span><span class=\"p\">))</span>\n<span class=\"mf\">12.226048134648494</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">MersenneTwister</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">),</span> <span class=\"n\">Uniform</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">20.0</span><span class=\"p\">))</span>\n<span class=\"mf\">12.226048134648494</span>\n</code></pre></div>",
        "id": 240461130,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1622119648
    },
    {
        "content": "<p>That solves it, thank you very much!</p>",
        "id": 240461379,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1622119763
    }
]