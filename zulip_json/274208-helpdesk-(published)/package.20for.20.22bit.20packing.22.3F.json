[
    {
        "content": "<p>Does anyone know if a package exists for efficiently \"packing\" bits?  That is, combining sequences of bits of lengths not necessarily divisible by 8 and returning a <code>Vector{UInt8}</code>, so for example, the 5-bit sequence (represented as a <code>UInt8</code>) <code>0b00011111</code> combined with the 3-bit sequence <code>0b00000111</code> gets combined into the 1-element array <code>[0xff]</code></p>",
        "id": 226319407,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613329216
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"272650\">@Jakob Nybo Nissen</span>  has a package for this, I'll see if I can find it.</p>",
        "id": 226320060,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613330200
    },
    {
        "content": "<p><a href=\"https://github.com/jakobnissen/BitBuffer.jl\">https://github.com/jakobnissen/BitBuffer.jl</a> - no tests, and I wrote it as one of my first Julia \"packages\", so dragons be there</p>",
        "id": 226320088,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1613330265
    },
    {
        "content": "<p>I think I was thinking of this one: <a href=\"https://github.com/jakobnissen/StackCollections.jl\">https://github.com/jakobnissen/StackCollections.jl</a>, so not exactly what you wanted.</p>",
        "id": 226320091,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613330272
    },
    {
        "content": "<p>Wait, isn't this what <code>BitVector</code> already does?</p>",
        "id": 226320324,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613330586
    },
    {
        "content": "<p>BitVector is only for single-bit entries, it can't have e.g. an array of 3-bit integers</p>",
        "id": 226320395,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1613330713
    },
    {
        "content": "<p>Right, but <span class=\"user-mention\" data-user-id=\"269446\">@Expanding Man</span> wants it to all get packed together right?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"kt\">BitVector</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span><span class=\"o\">.</span><span class=\"n\">chunks</span>\n<span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">UInt64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mh\">0x00000000000000ff</span>\n</code></pre></div>",
        "id": 226320470,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613330857
    },
    {
        "content": "<p>Yeah, I was thinking about using <code>BitVector</code>, but I think it might wind up being extremely inefficient.  My concern is that if I start out with a bunch of bytes, converting them to bools to stick in the <code>BitVector</code> owuld be expensive</p>",
        "id": 226320528,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613330926
    },
    {
        "content": "<p>but maybe not...  I should test it.  I was going to try doing that with <a href=\"https://oschulz.github.io/BitOperations.jl/stable/api/\">BitOperations.jl</a></p>",
        "id": 226320541,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613330950
    },
    {
        "content": "<p>Yeah, that's a fair concern.</p>",
        "id": 226320553,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613330989
    },
    {
        "content": "<p>I would probably implement an <code>AbstractVector</code> with an index saying how many bits are filled, and which offset it's at. A little manual, perhaps</p>",
        "id": 226320624,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1613331083
    },
    {
        "content": "<p>Yeah, but writing an implementation that shifts bits around to pack them together seems like a big pain in the ass and not something I particularly want to do</p>",
        "id": 226320717,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613331202
    }
]