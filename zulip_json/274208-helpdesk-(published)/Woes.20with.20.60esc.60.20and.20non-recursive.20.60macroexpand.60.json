[
    {
        "content": "<p>Given a recursive macro <code>@m</code> containing <code>esc</code>, <code>macroexpand(Main, :(@m x), recursive=true)</code> works as expected, but not <code>macroexpand(Main, macroexpand(Main, :(@m x), recursive=false))</code>, which is not cleaned up of <code>:escape</code> expressions.<br>\nThe simplest is to give an example:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">macro</span> <span class=\"n\">m</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">rec</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n           <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"n\">rec</span>\n               <span class=\"k\">quote</span>\n                   <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                   <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">else</span>\n               <span class=\"k\">quote</span>\n                   <span class=\"nd\">@m</span> <span class=\"k\">begin</span>\n                       <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                       <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n                   <span class=\"k\">end</span> <span class=\"kc\">false</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"nd\">@m</span> <span class=\"p\">(</span><span class=\"k\">macro</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nd\">@m</span> <span class=\"n\">Z</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"k\">quote</span>\n    <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"cm\">#= REPL[2]:1 =#</span>\n    <span class=\"k\">begin</span>\n        <span class=\"cm\">#= REPL[1]:9 =#</span>\n        <span class=\"k\">begin</span>\n            <span class=\"cm\">#= REPL[1]:4 =#</span>\n            <span class=\"n\">var</span><span class=\"s\">\"#1#Z\"</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"cm\">#= REPL[1]:5 =#</span>\n            <span class=\"k\">begin</span>\n                <span class=\"cm\">#= REPL[1]:10 =#</span>\n                <span class=\"n\">var</span><span class=\"s\">\"#1#Z\"</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                <span class=\"cm\">#= REPL[1]:11 =#</span>\n                <span class=\"n\">Z</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">)</span>\n<span class=\"k\">quote</span>\n    <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"cm\">#= REPL[2]:1 =#</span>\n    <span class=\"k\">begin</span>\n        <span class=\"cm\">#= REPL[1]:9 =#</span>\n        <span class=\"cm\">#= REPL[1]:9 =#</span> <span class=\"nd\">@m</span> <span class=\"k\">begin</span>\n                <span class=\"cm\">#= REPL[1]:10 =#</span>\n                <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                <span class=\"cm\">#= REPL[1]:11 =#</span>\n                <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">escape</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">Z</span><span class=\"p\">))</span>\n            <span class=\"k\">end</span> <span class=\"kc\">false</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n<span class=\"k\">quote</span>\n    <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"cm\">#= REPL[2]:1 =#</span>\n    <span class=\"k\">begin</span>\n        <span class=\"cm\">#= REPL[1]:9 =#</span>\n        <span class=\"k\">begin</span>\n            <span class=\"cm\">#= REPL[1]:4 =#</span>\n            <span class=\"n\">var</span><span class=\"s\">\"#5#Z\"</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"cm\">#= REPL[1]:5 =#</span>\n            <span class=\"k\">begin</span>\n                <span class=\"cm\">#= REPL[1]:10 =#</span>\n                <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                <span class=\"cm\">#= REPL[1]:11 =#</span>\n                <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">escape</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">Z</span><span class=\"p\">))</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">)))</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">syntax</span> <span class=\"p\">(</span><span class=\"n\">escape</span> <span class=\"p\">(</span><span class=\"n\">outerref</span> <span class=\"n\">Z</span><span class=\"p\">))</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Note the <code>:escape</code> present in the last expansion, but also the fact that there is a non-<code>gensym</code>ed <code>Z = 2</code>, and in particular that I then can't simply unwrap manually the remaining <code>:escape</code> expression.</p>\n<p>I have to use <code>macroexpand</code> with <code>recursive=false</code> because I also need to process some macro invocations more specifically.<br>\nAny idea if the behavior above is expected, and  if there is a war around for my use case?</p>",
        "id": 237635039,
        "sender_full_name": "Rafael Fourquet",
        "timestamp": 1620296096
    },
    {
        "content": "<p>Actually there is a closed <a href=\"https://github.com/JuliaLang/julia/issues/39762\">issue</a> stating about \"sequential partial macro expansion\" and \"full macro expansion at once\"  that </p>\n<blockquote>\n<p>No, they are not currently supposed to produce the same result. (Jameson)</p>\n</blockquote>\n<p>That's unfortunate, but still wondering whether there would be a workaround...</p>",
        "id": 237636245,
        "sender_full_name": "Rafael Fourquet",
        "timestamp": 1620296799
    },
    {
        "content": "<p>Not sure if it works for your use-case, but a possible workaround is a manual hygiene</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">macro</span> <span class=\"n\">m2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">rec</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n           <span class=\"nd\">@gensym</span> <span class=\"n\">Z</span>\n           <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"n\">rec</span>\n               <span class=\"k\">quote</span>\n                   <span class=\"o\">$</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                   <span class=\"o\">$</span><span class=\"n\">x</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">else</span>\n               <span class=\"k\">quote</span>\n                   <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"nd\">@__MODULE__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nd\">@m2</span> <span class=\"k\">begin</span>\n                       <span class=\"o\">$</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                       <span class=\"o\">$</span><span class=\"n\">x</span>\n                   <span class=\"k\">end</span> <span class=\"kc\">false</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span> <span class=\"o\">|&gt;</span> <span class=\"n\">esc</span>\n       <span class=\"k\">end</span>\n<span class=\"nd\">@m2</span> <span class=\"p\">(</span><span class=\"k\">macro</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">ex2</span> <span class=\"o\">=</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nd\">@m2</span> <span class=\"n\">Z</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">ex2</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">)))</span>\n<span class=\"mi\">0</span>\n</code></pre></div>\n<p>Note that <code>$Z</code> is not shared between macro invocations and <code>@m2</code> has a subtle difference to <code>@m</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"k\">quote</span>\n    <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"cm\">#= REPL[6]:1 =#</span>\n    <span class=\"k\">begin</span>\n        <span class=\"cm\">#= REPL[5]:9 =#</span>\n        <span class=\"k\">begin</span>\n            <span class=\"cm\">#= REPL[5]:4 =#</span>\n            <span class=\"n\">var</span><span class=\"s\">\"#4#Z\"</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"cm\">#= REPL[5]:5 =#</span>\n            <span class=\"k\">begin</span>\n                <span class=\"cm\">#= REPL[5]:10 =#</span>\n                <span class=\"n\">var</span><span class=\"s\">\"#4#Z\"</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                <span class=\"cm\">#= REPL[5]:11 =#</span>\n                <span class=\"n\">Z</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">ex2</span><span class=\"p\">)</span>\n<span class=\"k\">quote</span>\n    <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"cm\">#= REPL[2]:1 =#</span>\n    <span class=\"k\">begin</span>\n        <span class=\"cm\">#= REPL[1]:10 =#</span>\n        <span class=\"k\">begin</span>\n            <span class=\"cm\">#= REPL[1]:5 =#</span>\n            <span class=\"n\">var</span><span class=\"s\">\"##Z#269\"</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"cm\">#= REPL[1]:6 =#</span>\n            <span class=\"k\">begin</span>\n                <span class=\"cm\">#= REPL[1]:11 =#</span>\n                <span class=\"n\">var</span><span class=\"s\">\"##Z#268\"</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                <span class=\"cm\">#= REPL[1]:12 =#</span>\n                <span class=\"n\">Z</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Observe that <code>macroexpand(Main, ex)</code> has <code>var\"#4#Z\" = 1</code> and <code>var\"#4#Z\" = 2</code> that assign to an identical variable while <code>macroexpand(Main, ex2)</code> has<code>var\"##Z#269\" = 1</code> and <code>var\"##Z#268\" = 2</code> that assign to different variables.</p>\n<p>To share <code>gensym</code>'ed variable between macro invocations, I think you'd need something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">macro</span> <span class=\"n\">static_gensym</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span>\n           <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">gensym</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n           <span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">QuoteNode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))))</span>\n       <span class=\"k\">end</span>\n<span class=\"nd\">@static_gensym</span> <span class=\"p\">(</span><span class=\"k\">macro</span> <span class=\"n\">with</span> <span class=\"mi\">3</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">macro</span> <span class=\"n\">m3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">rec</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n           <span class=\"nd\">@static_gensym</span> <span class=\"n\">Z</span>\n           <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"n\">rec</span>\n               <span class=\"k\">quote</span>\n                   <span class=\"o\">$</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                   <span class=\"o\">$</span><span class=\"n\">x</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">else</span>\n               <span class=\"k\">quote</span>\n                   <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"nd\">@__MODULE__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nd\">@m3</span> <span class=\"k\">begin</span>\n                       <span class=\"o\">$</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                       <span class=\"o\">$</span><span class=\"n\">x</span>\n                   <span class=\"k\">end</span> <span class=\"kc\">false</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span> <span class=\"o\">|&gt;</span> <span class=\"n\">esc</span>\n       <span class=\"k\">end</span>\n<span class=\"nd\">@m3</span> <span class=\"p\">(</span><span class=\"k\">macro</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">macroexpand</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"n\">ex3</span><span class=\"p\">)</span>\n<span class=\"k\">quote</span>\n    <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"cm\">#= REPL[12]:1 =#</span>\n    <span class=\"k\">begin</span>\n        <span class=\"cm\">#= REPL[16]:10 =#</span>\n        <span class=\"k\">begin</span>\n            <span class=\"cm\">#= REPL[16]:5 =#</span>\n            <span class=\"n\">var</span><span class=\"s\">\"##Z#265\"</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"cm\">#= REPL[16]:6 =#</span>\n            <span class=\"k\">begin</span>\n                <span class=\"cm\">#= REPL[16]:11 =#</span>\n                <span class=\"n\">var</span><span class=\"s\">\"##Z#265\"</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n                <span class=\"cm\">#= REPL[16]:12 =#</span>\n                <span class=\"n\">Z</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 237741210,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1620340574
    },
    {
        "content": "<p>Thanks, this is definitely interesting! Although this doesn't really work for my use case, as macro(s) <code>@m</code> is supposed to be written by users, which can't be expected to dive into these subtleties. I think I will just document for now that <code>esc</code> is not supported in their macros.</p>",
        "id": 238134705,
        "sender_full_name": "Rafael Fourquet",
        "timestamp": 1620651080
    }
]