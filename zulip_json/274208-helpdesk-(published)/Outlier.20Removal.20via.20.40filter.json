[
    {
        "content": "<p>(deleted)</p>",
        "id": 231734961,
        "sender_full_name": "qu bit",
        "timestamp": 1616635552
    },
    {
        "content": "<p>Not quite sure what you want, but it looks like typical use case for antijoin</p>",
        "id": 231746640,
        "sender_full_name": "Andrey Oskin",
        "timestamp": 1616646772
    },
    {
        "content": "<p><a href=\"https://dataframes.juliadata.org/stable/man/joins/#Database-Style-Joins\">https://dataframes.juliadata.org/stable/man/joins/#Database-Style-Joins</a></p>",
        "id": 231746692,
        "sender_full_name": "Andrey Oskin",
        "timestamp": 1616646836
    },
    {
        "content": "<p>But you need a key to join them of course</p>",
        "id": 231746765,
        "sender_full_name": "Andrey Oskin",
        "timestamp": 1616646868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> </p>\n<p>Thank you - it was successful. </p>\n<p>I was able to identify outliers from a regression<br>\ncurve I generated for Cook's Distance.  I made a<br>\ndataframe to show the outlier values across four<br>\nvariables. </p>\n<p>TeddyForce = <br>\nA.Panda = [ 20,30,40]<br>\nA.Wombat = [100,120,140]<br>\nA.Zebra = [35,66,78]<br>\nA.Lilo = [12,16,19]</p>\n<p>These values (considered as sets) originated<br>\nfrom a dataframe, WookieDF, &amp; were considered<br>\noutliers for WookieDF. </p>\n<p>The goal was to remove the TeddyForce values<br>\n(and associated rows) from WookieDF. </p>\n<p>I was experimenting with:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Output</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"o\">∈</span> <span class=\"n\">eachrow</span><span class=\"p\">(</span><span class=\"n\">TeddyForce</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,[</span><span class=\"o\">:</span><span class=\"n\">Panda</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"n\">Wombat</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"n\">Zebra</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"n\">Lilo</span><span class=\"p\">]])</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">∉</span> <span class=\"n\">eachrow</span><span class=\"p\">(</span><span class=\"n\">WookieDF</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>But the execution time was very long (100 seconds +) and the output was in the <br>\nformat DataFrames.DataFrameRow{DataFrames.DataFrame,DataFrames.Index}.</p>",
        "id": 231775801,
        "sender_full_name": "qu bit",
        "timestamp": 1616667714
    }
]