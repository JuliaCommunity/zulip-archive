[
    {
        "content": "<p>In the repl, if I do <code>1 + \"hi\"</code> I get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"s\">\"hi\"</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">560</span>\n  <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int128</span><span class=\"p\">,</span> <span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int8</span><span class=\"p\">,</span> <span class=\"kt\">UInt128</span><span class=\"p\">,</span> <span class=\"kt\">UInt16</span><span class=\"p\">,</span> <span class=\"kt\">UInt32</span><span class=\"p\">,</span> <span class=\"kt\">UInt64</span><span class=\"p\">,</span> <span class=\"kt\">UInt8</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">87</span>\n  <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int8</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">BigInt</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">gmp</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">534</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>If I were to wrap this in a <code>try</code> block, what would I have to <code>print</code> to <code>stdout</code> to make all the same info appear? I want to print the error message, the closest candidates info, and the stacktrace the way they appear in the REPL.</p>",
        "id": 236099067,
        "sender_full_name": "Mason Protter",
        "timestamp": 1619390188
    },
    {
        "content": "<p>e.g. I want to know the <code>f</code> such that</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">try</span>\n    <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"s\">\"hi\"</span>\n<span class=\"k\">catch</span> <span class=\"nb\">e</span><span class=\"p\">;</span>\n    <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"nb\">e</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>will print</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">560</span>\n  <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int128</span><span class=\"p\">,</span> <span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int8</span><span class=\"p\">,</span> <span class=\"kt\">UInt128</span><span class=\"p\">,</span> <span class=\"kt\">UInt16</span><span class=\"p\">,</span> <span class=\"kt\">UInt32</span><span class=\"p\">,</span> <span class=\"kt\">UInt64</span><span class=\"p\">,</span> <span class=\"kt\">UInt8</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">87</span>\n  <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int8</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">BigInt</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">gmp</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">534</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 236099106,
        "sender_full_name": "Mason Protter",
        "timestamp": 1619390247
    },
    {
        "content": "<p><code>Base.display_error(e, catch_backtrace())</code> seems to work for me.</p>",
        "id": 236100456,
        "sender_full_name": "Kirill Simonov",
        "timestamp": 1619391707
    },
    {
        "content": "<p>Awesome, thanks! I knew there was something like this floating around</p>",
        "id": 236101067,
        "sender_full_name": "Mason Protter",
        "timestamp": 1619392351
    },
    {
        "content": "<p>If you want a public API to do something similar:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">try</span>\n    <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"s\">\"hi\"</span>\n<span class=\"k\">catch</span> <span class=\"nb\">e</span><span class=\"p\">;</span>\n    <span class=\"nd\">@error</span> <span class=\"s\">\"got an error\"</span> <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">e</span><span class=\"p\">,</span> <span class=\"n\">catch_backtrace</span><span class=\"p\">())</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 236101274,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1619392596
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/a/59690947/2442087\">https://stackoverflow.com/a/59690947/2442087</a></p>",
        "id": 236107928,
        "sender_full_name": "Mos√® Giordano",
        "timestamp": 1619399694
    },
    {
        "content": "<p>Great, thank you both</p>",
        "id": 236108831,
        "sender_full_name": "Mason Protter",
        "timestamp": 1619400705
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/filtering.20backtraces\">https://julialang.zulipchat.com/#narrow/stream/274208-helpdesk-.28published.29/topic/filtering.20backtraces</a> (for filtering like the REPL).</p>",
        "id": 236235664,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1619467944
    }
]