[
    {
        "content": "<p>Is there a way to customize how something is printed ina stacktrace? My usecase is the <a href=\"https://github.com/search?q=LegibleLambas.jl&amp;type=Repositories\">LegibleLambas.jl</a> package which is made for making anonymous functions easier to read:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nd\">@Î»</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>but unfortunately, this is only half useful since I don't know how to make it print nicely in a stacktrace. E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"s\">\"hi\"</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"o\">+</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">var</span><span class=\"s\">\"#19#20\"</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">LegibleLambda</span><span class=\"p\">{</span><span class=\"n\">var</span><span class=\"s\">\"#19#20\"</span><span class=\"p\">})(</span><span class=\"n\">args</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">LegibleLambdas</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">LegibleLambdas</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">LegibleLambdas</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">44</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">35</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">36</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>It'd be nice if <code>[2]</code> here could say <code>(x -&gt; x + 1)(args::String)</code>instead</p>",
        "id": 228295724,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614628624
    },
    {
        "content": "<p>You are looking for <code>Base.show_signature_function</code>, which is not exported, so use at your own risk. Only the type information is preserved in stacktraces though, so you don't get an instance of <code>f</code>, but only the type of <code>f</code>.</p>",
        "id": 228305894,
        "sender_full_name": "Simeon Schaub",
        "timestamp": 1614632745
    }
]