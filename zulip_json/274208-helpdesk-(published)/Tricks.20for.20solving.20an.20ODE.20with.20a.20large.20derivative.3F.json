[
    {
        "content": "<p>I'm trying to solve an ODE with <code>DifferentialEquations.jl</code></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi mathvariant=\"bold\">Γ</mi><mo mathvariant=\"bold\">′</mo></msup><mo>=</mo><mi mathvariant=\"bold\">u</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"bold\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{\\Gamma^\\prime} = \\mathbf{u}(t) \\mathbf{\\Gamma}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.801892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">u</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathbf\">Γ</span></span></span></span></span></span></p>\n<p>where <code>\\Gamma</code> and <code>u</code> are matrices. <code>u</code> is a block matrix, and has an element or two that are large enough that <code>Tsit5()</code> and <code>Rodas5()</code> overflow using <code>Float64</code>s. Using <code>BigFloat</code>s slows down the solvers to a crawl, and I haven't actually gotten the equation of motion to solve.<br>\nAre there any tricks for speeding this up and/or avoiding overflows? If these were scalars I would just solve the log of this equation, but matrix logs need commutativity to apply the usual identity.</p>\n<p>Here's some working and probably badly optimized code:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">DifferentialEquations</span>\n<span class=\"k\">using</span> <span class=\"n\">LinearAlgebra</span>\n<span class=\"k\">using</span> <span class=\"n\">LambertW</span>\n\n<span class=\"kd\">const</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"kd\">const</span> <span class=\"n\">Tend</span> <span class=\"o\">=</span> <span class=\"mf\">75.0</span>\n<span class=\"kd\">const</span> <span class=\"n\">Tstart</span> <span class=\"o\">=</span> <span class=\"n\">Tend</span> <span class=\"o\">-</span> <span class=\"mf\">65.0</span>\n<span class=\"kd\">const</span> <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span>\n<span class=\"kd\">const</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"n\">k1</span>\n<span class=\"kd\">const</span> <span class=\"n\">λ</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>\n<span class=\"kd\">const</span> <span class=\"n\">ϕ₀</span> <span class=\"o\">=</span> <span class=\"mf\">20.0</span>\n<span class=\"kd\">const</span> <span class=\"n\">πv</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">L</span>\n<span class=\"kd\">const</span> <span class=\"n\">H₀</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">Eh</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">))</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Eh</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">3</span><span class=\"n\">L</span><span class=\"o\">*</span><span class=\"n\">λ</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"n\">L</span><span class=\"o\">*</span><span class=\"n\">λ</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"kd\">const</span> <span class=\"n\">πw</span> <span class=\"o\">=</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"o\">*</span><span class=\"n\">λ</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">Eh</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"mi\">9</span><span class=\"n\">L</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"k\">function</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">ϕ</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kt\">Diagonal</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">),</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">)])</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">λ</span><span class=\"o\">*</span><span class=\"n\">ϕ</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">H</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">Eh</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)))</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">ϕ</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ϕ₀</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"n\">λ</span><span class=\"o\">*</span><span class=\"n\">lambertw</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"n\">λ</span><span class=\"o\">*</span><span class=\"n\">L</span><span class=\"o\">*</span><span class=\"n\">t</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">Eh</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)))</span><span class=\"o\">*</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">λ</span><span class=\"o\">*</span><span class=\"n\">ϕ₀</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Mab</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"nb\">e</span> <span class=\"o\">=</span> <span class=\"n\">Eh</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">Vab</span> <span class=\"o\">=</span> <span class=\"kt\">Diagonal</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"nb\">e</span><span class=\"p\">)</span><span class=\"o\">.*</span><span class=\"p\">[</span><span class=\"n\">λ</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">λ</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">λ</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n    <span class=\"n\">piu</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">πv</span><span class=\"p\">,</span> <span class=\"n\">πw</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">pil</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">piu</span>\n    <span class=\"n\">gvl</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">λ</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"nb\">e</span><span class=\"p\">),</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">]</span>\n    <span class=\"n\">gvu</span> <span class=\"o\">=</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))</span><span class=\"o\">*</span><span class=\"n\">gvl</span>\n    <span class=\"n\">Rππ</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">piu</span><span class=\"o\">'.*</span><span class=\"n\">pil</span> <span class=\"o\">-</span> <span class=\"nb\">I</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nb\">e</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">L</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n    <span class=\"n\">Pot</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"nb\">e</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">piu</span><span class=\"o\">'.*</span><span class=\"n\">pil</span> <span class=\"o\">+</span> <span class=\"n\">piu</span><span class=\"o\">'.*</span><span class=\"n\">gvl</span> <span class=\"o\">+</span> <span class=\"n\">gvu</span><span class=\"o\">'.*</span><span class=\"n\">pil</span>\n    <span class=\"k\">return</span> <span class=\"n\">Vab</span> <span class=\"o\">+</span> <span class=\"n\">Rππ</span> <span class=\"o\">+</span> <span class=\"n\">Pot</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">hp</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span> <span class=\"mi\">0</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">ϕ</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))</span><span class=\"o\">*</span><span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">πw</span><span class=\"o\">/</span><span class=\"mi\">2</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">πw</span><span class=\"o\">/</span><span class=\"mi\">2</span>  <span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">πv</span><span class=\"o\">/</span><span class=\"mi\">2</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">k1</span><span class=\"o\">*</span><span class=\"n\">πv</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"k\">end</span>\n\n<span class=\"kd\">const</span> <span class=\"n\">loga</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">127.0</span>\n<span class=\"k\">function</span> <span class=\"n\">Gprime</span><span class=\"p\">(</span><span class=\"n\">dG</span><span class=\"p\">,</span><span class=\"n\">G</span><span class=\"p\">,</span><span class=\"n\">logk</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"nd\">@inbounds</span> <span class=\"k\">begin</span>\n        <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">eltype</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n        <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"n\">T</span><span class=\"p\">}(</span><span class=\"n\">undef</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,(</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">))</span>\n        <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"n\">T</span><span class=\"p\">}(</span><span class=\"nb\">I</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"o\">-</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"n\">T</span><span class=\"p\">}(</span><span class=\"nb\">I</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">logk</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"o\">-</span><span class=\"n\">loga</span><span class=\"o\">-</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))))</span> <span class=\"o\">.-</span> <span class=\"n\">Mab</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n        <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"n\">T</span><span class=\"p\">}(</span><span class=\"nb\">I</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">Eh</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">Gπ</span> <span class=\"o\">=</span> <span class=\"n\">hp</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n        <span class=\"n\">G11</span> <span class=\"o\">=</span> <span class=\"nd\">@view</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"p\">]</span>\n        <span class=\"n\">G12</span> <span class=\"o\">=</span> <span class=\"nd\">@view</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"p\">]</span>\n        <span class=\"n\">dG</span> <span class=\"o\">.=</span> <span class=\"n\">u</span><span class=\"o\">*</span><span class=\"n\">G</span> <span class=\"o\">.-</span> <span class=\"n\">vcat</span><span class=\"p\">(</span><span class=\"n\">Gπ</span><span class=\"o\">*</span><span class=\"n\">G11</span><span class=\"p\">,</span> <span class=\"n\">Gπ</span><span class=\"o\">*</span><span class=\"n\">G12</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">nothing</span>\n<span class=\"k\">end</span>\n\n\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">Gprime</span><span class=\"p\">,</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}(</span><span class=\"nb\">I</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"n\">d</span><span class=\"p\">),(</span><span class=\"kt\">Float64</span><span class=\"p\">(</span><span class=\"n\">Tstart</span><span class=\"p\">),</span><span class=\"kt\">Float64</span><span class=\"p\">(</span><span class=\"n\">Tend</span><span class=\"p\">)),</span><span class=\"o\">-</span><span class=\"mf\">136.0</span><span class=\"p\">)</span>\n<span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span><span class=\"n\">Tsit5</span><span class=\"p\">(),</span><span class=\"n\">reltol</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span><span class=\"p\">,</span><span class=\"n\">abstol</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span><span class=\"p\">,</span><span class=\"n\">progress</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Typically I get retcodes of Unstable or DtLessThanMin.</p>",
        "id": 228884163,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1614909330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"278119\">@Christopher Rackauckas</span> if he's around is probably the ideal person to comment, but I can try to give some very generic advice.</p>",
        "id": 228884700,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614909734
    },
    {
        "content": "<p>First off, are you sure that your differential equation is correct? E.g. are there some consistency checks you can do?</p>",
        "id": 228884732,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614909758
    },
    {
        "content": "<p>Yes, first make sure it's actually the equation you wanted to solve. That's 99.9% of issues.</p>",
        "id": 228884816,
        "sender_full_name": "Christopher Rackauckas",
        "timestamp": 1614909816
    },
    {
        "content": "<p>If it does solve with BigFloat but not Float64, then you might want to look into alternative number types. <a href=\"https://github.com/search?q=ArbFloats.jl&amp;type=Repositories\">ArbFloats.jl</a>, <a href=\"https://github.com/search?q=DoubleFloats.jl&amp;type=Repositories\">DoubleFloats.jl</a>, etc.</p>",
        "id": 228884882,
        "sender_full_name": "Christopher Rackauckas",
        "timestamp": 1614909847
    },
    {
        "content": "<p>There's a large set of higher precision number types that are faster than the generic BigFloat.</p>",
        "id": 228884909,
        "sender_full_name": "Christopher Rackauckas",
        "timestamp": 1614909863
    },
    {
        "content": "<p>It may also be that there's a clever way you can rescale your problem so that you can just use Float64</p>",
        "id": 228884959,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614909909
    },
    {
        "content": "<p>E.g. a very simple example would be that if the solution is of the form</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mf\">1e100</span> <span class=\"o\">+</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>then you can often just subtract off the big part and solve for <code>g</code> and get more stable numerics.</p>",
        "id": 228885104,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614910003
    },
    {
        "content": "<p>Using a non-generic ODE solver could help too. Defining the problem with a DiffEqArrayOperator and using the Magnus integrators could help too  <a href=\"https://diffeq.sciml.ai/stable/solvers/nonautonomous_linear_ode/#State-Independent-Solvers\">https://diffeq.sciml.ai/stable/solvers/nonautonomous_linear_ode/#State-Independent-Solvers</a></p>",
        "id": 228885191,
        "sender_full_name": "Christopher Rackauckas",
        "timestamp": 1614910083
    },
    {
        "content": "<p>But seriously, there's been so many times where I was tryng to solve an equation and getting a solution that oscillated like crazy or was super stiff or blew up in other ways and like the fourth time I double checked the equation I realized I had made a mistake defining the diffeq.</p>",
        "id": 228885290,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614910130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Tricks.20for.20solving.20an.20ODE.20with.20a.20large.20derivative.3F/near/228884959\">said</a>:</p>\n<blockquote>\n<p>It may also be that there's a clever way you can rescale your problem so that you can just use Float64</p>\n</blockquote>\n<p>Yeah, if this equation is correct that's my hope. I'll triple check it and make sure.</p>",
        "id": 228885352,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1614910190
    },
    {
        "content": "<p>One trick you can use is try to do an asymptotic expansion on your function to see various behaviour and factor it out. E.g. you may be able to show that for large <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, your solution goes as </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≈</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(x) \\approx e^{-x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.821331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.821331em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>in which case, you might be able to write</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = e^{-x} g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.071331em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.821331em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>then you can stick this form of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> into your differential equation and solve for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> instead.</p>",
        "id": 228886271,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614910757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326795\">@Robbie Rosati</span> Have you estimated the condition number of the u-matrix? If some numbers are very large, then you may have two problems: both overflow and stiffness. Mason suggests factorization can help. If it isn't stiff, then, yes, rescale the whole thing, but it's most likely stiff. There are some other ways to take Mason's advice: Picard iterations will approximate an integral over an interval. Operator splitting will let you combine a stable integration with an unstable one. Basically, find that condition number, and it may send you to a chapter on stiff equations.</p>",
        "id": 228896796,
        "sender_full_name": "Andrew Dolgert",
        "timestamp": 1614918880
    },
    {
        "content": "<p>Thanks everyone for the replies. So, some updates:</p>\n<ul>\n<li>I rechecked the example I made and did find a mistake, but it was in a subleading term and doesn't seem to change the behavior much.</li>\n<li>I changed the example to a 4x4 version (as small as I can go), also without much change qualitative change.</li>\n<li><span class=\"user-mention\" data-user-id=\"394909\">@Andrew Dolgert</span>  The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> matrix has a huge condition number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>u</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>∗</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>u</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>∼</mo><mn>1</mn><msup><mn>0</mn><mn>19</mn></msup></mrow><annotation encoding=\"application/x-tex\">||u||*||u^{-1}|| \\sim 10^{19}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">u</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span></span> (and shrinking as time evolves)</li>\n<li>I can get it to solve with with BigFloats or <a href=\"https://github.com/search?q=DoubleFloats.jl&amp;type=Repositories\">DoubleFloats.jl</a> if I increase <code>Tend</code>. This also decreases the condition number by a lot.</li>\n<li>I tried changing the solver to a stiff one<code>Rosenbrock23(autodiff=false)</code> (with the original <code>Tend</code>) and I get DtLessThanMin with <code>Float64</code>s. It seems to be working with <code>Double64</code>s but is very slow. Is there a better solver to try, or is there a better way to massage the equation?</li>\n</ul>\n<p>I think there's a paper working on a similar model that estimated the growth of the solution, I might try <span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> 's suggestion and see if I can estimate the growth and factor it out.</p>",
        "id": 228994522,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1614966282
    },
    {
        "content": "<p>You may want to give <a href=\"https://github.com/dzhang314/MultiFloats.jl\">https://github.com/dzhang314/MultiFloats.jl</a> a try. Should be about 2x faster than <code>Double64</code>,  but with worse <code>NaN</code> handling.</p>",
        "id": 228995705,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614966755
    },
    {
        "content": "<p>Though they don't support transcendental functions yet, so that might be a dealbreaker.</p>",
        "id": 228995749,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614966780
    }
]