[
    {
        "content": "<p>I'm trying to use a Val type to make some data cleaning operations a bit easier. Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">ObsType</span><span class=\"p\">{</span><span class=\"kt\">x</span><span class=\"p\">}</span> <span class=\"k\">end</span>\n\n<span class=\"n\">ObsType</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">ObsType</span><span class=\"p\">{</span><span class=\"kt\">s</span><span class=\"p\">}()</span>\n<span class=\"n\">ObsType</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">AbstractString</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ObsType</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n\n<span class=\"n\">_fix_val</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">ObsType</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n<span class=\"n\">_fix_val</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">::</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">ObsType</span><span class=\"p\">{</span><span class=\"ss\">:timepoint</span><span class=\"p\">})</span> <span class=\"o\">=</span> <span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"n\">_fix_val</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">::</span><span class=\"kt\">AbstractString</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">ObsType</span><span class=\"p\">{</span><span class=\"ss\">:timepoint</span><span class=\"p\">})</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This works great, and allows me to do stuff like <code>df[!, col] = _fix_val.(df.col, ObsType{col})</code>, regardless of what <code>col</code> is. Cool.</p>\n<p>But now I have several \"date-like\" column names that I'd like to treat all in the same way.  I was thinking I could maybe do this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\"># I need this tuple for other purposes, so I thought I could re-use it</span>\n<span class=\"k\">const</span> <span class=\"n\">_date_priority</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"ss\">:collectionDate</span><span class=\"p\">,</span>\n                        <span class=\"ss\">:CollectionDate</span><span class=\"p\">,</span>\n                        <span class=\"ss\">:assessmentDate</span><span class=\"p\">,</span>\n                        <span class=\"ss\">:scanDate</span><span class=\"p\">,</span>\n                        <span class=\"ss\">:Date</span><span class=\"p\">,</span>\n                        <span class=\"ss\">:momDate</span><span class=\"p\">)</span>\n\n<span class=\"k\">function</span> <span class=\"n\">_parse_date</span><span class=\"p\">(</span><span class=\"n\">datestring</span><span class=\"p\">)</span>\n    <span class=\"n\">occursin</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">datestring</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">return</span> <span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"n\">datestring</span><span class=\"p\">,</span> <span class=\"n\">Dates</span><span class=\"o\">.</span><span class=\"n\">DateFormat</span><span class=\"p\">(</span><span class=\"s\">\"m/d/y\"</span><span class=\"p\">))</span>\n    <span class=\"n\">throw</span><span class=\"p\">(</span><span class=\"kt\">ArgumentError</span><span class=\"p\">(</span><span class=\"s\">\"Invalid date string: </span><span class=\"si\">$datestring</span><span class=\"s\">\"</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">_date_priority</span>\n    <span class=\"nd\">@show</span> <span class=\"n\">d</span>\n    <span class=\"nd\">@eval</span> <span class=\"n\">_fix_val</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">::</span><span class=\"kt\">AbstractString</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">ObsType</span><span class=\"p\">{</span><span class=\"kt\">d</span><span class=\"p\">})</span> <span class=\"o\">=</span> <span class=\"n\">_parse_date</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>but this gives me <code>UndefVarError: d not defined</code>. I also tried <code>$d</code>, but this gives me <code>UndefVarError: collectionDate not defined</code>. That's the extent of my debugging eval ability <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 239774550,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1621613096
    },
    {
        "content": "<p>I think you need <code>$(QuoteNode(d))</code></p>",
        "id": 239818637,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1621634727
    },
    {
        "content": "<p>This is basically a quirk of <code>Expr</code> and <code>Symbol</code> inside <code>eval</code> or when returned from macros. You need <code>QuoteNode</code> to signal to julia that the <code>Symbol</code> is meant to be interpreted as a symbol rather than as a variable name.</p>",
        "id": 239821003,
        "sender_full_name": "Mason Protter",
        "timestamp": 1621636300
    },
    {
        "content": "<p>I tend to think it's more like a universal pain that comes with AST manipulation (and not just Julia's <code>Expr</code>). I imagine you'd need some kind of quote/unquote machinery when dealing with AST in general.</p>",
        "id": 239822225,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1621637194
    },
    {
        "content": "<p>Quasiquoting in particular never fails to give me a headache :P</p>",
        "id": 239823041,
        "sender_full_name": "Brian Chen",
        "timestamp": 1621637775
    },
    {
        "content": "<p>Yes of course. I just mean that it's a quirk of using elements of the AST in code. Not that we did something wrong with <code>Expr</code> and <code>Symbol</code></p>",
        "id": 239823412,
        "sender_full_name": "Mason Protter",
        "timestamp": 1621638049
    },
    {
        "content": "<p>Ah, yes, you mentioned \"quirk ... inside <code>eval</code>.\" Totally agree <code>Expr</code> and <code>Symbol</code> are more quirky in eval.</p>",
        "id": 239824129,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1621638591
    }
]