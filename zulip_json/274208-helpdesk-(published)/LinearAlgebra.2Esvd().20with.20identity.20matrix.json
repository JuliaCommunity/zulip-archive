[
    {
        "content": "<p>I am trying to perform <code>svd</code> on the identity matrix <code>I</code> but it seems like whatever the type of <code>I</code> is, it's raising an error?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ii</span> <span class=\"o\">=</span> <span class=\"n\">svd</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>error:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"n\">SVD</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">SparseArrays</span><span class=\"o\">.</span><span class=\"kt\">SparseMatrixCSC</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">BitVector</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">SparseArrays</span><span class=\"o\">.</span><span class=\"kt\">SparseMatrixCSC</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">})</span>\n\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n\n<span class=\"n\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"n\">SVD</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">N</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Tr</span><span class=\"p\">},</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">N</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">Tr</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">buildbot</span><span class=\"o\">/</span><span class=\"n\">worker</span><span class=\"o\">/</span><span class=\"n\">package_macos64</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">LinearAlgebra</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">svd</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">68</span>\n\n<span class=\"n\">svd</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">Diagonal</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">}})</span><span class=\"nd\">@diagonal</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">690</span>\n<span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span><span class=\"nd\">@Local</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Am I correct in this? If so, that seems odd that this isn't available out of the box</p>",
        "id": 240778671,
        "sender_full_name": "Dale Black",
        "timestamp": 1622415987
    },
    {
        "content": "<p>The problem is that <code>I</code> doesn't have a size, it is a generic representation. If you type <code>I(3)</code> you get the 3x3 sparse identity. And then an error message will be thrown saying that for sparse matrices you could use <a href=\"https://github.com/search?q=Arpack.jl&amp;type=Repositories\">Arpack.jl</a></p>",
        "id": 240778800,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1622416233
    },
    {
        "content": "<p>Oh I meant to put <code>I(3)</code> so I just edited the message above. But that's weird those aren't compatible. How does <a href=\"https://github.com/search?q=Arpack.jl&amp;type=Repositories\">Arpack.jl</a> fix this?</p>",
        "id": 240778875,
        "sender_full_name": "Dale Black",
        "timestamp": 1622416441
    },
    {
        "content": "<p>Oh wait it looks like it has it's own version of <code>svds</code>. I will give that a try</p>",
        "id": 240778944,
        "sender_full_name": "Dale Black",
        "timestamp": 1622416542
    },
    {
        "content": "<p>Could do <code>svd(collect(I(3)))</code></p>",
        "id": 240780394,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622419302
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">ii</span> <span class=\"o\">=</span> <span class=\"n\">svd</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">collect</span><span class=\"p\">)</span>\n<span class=\"kt\">SVD</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}}</span>\n<span class=\"n\">U</span> <span class=\"n\">factor</span><span class=\"o\">:</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>\n <span class=\"mf\">0.0</span>  <span class=\"mf\">1.0</span>  <span class=\"mf\">0.0</span>\n <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">1.0</span>\n<span class=\"n\">singular</span> <span class=\"n\">values</span><span class=\"o\">:</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span>\n <span class=\"mf\">1.0</span>\n <span class=\"mf\">1.0</span>\n<span class=\"n\">Vt</span> <span class=\"n\">factor</span><span class=\"o\">:</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>\n <span class=\"mf\">0.0</span>  <span class=\"mf\">1.0</span>  <span class=\"mf\">0.0</span>\n <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">1.0</span>\n</code></pre></div>",
        "id": 240780395,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622419311
    },
    {
        "content": "<p>Alternatively, <code>Matrix(I(3))</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 240781495,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1622421329
    },
    {
        "content": "<p>Thank you, both of those are super easy solutions</p>",
        "id": 240781620,
        "sender_full_name": "Dale Black",
        "timestamp": 1622421558
    },
    {
        "content": "<p><code>svd(1.0I(3))</code> also works</p>",
        "id": 240793170,
        "sender_full_name": "Dominic Guri",
        "timestamp": 1622438390
    },
    {
        "content": "<p>Oh interesting that works!</p>",
        "id": 240793580,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622438952
    }
]