[
    {
        "content": "<p>Hey everyone, I'm still struggling on spotting code inefficiencies and how to improve them. <br>\nTake these two functions below. Is there some inefficiency in them that could somehow be improved?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">w2gaussiancost</span><span class=\"p\">(</span><span class=\"n\">μa</span><span class=\"p\">,</span><span class=\"n\">Σa</span><span class=\"p\">,</span><span class=\"n\">μb</span><span class=\"p\">,</span> <span class=\"n\">Σb</span><span class=\"p\">)</span>\n    <span class=\"n\">w2</span>   <span class=\"o\">=</span> <span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">μa</span> <span class=\"o\">-</span> <span class=\"n\">μb</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">tr</span><span class=\"p\">(</span><span class=\"n\">Σa</span> <span class=\"o\">+</span> <span class=\"n\">Σb</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"n\">Σb</span><span class=\"o\">*</span><span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">w2</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">w2gaussianmap</span><span class=\"p\">(</span><span class=\"n\">μa</span><span class=\"p\">,</span><span class=\"n\">Σa</span><span class=\"p\">,</span><span class=\"n\">μb</span><span class=\"p\">,</span> <span class=\"n\">Σb</span><span class=\"p\">)</span>\n    <span class=\"n\">A</span>    <span class=\"o\">=</span> <span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"n\">Σb</span><span class=\"o\">*</span><span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">μb</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">-</span> <span class=\"n\">μa</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">T</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 238858083,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1621043733
    },
    {
        "content": "<p>What are the types of the arguments?</p>",
        "id": 238859250,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1621044815
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> is a vector of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> dimensions and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> a matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>",
        "id": 238859450,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1621044999
    },
    {
        "content": "<p>Gotcha. Yeah, you're pretty much dependent on the efficiency of the underlying lin alg methods in that case. <br>\nI don't see anything super obvious, but perhaps someone else will.</p>",
        "id": 238859610,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1621045192
    },
    {
        "content": "<p>If you suspect something isn't as efficient as it should be, you could try profiling and see if anyhing looks odd there</p>",
        "id": 238859679,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1621045224
    },
    {
        "content": "<p>I guess one other thing could be checking whether or not <code>^(1/2)</code> is going to be the most efficient way to take the matrix square root</p>",
        "id": 238859886,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1621045427
    },
    {
        "content": "<p>You might be able to avoid taking the square root of <code>Σa</code> twice by assigning its value to another variable and passing that to the expression</p>",
        "id": 238861146,
        "sender_full_name": "Pablo Zubieta",
        "timestamp": 1621046613
    },
    {
        "content": "<p>Same for <code>Σa^(-1/2)</code></p>",
        "id": 238861162,
        "sender_full_name": "Pablo Zubieta",
        "timestamp": 1621046642
    },
    {
        "content": "<p>Oh true yeah, the compiler almost certainly isn't going to be smart enough to do that for you</p>",
        "id": 238861875,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1621047391
    },
    {
        "content": "<p>How big is <code>n</code>? My guess is that the square root is going to dwarf everything:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">begin</span>\n           <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n           <span class=\"n\">Σa</span><span class=\"p\">,</span> <span class=\"n\">Σb</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n           <span class=\"n\">μa</span><span class=\"p\">,</span> <span class=\"n\">μb</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n           <span class=\"n\">rtΣa</span> <span class=\"o\">=</span> <span class=\"nd\">@btime</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">Σa</span><span class=\"p\">)</span>\n           <span class=\"nd\">@btime</span> <span class=\"o\">$</span><span class=\"n\">rtΣa</span> <span class=\"o\">*</span> <span class=\"o\">$</span><span class=\"n\">Σb</span> <span class=\"o\">*</span> <span class=\"o\">$</span><span class=\"n\">rtΣa</span>\n           <span class=\"nd\">@btime</span> <span class=\"n\">w2gaussiancost</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">μa</span><span class=\"p\">,</span><span class=\"o\">$</span><span class=\"n\">Σa</span><span class=\"p\">,</span><span class=\"o\">$</span><span class=\"n\">μb</span><span class=\"p\">,</span><span class=\"o\">$</span><span class=\"n\">Σb</span><span class=\"p\">)</span>  <span class=\"c\"># original</span>\n           <span class=\"nd\">@btime</span> <span class=\"n\">w2gaussiancost_2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">μa</span><span class=\"p\">,</span><span class=\"o\">$</span><span class=\"n\">Σa</span><span class=\"p\">,</span><span class=\"o\">$</span><span class=\"n\">μb</span><span class=\"p\">,</span><span class=\"o\">$</span><span class=\"n\">Σb</span><span class=\"p\">)</span> <span class=\"c\"># calls sqrt twice</span>\n       <span class=\"k\">end</span><span class=\"p\">;</span>\n  <span class=\"mf\">114.958</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">16.33</span> <span class=\"n\">KiB</span><span class=\"p\">)</span>\n  <span class=\"mf\">1.271</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">3.53</span> <span class=\"n\">KiB</span><span class=\"p\">)</span>\n  <span class=\"mf\">334.083</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">49</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">66.06</span> <span class=\"n\">KiB</span><span class=\"p\">)</span>\n  <span class=\"mf\">215.042</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">25</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">36.42</span> <span class=\"n\">KiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 238862870,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1621048225
    },
    {
        "content": "<p>What properties does <code>Σa</code> have? Is there any structure to it?</p>",
        "id": 238870634,
        "sender_full_name": "Mason Protter",
        "timestamp": 1621056652
    },
    {
        "content": "<p>E.g. is it hermitian? Positive definite?</p>",
        "id": 238870648,
        "sender_full_name": "Mason Protter",
        "timestamp": 1621056673
    },
    {
        "content": "<p>It's positive semi-definite. It's the covariance for a Mv Normal distribution.</p>",
        "id": 240526592,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1622147261
    },
    {
        "content": "<p>I'm mostly worried about the performance for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mrow><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Sigma^{-1/2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1/2</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 240526759,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1622147334
    },
    {
        "content": "<p>Okay, are you sure you need the actual inverse square root? Would a Cholesky factor work for you instead?</p>",
        "id": 240531667,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622149553
    },
    {
        "content": "<p>The pivoted Cholesky decomposition works on positive semi-definite matrices</p>",
        "id": 240531769,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622149586
    },
    {
        "content": "<p>If you can't use Cholesky for some reason, I'd use either an SVD or Eigen decomposition and then use that to accellerate products of the form <code>A * Σ^(-1/2)</code></p>",
        "id": 240532414,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622149893
    },
    {
        "content": "<p>I think I do actually need it. But I'll see if perhaps the Cholesky decomp. works. Thanks for the input.</p>",
        "id": 240537248,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1622152484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"358317\">@Davi Sales Barreira</span> are you sure that your matrix is positive semi-definite, and not fully positive definite? For a semi-definite matrix, this whole thing is just ill conditioned when you take an inverse square root.</p>",
        "id": 240540107,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622154506
    },
    {
        "content": "<p>It's a covariance matrix for the Multivariate Gaussian, so I think it is indeed positive semi-definite, but it is also Symmetric, so this might solve the ill condition. Doesn't it?</p>",
        "id": 240540975,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1622155166
    },
    {
        "content": "<p>The whole thing I'm trying to calculate is </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code> <span class=\"n\">A</span>    <span class=\"o\">=</span> <span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"n\">Σb</span><span class=\"o\">*</span><span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">Σa</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Which is the solution for the Optimal Transport map between multivariate gaussians. So I do think it should not be ill conditioned in any way, because this map is proved to always exist.</p>",
        "id": 240541110,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1622155257
    },
    {
        "content": "<p><code>Σa^(-1/2)</code> is ill defined if the matrix is semi-definite, regardless of whether or not it's symmetric.</p>",
        "id": 240541639,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622155717
    },
    {
        "content": "<p>Hmm, maybe it's okay actually, the square root does seem to improve it's conditioning quite a bit.</p>",
        "id": 240542232,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622156283
    },
    {
        "content": "<p>I cannot prove it, but this result is very well established. So it's probably possible to prove it's indeed well conditioned.</p>",
        "id": 240543014,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1622156824
    },
    {
        "content": "<p>How big are the matrices you’re dealing with?</p>",
        "id": 240544324,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622157870
    },
    {
        "content": "<p>They can be quite big. It is for a package, so it can be arbitrarily big.</p>",
        "id": 240652245,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1622231283
    }
]