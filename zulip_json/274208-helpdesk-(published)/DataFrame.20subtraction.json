[
    {
        "content": "<p>Hello: </p>\n<p>How does one subtract columnar values between two dataframes <br>\nwhen the data frames have different dimensions. </p>\n<p>For example, <br>\nDF1_dim = Base.OneTo(48)<br>\nDF2_dim=Base.OneTo(58)</p>\n<p>Ideally, where there are no overlapping values, I would like to fill<br>\nthe resultant DF's cell with 'NaN'. </p>\n<p>Any suggestions?</p>",
        "id": 228263966,
        "sender_full_name": "qu bit",
        "timestamp": 1614617403
    },
    {
        "content": "<p>You'd need to pad the shorter dataframe with <code>NaN</code> at the bottom</p>",
        "id": 228267921,
        "sender_full_name": "Nils",
        "timestamp": 1614618593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228267921\">said</a>:</p>\n<blockquote>\n<p>You'd need to pad the shorter dataframe with <code>NaN</code> at the bottom</p>\n</blockquote>\n<p>Hi Nils, </p>\n<p>Could you provide a short example of this? <br>\nThank you,</p>",
        "id": 228268923,
        "sender_full_name": "qu bit",
        "timestamp": 1614618960
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"mi\">5</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>      <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"mf\">0.6121</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"mf\">0.807316</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"mf\">0.827804</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">4</span>  <span class=\"mf\">0.782406</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">5</span>  <span class=\"mf\">0.228108</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"mi\">3</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>      <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"mf\">0.211348</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"mf\">0.645856</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"mf\">0.337383</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">.-</span> <span class=\"n\">df2</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">DimensionMismatch</span><span class=\"p\">(</span><span class=\"s\">\"arrays could not be broadcast to a common size; got a dimension with lengths 5 and 3\"</span><span class=\"p\">)</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">_bcs1</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">501</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">_bcs</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}},</span> <span class=\"n\">newshape</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">495</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">broadcast_shape</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">489</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">combine_axes</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">484</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">instantiate</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">266</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">materialize</span><span class=\"p\">(</span><span class=\"n\">bc</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span><span class=\"o\">.</span><span class=\"n\">Broadcasted</span><span class=\"p\">{</span><span class=\"n\">DataFrames</span><span class=\"o\">.</span><span class=\"n\">DataFrameStyle</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">DataFrame</span><span class=\"p\">}})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">883</span>\n <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">.-</span> <span class=\"n\">vcat</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">,</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n<span class=\"mi\">5</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>        <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span><span class=\"o\">?</span>   <span class=\"kt\">Float64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼─────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.400752</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.16146</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.490422</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"n\">missing</span>  <span class=\"n\">missing</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"n\">missing</span>  <span class=\"n\">missing</span>\n</code></pre></div>",
        "id": 228269184,
        "sender_full_name": "Nils",
        "timestamp": 1614619072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228269184\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"mi\">5</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>      <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"mf\">0.6121</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"mf\">0.807316</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"mf\">0.827804</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">4</span>  <span class=\"mf\">0.782406</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">5</span>  <span class=\"mf\">0.228108</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"mi\">3</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>      <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"mf\">0.211348</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"mf\">0.645856</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"mf\">0.337383</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">.-</span> <span class=\"n\">df2</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">DimensionMismatch</span><span class=\"p\">(</span><span class=\"s\">\"arrays could not be broadcast to a common size; got a dimension with lengths 5 and 3\"</span><span class=\"p\">)</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">_bcs1</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">501</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">_bcs</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}},</span> <span class=\"n\">newshape</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">495</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">broadcast_shape</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">489</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">combine_axes</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">484</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">instantiate</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">266</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">materialize</span><span class=\"p\">(</span><span class=\"n\">bc</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span><span class=\"o\">.</span><span class=\"n\">Broadcasted</span><span class=\"p\">{</span><span class=\"n\">DataFrames</span><span class=\"o\">.</span><span class=\"n\">DataFrameStyle</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">DataFrame</span><span class=\"p\">}})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">883</span>\n <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">.-</span> <span class=\"n\">vcat</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">,</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n<span class=\"mi\">5</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>        <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span><span class=\"o\">?</span>   <span class=\"kt\">Float64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼─────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.400752</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.16146</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.490422</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"n\">missing</span>  <span class=\"n\">missing</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"n\">missing</span>  <span class=\"n\">missing</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hi Nils, </p>\n<p>This would work, but the error I am returning is: <br>\nMethodError: no method matching -(::String, ::String)</p>\n<p>Which I think has to do with the fact my df has more <br>\nthan two fields, some are Int64, String, Float64. </p>\n<p>Any work around you can think of, almost there.</p>",
        "id": 228272502,
        "sender_full_name": "qu bit",
        "timestamp": 1614620228
    },
    {
        "content": "<p>Well the workaround is either to parse your strings into numbers, or subtract column-by-column, only using the columns which actually hold numbers</p>",
        "id": 228297582,
        "sender_full_name": "Nils",
        "timestamp": 1614629367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390081\">qu bit</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228272502\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228269184\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"mi\">5</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>      <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"mf\">0.6121</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"mf\">0.807316</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"mf\">0.827804</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">4</span>  <span class=\"mf\">0.782406</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">5</span>  <span class=\"mf\">0.228108</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"mi\">3</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>      <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"mf\">0.211348</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"mf\">0.645856</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"mf\">0.337383</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">.-</span> <span class=\"n\">df2</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">DimensionMismatch</span><span class=\"p\">(</span><span class=\"s\">\"arrays could not be broadcast to a common size; got a dimension with lengths 5 and 3\"</span><span class=\"p\">)</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">_bcs1</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">501</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">_bcs</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}},</span> <span class=\"n\">newshape</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">495</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">broadcast_shape</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">489</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">combine_axes</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">484</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">instantiate</span>\n   <span class=\"err\">@</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">266</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">materialize</span><span class=\"p\">(</span><span class=\"n\">bc</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span><span class=\"o\">.</span><span class=\"n\">Broadcasted</span><span class=\"p\">{</span><span class=\"n\">DataFrames</span><span class=\"o\">.</span><span class=\"n\">DataFrameStyle</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">DataFrame</span><span class=\"p\">}})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span> <span class=\"o\">.\\</span><span class=\"n\">broadcast</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">883</span>\n <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">.-</span> <span class=\"n\">vcat</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">,</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n<span class=\"mi\">5</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>        <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span><span class=\"o\">?</span>   <span class=\"kt\">Float64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼─────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.400752</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.16146</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>       <span class=\"mi\">0</span>        <span class=\"mf\">0.490422</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"n\">missing</span>  <span class=\"n\">missing</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"n\">missing</span>  <span class=\"n\">missing</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hi Nils, </p>\n<p>This would work, but the error I am returning is: <br>\nMethodError: no method matching -(::String, ::String)</p>\n<p>Which I think has to do with the fact my df has more <br>\nthan two fields, some are Int64, String, Float64. </p>\n<p>Any work around you can think of, almost there.</p>\n</blockquote>\n<p>Hi Nils, </p>\n<p>I am using: </p>\n<p>DF1[!,:Total] .- vcat(DF2[!,:Total], DataFrame(Total= [missing for _ ∈ 1:10]))</p>\n<p>And am returning: <br>\nDimensionMismatch(\"arrays could not be broadcast to a common size; got a dimension with lengths 58 and 49\")</p>\n<p>Any suggestions?</p>",
        "id": 228315774,
        "sender_full_name": "qu bit",
        "timestamp": 1614636792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228297582\">said</a>:</p>\n<blockquote>\n<p>Well the workaround is either to parse your strings into numbers, or subtract column-by-column, only using the columns which actually hold numbers</p>\n</blockquote>\n<p>Hi Nils, </p>\n<p>I attempted to subtract the 'Total' column from two dataframes using<br>\nyour code earlier as: </p>\n<p>I am using:</p>\n<p>DF1[!,:Total] .- vcat(DF2[!,:Total], DataFrame(Total= [missing for _ ∈ 1:10]))</p>\n<p>And am returning:<br>\nDimensionMismatch(\"arrays could not be broadcast to a common size; got a dimension with lengths 58 and 49\")</p>\n<p>Any suggestions?</p>",
        "id": 228320649,
        "sender_full_name": "qu bit",
        "timestamp": 1614638873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390081\">qu bit</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228320649\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228297582\">said</a>:</p>\n<blockquote>\n<p>Well the workaround is either to parse your strings into numbers, or subtract column-by-column, only using the columns which actually hold numbers</p>\n</blockquote>\n<p>Hi Nils, </p>\n<p>I attempted to subtract the 'Total' column from two dataframes using<br>\nyour code earlier as: </p>\n<p>I am using:</p>\n<p>DF1[!,:Total] .- vcat(DF2[!,:Total], DataFrame(Total= [missing for _ ∈ 1:10]))</p>\n<p>And am returning:<br>\nDimensionMismatch(\"arrays could not be broadcast to a common size; got a dimension with lengths 58 and 49\")</p>\n<p>Any suggestions?</p>\n</blockquote>\n<p>Problem Solved: Sorta</p>\n<p>I applied the following function. </p>\n<p>begin<br>\n    select(DF1, :Total) .- vcat(select(DF2,:Total), DataFrame(Total = [missing for _ ∈ 1:10]))<br>\nend</p>\n<p>Now I am experimenting to see, how include another column to make <br>\nthe resultant dataframe more informative.</p>",
        "id": 228337298,
        "sender_full_name": "qu bit",
        "timestamp": 1614647713
    },
    {
        "content": "<p>If you're just subtracting two columns it's just</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">.-</span> <span class=\"p\">[</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)]]</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"mi\">0</span>\n <span class=\"mi\">0</span>\n <span class=\"mi\">0</span>\n  <span class=\"n\">missing</span>\n  <span class=\"n\">missing</span>\n</code></pre></div>\n<p>using my example above</p>",
        "id": 228376207,
        "sender_full_name": "Nils",
        "timestamp": 1614676109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228376207\">said</a>:</p>\n<blockquote>\n<p>If you're just subtracting two columns it's just</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">.-</span> <span class=\"p\">[</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)]]</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"mi\">0</span>\n <span class=\"mi\">0</span>\n <span class=\"mi\">0</span>\n  <span class=\"n\">missing</span>\n  <span class=\"n\">missing</span>\n</code></pre></div>\n<p>using my example above</p>\n</blockquote>\n<p>Hi Nils, </p>\n<p>The computation time is about 3 times as fast for: <br>\nbegin<br>\nselect(DF1, :Total) .- vcat(select(DF2,:Total), DataFrame(Total = [missing for _ ∈ 1:10]))<br>\nend</p>\n<p>Compared to: <br>\n df1.a .- [df2.a; [missing for _ ∈ 1:nrow(df1)-nrow(df2)]]</p>\n<p>However, the second approach is a lot cleaner. </p>\n<p>If I may, what is your reasoning for using: <br>\nmissing for _ ∈ </p>\n<p>Thank you,</p>",
        "id": 228388888,
        "sender_full_name": "qu bit",
        "timestamp": 1614682115
    },
    {
        "content": "<p>How did you benchmark this? I can't see the first being faster at all, given that you're constructing an additional dataframe. The <code>missing for _ ∈ in ...</code> syntax just means \"repeat <code>missing</code> for this many times\", the underscore is often used to signify a loop variable that isn't actually used in the loop</p>",
        "id": 228405226,
        "sender_full_name": "Nils",
        "timestamp": 1614690083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228405226\">said</a>:</p>\n<blockquote>\n<p>How did you benchmark this? I can't see the first being faster at all, given that you're constructing an additional dataframe. The <code>missing for _ ∈ in ...</code> syntax just means \"repeat <code>missing</code> for this many times\", the underscore is often used to signify a loop variable that isn't actually used in the loop</p>\n</blockquote>\n<p>Hi Nils,</p>\n<p>Thanks for explaining. </p>\n<p>I am using PlutoIDE. When execute:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">DF1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">Total</span><span class=\"p\">)</span> <span class=\"o\">.-</span> <span class=\"n\">vcat</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">DF2</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"n\">Total</span><span class=\"p\">),</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">Total</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">]))</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>...the execution time is 25 microseconds. Compared to when I execute:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">.-</span> <span class=\"p\">[</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)]]</span>\n</code></pre></div>\n<p>...whose execution time is about 75 microseconds. </p>\n<p>Is this what you were referring to when you asked the 'benchmark' <br>\nquestion?</p>",
        "id": 228409655,
        "sender_full_name": "qu bit",
        "timestamp": 1614692068
    },
    {
        "content": "<p>Yes, that's what I'm referring to. The cell timings in Pluto aren't really meant to perform microbenchmarks like this, if you care about this make sure you wrap the operations you're benchmarking in functions so as not to benchmark in global scope (might be less relevant in Pluto as cells are local scopes as well from what I understand) and use <code>@btime</code> from <code>BenchmarkTools</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">DataFrames</span><span class=\"p\">,</span> <span class=\"n\">BenchmarkTools</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1_000_000</span><span class=\"p\">));</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">800_000</span><span class=\"p\">));</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">diff1</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">.-</span> <span class=\"p\">[</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">)]]</span>\n<span class=\"n\">diff1</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">diff2</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">.-</span> <span class=\"n\">vcat</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">)]))</span>\n<span class=\"n\">diff2</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">diff1</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">df2</span><span class=\"p\">);</span>\n  <span class=\"mf\">12.853</span> <span class=\"n\">ms</span> <span class=\"p\">(</span><span class=\"mi\">22</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">24.80</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">diff2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">df2</span><span class=\"p\">);</span>\n  <span class=\"mf\">24.141</span> <span class=\"n\">ms</span> <span class=\"p\">(</span><span class=\"mi\">193</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">38.54</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 228411263,
        "sender_full_name": "Nils",
        "timestamp": 1614692752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrame.20subtraction/near/228411263\">said</a>:</p>\n<blockquote>\n<p>Yes, that's what I'm referring to. The cell timings in Pluto aren't really meant to perform microbenchmarks like this, if you care about this make sure you wrap the operations you're benchmarking in functions so as not to benchmark in global scope (might be less relevant in Pluto as cells are local scopes as well from what I understand) and use <code>@btime</code> from <code>BenchmarkTools</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">DataFrames</span><span class=\"p\">,</span> <span class=\"n\">BenchmarkTools</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1_000_000</span><span class=\"p\">));</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">800_000</span><span class=\"p\">));</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">diff1</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">.-</span> <span class=\"p\">[</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">)]]</span>\n<span class=\"n\">diff1</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">diff2</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">.-</span> <span class=\"n\">vcat</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">)]))</span>\n<span class=\"n\">diff2</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">diff1</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">df2</span><span class=\"p\">);</span>\n  <span class=\"mf\">12.853</span> <span class=\"n\">ms</span> <span class=\"p\">(</span><span class=\"mi\">22</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">24.80</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">diff2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">df2</span><span class=\"p\">);</span>\n  <span class=\"mf\">24.141</span> <span class=\"n\">ms</span> <span class=\"p\">(</span><span class=\"mi\">193</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">38.54</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for this <span class=\"user-mention\" data-user-id=\"269318\">@Nils</span>. </p>\n<p>Yes, 'there is no all-encompassing global scope'One must <br>\nassign the global outside the module within each cell <br>\nas needed.</p>\n<p>What then do the cell execution times in Pluto represent?</p>",
        "id": 228413980,
        "sender_full_name": "qu bit",
        "timestamp": 1614693828
    },
    {
        "content": "<p>They represent the runtime of executing that cell, but that includes compilation time, as well as just random noise on your system, so it's not a reliable estimate of runtime of some code</p>",
        "id": 228414387,
        "sender_full_name": "Nils",
        "timestamp": 1614693988
    }
]