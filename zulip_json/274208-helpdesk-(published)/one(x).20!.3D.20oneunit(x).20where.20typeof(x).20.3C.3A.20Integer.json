[
    {
        "content": "<p>Does anyone know of an example when <code>one(x)</code> does not equal <code>oneunit(x)</code> where <code>x &lt;: Integer</code>?</p>",
        "id": 234397009,
        "sender_full_name": "Mark Kittisopikul",
        "timestamp": 1618346508
    },
    {
        "content": "<p>If the compiler supported <code>Wrapper{T} &lt;: T</code>, then unitful integers could be the canonical example</p>",
        "id": 234397356,
        "sender_full_name": "Mason Protter",
        "timestamp": 1618346645
    },
    {
        "content": "<p>But we don't allow it <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 234397402,
        "sender_full_name": "Mason Protter",
        "timestamp": 1618346664
    },
    {
        "content": "<p>I'm trying to sort out the comments in <a href=\"https://github.com/JuliaLang/julia/pull/39808\">https://github.com/JuliaLang/julia/pull/39808</a> , and I'm not sure if there is a concrete scenario where <code>one</code> or <code>oneunit</code> would make a difference.</p>",
        "id": 234397432,
        "sender_full_name": "Mark Kittisopikul",
        "timestamp": 1618346677
    },
    {
        "content": "<p>I guess a custom type <code>T&lt;:Integer</code> could in principle define <code>one(::T)</code> and <code>oneunit(::T)</code> to be different?</p>",
        "id": 234403679,
        "sender_full_name": "Mos√® Giordano",
        "timestamp": 1618348564
    },
    {
        "content": "<p>For example, one could imagine a scenario where a <a href=\"https://github.com/search?q=Dates.jl&amp;type=Repositories\">Dates.jl</a> package treated dates and years and such as subtypes of <code>Integer</code></p>",
        "id": 234405107,
        "sender_full_name": "Mason Protter",
        "timestamp": 1618349328
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"n\">Quantum</span><span class=\"p\">{</span><span class=\"n\">T</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">Integer</span><span class=\"p\">}</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">Integer</span>\n           <span class=\"n\">val</span><span class=\"o\">::</span><span class=\"n\">T</span>\n       <span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">Quantum</span><span class=\"p\">{</span><span class=\"n\">T</span><span class=\"p\">})</span> <span class=\"n\">where</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">one</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">Quantum</span><span class=\"p\">{</span><span class=\"n\">T</span><span class=\"p\">})</span> <span class=\"n\">where</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Quantum</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">Quantum</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">one</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">oneunit</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n<span class=\"n\">Quantum</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 234410594,
        "sender_full_name": "Mark Kittisopikul",
        "timestamp": 1618352157
    }
]