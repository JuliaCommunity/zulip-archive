[
    {
        "content": "<p>Just a quick one.  Is there a quicker (as in fewer characters) way to get the transpose of a matrix, other than just typing <code>transpose(A)</code>?</p>",
        "id": 238549206,
        "sender_full_name": "Ben Gear",
        "timestamp": 1620855841
    },
    {
        "content": "<p>there is <code>A'</code>, which I think is identical</p>",
        "id": 238549334,
        "sender_full_name": "David Weingut",
        "timestamp": 1620855900
    },
    {
        "content": "<p>I thought that was the conjugate transpose?  Similar to Matlab</p>",
        "id": 238549478,
        "sender_full_name": "Ben Gear",
        "timestamp": 1620855964
    },
    {
        "content": "<p><code>'</code> is the conjugate transpose.</p>",
        "id": 238549913,
        "sender_full_name": "Mason Protter",
        "timestamp": 1620856162
    },
    {
        "content": "<p>Yeah, you're right, sorry. Realized that I was using <code>A'</code> like <code>transpose(A)</code>...</p>",
        "id": 238550070,
        "sender_full_name": "David Weingut",
        "timestamp": 1620856251
    },
    {
        "content": "<p>There's a couple options. One would be to write:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"kt\">ᵀ</span> <span class=\"k\">end</span><span class=\"p\">;</span> <span class=\"n\">Base</span><span class=\"o\">.:</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">ᵀ</span><span class=\"p\">})</span> <span class=\"o\">=</span> <span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"mi\">2</span><span class=\"o\">×</span><span class=\"mi\">2</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>  <span class=\"mi\">2</span>\n <span class=\"mi\">3</span>  <span class=\"mi\">4</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"n\">ᵀ</span>\n<span class=\"mi\">2</span><span class=\"o\">×</span><span class=\"mi\">2</span> <span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Int64</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>  <span class=\"mi\">3</span>\n <span class=\"mi\">2</span>  <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 238550085,
        "sender_full_name": "Mason Protter",
        "timestamp": 1620856261
    },
    {
        "content": "<p>Here's another option if you don't like unicode:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"kt\">T</span> <span class=\"k\">end</span><span class=\"p\">;</span> <span class=\"n\">Base</span><span class=\"o\">.:</span><span class=\"p\">(</span><span class=\"o\">^</span><span class=\"p\">)(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})</span> <span class=\"o\">=</span> <span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">A</span><span class=\"o\">^</span><span class=\"n\">T</span>\n<span class=\"mi\">2</span><span class=\"o\">×</span><span class=\"mi\">2</span> <span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Int64</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>  <span class=\"mi\">3</span>\n <span class=\"mi\">2</span>  <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 238550222,
        "sender_full_name": "Mason Protter",
        "timestamp": 1620856334
    },
    {
        "content": "<p>Okay, I see.  what's the <code>\\xxx</code> command for getting the T superscript?</p>",
        "id": 238550276,
        "sender_full_name": "Ben Gear",
        "timestamp": 1620856371
    },
    {
        "content": "<p>It's <code>\\^T&lt;TAB&gt;</code>.  BTW, you can always find these by pasting them into the <code>help&gt;</code> mode repl:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">help</span><span class=\"o\">?&gt;</span> <span class=\"n\">ᵀ</span>\n<span class=\"s\">\"ᵀ\"</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">typed</span> <span class=\"n\">by</span> <span class=\"o\">\\^</span><span class=\"n\">T</span><span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">search</span><span class=\"o\">:</span> <span class=\"n\">ᵀ</span>\n\n  <span class=\"n\">No</span> <span class=\"n\">documentation</span> <span class=\"n\">found</span><span class=\"o\">.</span>\n\n  <span class=\"n\">Summary</span>\n  <span class=\"o\">≡≡≡≡≡≡≡≡≡</span>\n\n  <span class=\"k\">struct</span> <span class=\"kt\">ᵀ</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">Any</span>\n</code></pre></div>",
        "id": 238550356,
        "sender_full_name": "Mason Protter",
        "timestamp": 1620856439
    },
    {
        "content": "<p>Great.  That's really helpful.  Thanks</p>",
        "id": 238550449,
        "sender_full_name": "Ben Gear",
        "timestamp": 1620856482
    },
    {
        "content": "<p>If you're on version 1.6 or later, another option is to locally shadow the <code>'</code> variable in a <code>let</code> block or whatever.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"sa\">var</span><span class=\"s\">\"'\"</span> <span class=\"o\">=</span> <span class=\"n\">transpose</span>\n           <span class=\"n\">A</span><span class=\"o\">'</span>\n       <span class=\"k\">end</span>\n<span class=\"mi\">2</span><span class=\"o\">×</span><span class=\"mi\">2</span> <span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Int64</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>  <span class=\"mi\">3</span>\n <span class=\"mi\">2</span>  <span class=\"mi\">4</span>\n</code></pre></div>\n<p>This can be handy when you have like a function body or something that has a few transposes in it and you want to be explicit about what means what</p>",
        "id": 238550504,
        "sender_full_name": "Mason Protter",
        "timestamp": 1620856526
    },
    {
        "content": "<p>Happy to help!</p>",
        "id": 238550532,
        "sender_full_name": "Mason Protter",
        "timestamp": 1620856547
    }
]