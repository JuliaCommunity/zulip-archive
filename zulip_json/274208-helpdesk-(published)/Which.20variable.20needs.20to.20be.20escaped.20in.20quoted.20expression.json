[
    {
        "content": "<p>I have an generated function like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@generated</span> <span class=\"k\">function</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"n\">E_VALS</span><span class=\"p\">})</span> <span class=\"n\">where</span> <span class=\"n\">E_VALS</span>\n           <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n           <span class=\"k\">for</span> <span class=\"n\">T</span> <span class=\"kp\">in</span> <span class=\"n\">fieldtypes</span><span class=\"p\">(</span><span class=\"n\">E_VALS</span><span class=\"p\">)</span>\n              <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"o\">$</span><span class=\"n\">T</span><span class=\"p\">}}(</span><span class=\"n\">n</span><span class=\"p\">)))</span>\n           <span class=\"k\">end</span>\n           <span class=\"k\">return</span> <span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">call</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">tuple</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span>\n       <span class=\"k\">end</span>\n</code></pre></div>\n<p>For some reason this function will not work if I do not escape <code>T</code> nor if I escape <code>n</code>. Is there any difference in them? Putting <code>println</code> statements in there shows me that <code>n</code> is actually a <code>DataType</code> which is a bit weird. I called the method with <code>f2(10, Tuple{Int, Char})</code></p>",
        "id": 226717842,
        "sender_full_name": "Simon Schoelly",
        "timestamp": 1613592602
    },
    {
        "content": "<p>Are you missing a colon after n?</p>",
        "id": 226722209,
        "sender_full_name": "Felix Kastner",
        "timestamp": 1613594553
    },
    {
        "content": "<p>You shouldn't have to escape anything in a generated function.</p>",
        "id": 226724129,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613595407
    },
    {
        "content": "<p>What is the code <code>Vector{Vector{T}}(n)</code> meant to do? That's undefined.</p>",
        "id": 226724648,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613595610
    },
    {
        "content": "<blockquote>\n<p>Putting <code>println</code> statements in there shows me that <code>n</code> is actually a <code>DataType</code> which is a bit weird</p>\n</blockquote>\n<p>All function arguments are types inside a generated function body.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@generated</span> <span class=\"k\">function</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n           <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Inside the generated function body, x = </span><span class=\"si\">$x</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n           <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"at runtime, x = </span><span class=\"si\">$x</span><span class=\"s\">\"</span><span class=\"p\">))</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Inside</span> <span class=\"n\">the</span> <span class=\"n\">generated</span> <span class=\"k\">function</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kt\">Int64</span>\n<span class=\"n\">at</span> <span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">at</span> <span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">at</span> <span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 226725121,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613595793
    },
    {
        "content": "<p>Apparently I made at least two mistakes when I copied this function here, the function actually is:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@generated</span> <span class=\"k\">function</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"n\">E_VALS</span><span class=\"p\">})</span> <span class=\"n\">where</span> <span class=\"n\">E_VALS</span>\n                              <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                              <span class=\"k\">for</span> <span class=\"n\">T</span> <span class=\"kp\">in</span> <span class=\"n\">fieldtypes</span><span class=\"p\">(</span><span class=\"n\">E_VALS</span><span class=\"p\">)</span>\n                                 <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"o\">$</span><span class=\"n\">T</span><span class=\"p\">}}(</span><span class=\"n\">undef</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)))</span>\n                              <span class=\"k\">end</span>\n                              <span class=\"k\">return</span> <span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">call</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">tuple</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span>\n                        <span class=\"k\">end</span>\n</code></pre></div>\n<p>so if I remove the dollar sign from <code>T</code> and try to run it, I get an error message</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">})</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">UndefVarError</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">not</span> <span class=\"n\">defined</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n   <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">45</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"c\">#unused#::Type{Tuple{Int64, String}})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">45</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">46</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 226732058,
        "sender_full_name": "Simon Schoelly",
        "timestamp": 1613598944
    },
    {
        "content": "<p>Ah, I see yes. You need to interpolate (different from escape) <code>T</code> because it’s defined inside the generator.</p>",
        "id": 226733441,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613599380
    },
    {
        "content": "<p>Only the function arguments can stay as symbols in the returned expression.</p>",
        "id": 226733563,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613599413
    }
]