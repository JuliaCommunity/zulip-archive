[
    {
        "content": "<p>In some code that I'm writing, I have to calculate a distance matrix comparing 60k images. This results in a 60k by 60k matrix, which is too large to store in memory. I was wondering what would be an appropriate way to handle this types of situations. Is there a datatype which I should save the data to? Also, this matrix will be passed on to another function, which will perform dimensionality reduction... Any ideas on how to make this work?</p>",
        "id": 240128047,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1621900657
    },
    {
        "content": "<p>Could you instead of a matrix use a lazy approach, e.g., just use a function of the indices? Otherwise, in your distance matrix, which is important to you?  the large distances or the sort ones? If you are looking for similar images, maybe you are more interested in the inverse of the distance, and then you could discard all the values below a certain threshold and store only the large inverse distances as a sparse matrix?</p>",
        "id": 240131218,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1621903715
    },
    {
        "content": "<p>Can you use a dataframe?</p>",
        "id": 241081721,
        "sender_full_name": "brett knoss",
        "timestamp": 1622585115
    },
    {
        "content": "<p>You may want to look into a spatially chunked array format that transparently spills to disk. <a href=\"https://github.com/JuliaIO/HDF5.jl\">https://github.com/JuliaIO/HDF5.jl</a> and <a href=\"https://github.com/meggart/Zarr.jl\">https://github.com/meggart/Zarr.jl</a> would be good candidates, perhaps <a href=\"https://github.com/JuliaGeo/NetCDF.jl\">https://github.com/JuliaGeo/NetCDF.jl</a> as well.</p>",
        "id": 241081964,
        "sender_full_name": "Brian Chen",
        "timestamp": 1622585280
    },
    {
        "content": "<p>There's also <a href=\"https://docs.julialang.org/en/v1/stdlib/Mmap/#Mmap.mmap\">https://docs.julialang.org/en/v1/stdlib/Mmap/#Mmap.mmap</a> and <a href=\"https://docs.julialang.org/en/v1/stdlib/SharedArrays/\">https://docs.julialang.org/en/v1/stdlib/SharedArrays/</a>. Might be worth trying one of these first.</p>",
        "id": 241082605,
        "sender_full_name": "Brian Chen",
        "timestamp": 1622585743
    },
    {
        "content": "<p>A DataFrame surely wouldn’t help, they’re all in memory right?</p>",
        "id": 241082929,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622586003
    },
    {
        "content": "<p>Here's something you can do, which is essentially what <span class=\"user-mention\" data-user-id=\"269255\">@Benoit Pasquier</span> suggests I think:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">LinearMaps</span><span class=\"p\">,</span> <span class=\"n\">Arpack</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">10_000</span>\n           <span class=\"n\">i1</span> <span class=\"o\">=</span> <span class=\"n\">sin</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"nb\">π</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">))</span>\n           <span class=\"n\">i2</span> <span class=\"o\">=</span> <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"nb\">π</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">))</span>\n           <span class=\"k\">function</span> <span class=\"n\">lazy_distance_kernel</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"nd\">@assert</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,)</span>\n               <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"n\">i</span>\n                   <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">i2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">)</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n           <span class=\"k\">function</span> <span class=\"n\">lazy_distance_kernel_tr</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"nd\">@assert</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,)</span>\n               <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"n\">i</span>\n                  <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">i2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">)</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">LinearMap</span><span class=\"p\">(</span><span class=\"n\">lazy_distance_kernel</span><span class=\"p\">,</span> <span class=\"n\">lazy_distance_kernel_tr</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n           <span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">svds</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"n\">nsv</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n           <span class=\"n\">S</span>\n       <span class=\"k\">end</span>\n  <span class=\"mf\">7.158159</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">2.43</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">150.013</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">0.58</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"mf\">17.93</span><span class=\"o\">%</span> <span class=\"n\">compilation</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n    <span class=\"mf\">1.510995769332172e6</span>\n <span class=\"mf\">5843.092821965402</span>\n    <span class=\"mf\">0.0</span>\n    <span class=\"mf\">0.0</span>\n</code></pre></div>\n<p>So here, I defined a lazy version of a distance matrix using <a href=\"https://github.com/search?q=LinearMaps.jl&amp;type=Repositories\">LinearMaps.jl</a>, and then just stuck it in <code>Arpack.svds</code> and got the singular value decomposition of the matrix truncated to 4 singular values.</p>",
        "id": 241087350,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622589163
    },
    {
        "content": "<p>This is able to act without ever actually instantiating the big matrix, so it's at least memory efficient.</p>",
        "id": 241087377,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622589198
    },
    {
        "content": "<p>And of course, if we want to get better performance, we should do things in-place and make use of <a href=\"https://github.com/search?q=LoopVectorization.jl&amp;type=Repositories\">LoopVectorization.jl</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">10_000</span>\n           <span class=\"n\">i1</span> <span class=\"o\">=</span> <span class=\"n\">sin</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"nb\">π</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">))</span>\n           <span class=\"n\">i2</span> <span class=\"o\">=</span> <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"nb\">π</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">))</span>\n           <span class=\"k\">function</span> <span class=\"n\">lazy_distance_kernel</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"nd\">@assert</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,)</span>\n               <span class=\"nd\">@tturbo</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span>\n                   <span class=\"n\">ui</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n                   <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span>\n                       <span class=\"n\">ui</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">i2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n                   <span class=\"k\">end</span>\n                   <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ui</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n           <span class=\"k\">function</span> <span class=\"n\">lazy_distance_kernel_tr</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"nd\">@assert</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,)</span>\n               <span class=\"nd\">@tturbo</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span>\n                   <span class=\"n\">ui</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n                   <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span>\n                       <span class=\"n\">ui</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">i2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n                   <span class=\"k\">end</span>\n                   <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ui</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">LinearMap</span><span class=\"p\">(</span><span class=\"n\">lazy_distance_kernel</span><span class=\"p\">,</span> <span class=\"n\">lazy_distance_kernel_tr</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">ismutating</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n           <span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">svds</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"n\">nsv</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n           <span class=\"n\">S</span>\n       <span class=\"k\">end</span>\n  <span class=\"mf\">1.146122</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">2.07</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">122.852</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">3.97</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"mf\">82.02</span><span class=\"o\">%</span> <span class=\"n\">compilation</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n    <span class=\"mf\">1.5109957693321719e6</span>\n <span class=\"mf\">5843.092821965383</span>\n    <span class=\"mf\">0.0</span>\n    <span class=\"mf\">0.0</span>\n</code></pre></div>",
        "id": 241088180,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622589865
    },
    {
        "content": "<p>Here it is on the actual problem size of 60k x 60k:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">60_000</span>\n           <span class=\"n\">i1</span> <span class=\"o\">=</span> <span class=\"n\">sin</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"nb\">π</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">))</span>\n           <span class=\"n\">i2</span> <span class=\"o\">=</span> <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"nb\">π</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">))</span>\n           <span class=\"k\">function</span> <span class=\"n\">lazy_distance_kernel</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"nd\">@assert</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,)</span>\n               <span class=\"nd\">@tturbo</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span>\n                   <span class=\"n\">ui</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n                   <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span>\n                       <span class=\"n\">ui</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">i2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n                   <span class=\"k\">end</span>\n                   <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ui</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n           <span class=\"k\">function</span> <span class=\"n\">lazy_distance_kernel_tr</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"nd\">@assert</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,)</span>\n               <span class=\"nd\">@tturbo</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span>\n                   <span class=\"n\">ui</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n                   <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span>\n                       <span class=\"n\">ui</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">i1</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">i2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n                   <span class=\"k\">end</span>\n                   <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ui</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">LinearMap</span><span class=\"p\">(</span><span class=\"n\">lazy_distance_kernel</span><span class=\"p\">,</span> <span class=\"n\">lazy_distance_kernel_tr</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">ismutating</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n           <span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">svds</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"n\">nsv</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n           <span class=\"n\">S</span>\n       <span class=\"k\">end</span>\n  <span class=\"mf\">6.174817</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">2.07</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">140.818</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">0.69</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"mf\">15.12</span><span class=\"o\">%</span> <span class=\"n\">compilation</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n     <span class=\"mf\">9.063979155608427e6</span>\n <span class=\"mf\">35059.355544173464</span>\n     <span class=\"mf\">0.0</span>\n     <span class=\"mf\">0.0</span>\n</code></pre></div>",
        "id": 241088199,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622589889
    },
    {
        "content": "<p>Note that 15% of that is compilation overhead (your first run may be worse)</p>",
        "id": 241088243,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622589932
    },
    {
        "content": "<p>Most importantly though, the memory used here never gets anywhere near being problematically large. Does that help at all <span class=\"user-mention\" data-user-id=\"358317\">@Davi Sales Barreira</span>?</p>",
        "id": 241088362,
        "sender_full_name": "Mason Protter",
        "timestamp": 1622590048
    },
    {
        "content": "<p>Awesome, thank!</p>",
        "id": 241088645,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1622590282
    }
]