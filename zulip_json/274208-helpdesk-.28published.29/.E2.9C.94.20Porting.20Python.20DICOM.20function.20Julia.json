[
    {
        "content": "<p>Is anyone here proficient with medical image processing that could help me debug what might be going on with this DICOM loading function that I am porting from Python to Julia? I am seeing strange behavior where the 3D DICOM images are loading in Julia in almost the exact same way, but the slices seem to be off by some factor. I am not sure where to go from here</p>\n<p>Python function:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">os.path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pydicom</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">dcm_reader</span><span class=\"p\">(</span><span class=\"n\">dcm_path</span><span class=\"p\">):</span>\n    <span class=\"n\">dcm_files</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">dirpathpythonames</span><span class=\"p\">,</span> <span class=\"n\">filenames</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">dcm_path</span><span class=\"p\">,</span><span class=\"n\">topdown</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"n\">filenames</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">filename</span> <span class=\"o\">==</span> <span class=\"s1\">'DIRFILE'</span><span class=\"p\">:</span>\n                    <span class=\"n\">dcm_file</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dirpath</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">))</span>\n                    <span class=\"n\">pydicom</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"n\">dcm_file</span><span class=\"p\">,</span> <span class=\"n\">stop_before_pixels</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"n\">dcm_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">dcm_file</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n    <span class=\"n\">read_RefDs</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">while</span> <span class=\"n\">read_RefDs</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dcm_files</span><span class=\"p\">)):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">RefDs</span> <span class=\"o\">=</span> <span class=\"n\">pydicom</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"n\">dcm_files</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">],</span> <span class=\"n\">stop_before_pixels</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">read_RefDs</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n    <span class=\"n\">slice_thick_ori</span> <span class=\"o\">=</span> <span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">SliceThickness</span>\n\n    <span class=\"n\">ConstPixelDims</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">Rows</span><span class=\"p\">),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">Columns</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dcm_files</span><span class=\"p\">))</span>\n    <span class=\"n\">dcm_array</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">ConstPixelDims</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">ConstPixelDims</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dcm_files</span><span class=\"p\">)],</span>\\\n                          <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">pixel_array</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n\n    <span class=\"n\">instances</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">filenameDCM</span> <span class=\"ow\">in</span> <span class=\"n\">dcm_files</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">pydicom</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"n\">filenameDCM</span><span class=\"p\">,</span> <span class=\"n\">stop_before_pixels</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">instances</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">InstanceNumber</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"n\">instances</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">filenameDCM</span> <span class=\"ow\">in</span> <span class=\"n\">dcm_files</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">pydicom</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"n\">filenameDCM</span><span class=\"p\">)</span>\n            <span class=\"n\">dcm_array</span><span class=\"p\">[:,:,</span><span class=\"n\">instances</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">InstanceNumber</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">pixel_array</span>\n            <span class=\"k\">if</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">InstanceNumber</span> <span class=\"ow\">in</span> <span class=\"n\">instances</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">InstanceNumber</span> <span class=\"o\">==</span> <span class=\"n\">instances</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                    <span class=\"n\">loc_1</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">SliceLocation</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">loc_2</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">SliceLocation</span>\n            <span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">SliceThickness</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">loc_1</span> <span class=\"o\">-</span> <span class=\"n\">loc_2</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n\n    <span class=\"n\">dcm_array</span> <span class=\"o\">=</span> <span class=\"n\">dcm_array</span> <span class=\"o\">*</span> <span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">RescaleSlope</span> <span class=\"o\">+</span> <span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">RescaleIntercept</span>\n    <span class=\"k\">return</span> <span class=\"n\">RefDs</span><span class=\"p\">,</span> <span class=\"n\">dcm_array</span><span class=\"p\">,</span> <span class=\"n\">slice_thick_ori</span>\n</code></pre></div>\n<p>Julia function:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">DICOM</span>\n\n<span class=\"k\">function</span> <span class=\"n\">dcm_reader</span><span class=\"p\">(</span><span class=\"n\">dcm_path</span><span class=\"p\">)</span>\n    <span class=\"n\">dcm_files</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">dirpath</span><span class=\"p\">,</span> <span class=\"n\">dirnames</span><span class=\"p\">,</span> <span class=\"n\">filenames</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">walkdir</span><span class=\"p\">(</span><span class=\"n\">dcm_path</span><span class=\"p\">,</span> <span class=\"n\">topdown</span><span class=\"o\">=</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"k\">in</span> <span class=\"n\">filenames</span>\n            <span class=\"k\">try</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">filename</span> <span class=\"o\">==</span> <span class=\"s\">\"DIRFILE\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">false</span>\n                    <span class=\"n\">dcm_file</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">dirpath</span><span class=\"p\">,</span> <span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n                    <span class=\"n\">dcm_parse</span><span class=\"p\">(</span><span class=\"n\">dcm_file</span><span class=\"p\">)</span>\n                    <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">dcm_files</span><span class=\"p\">,</span> <span class=\"n\">dcm_file</span><span class=\"p\">)</span>\n                <span class=\"k\">end</span>\n            <span class=\"k\">catch</span>\n                <span class=\"nb\">nothing</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">read_RefDs</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"k\">local</span> <span class=\"n\">RefDs</span>\n    <span class=\"k\">while</span> <span class=\"n\">read_RefDs</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">dcm_files</span><span class=\"p\">))</span>\n            <span class=\"k\">try</span>\n                <span class=\"n\">RefDs</span> <span class=\"o\">=</span> <span class=\"n\">dcm_parse</span><span class=\"p\">(</span><span class=\"n\">dcm_files</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n                <span class=\"n\">read_RefDs</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">catch</span>\n                <span class=\"nb\">nothing</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">meta</span>\n    <span class=\"n\">slice_thick_ori</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"p\">[(</span><span class=\"mh\">0x0018</span><span class=\"p\">,</span> <span class=\"mh\">0x0050</span><span class=\"p\">)]</span>\n    <span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">[(</span><span class=\"mh\">0x0028</span><span class=\"p\">,</span> <span class=\"mh\">0x0010</span><span class=\"p\">)]),</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">[(</span><span class=\"mh\">0x0028</span><span class=\"p\">,</span> <span class=\"mh\">0x0011</span><span class=\"p\">)])</span>\n\n    <span class=\"n\">ConstPixelDims</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">dcm_files</span><span class=\"p\">))</span>\n    <span class=\"n\">dcm_array</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">ConstPixelDims</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n    <span class=\"n\">instances</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">filenameDCM</span> <span class=\"k\">in</span> <span class=\"n\">dcm_files</span>\n        <span class=\"k\">try</span>\n            <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">dcm_parse</span><span class=\"p\">(</span><span class=\"n\">filenameDCM</span><span class=\"p\">)</span>\n            <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">meta</span>\n            <span class=\"n\">InstanceNumber</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[(</span><span class=\"mh\">0x0020</span><span class=\"p\">,</span> <span class=\"mh\">0x0013</span><span class=\"p\">)]</span>\n            <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">instances</span><span class=\"p\">,</span> <span class=\"n\">InstanceNumber</span><span class=\"p\">)</span>\n        <span class=\"k\">catch</span>\n            <span class=\"nb\">nothing</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">instances</span><span class=\"p\">)</span>\n\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">filenameDCM</span> <span class=\"k\">in</span> <span class=\"n\">dcm_files</span>\n        <span class=\"k\">try</span>\n            <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">dcm_parse</span><span class=\"p\">(</span><span class=\"n\">filenameDCM</span><span class=\"p\">)</span>\n            <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">meta</span>\n            <span class=\"n\">InstanceNumber</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[(</span><span class=\"mh\">0x0020</span><span class=\"p\">,</span> <span class=\"mh\">0x0013</span><span class=\"p\">)]</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">==</span><span class=\"n\">InstanceNumber</span><span class=\"p\">,</span> <span class=\"n\">instances</span><span class=\"p\">)</span>\n            <span class=\"n\">pixel_array</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[(</span><span class=\"mh\">0x7fe0</span><span class=\"p\">,</span> <span class=\"mh\">0x0010</span><span class=\"p\">)]</span>\n            <span class=\"n\">dcm_array</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pixel_array</span>\n            <span class=\"k\">if</span> <span class=\"n\">InstanceNumber</span> <span class=\"k\">in</span> <span class=\"n\">instances</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">InstanceNumber</span> <span class=\"o\">==</span> <span class=\"n\">instances</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"n\">SliceLocation</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[(</span><span class=\"mh\">0x0020</span><span class=\"p\">,</span> <span class=\"mh\">0x1041</span><span class=\"p\">)]</span>\n                    <span class=\"n\">loc_1</span> <span class=\"o\">=</span> <span class=\"n\">SliceLocation</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">SliceLocation</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[(</span><span class=\"mh\">0x0020</span><span class=\"p\">,</span> <span class=\"mh\">0x1041</span><span class=\"p\">)]</span>\n                    <span class=\"n\">loc_2</span> <span class=\"o\">=</span> <span class=\"n\">SliceLocation</span>\n                <span class=\"k\">end</span>\n            <span class=\"k\">end</span>\n            <span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">catch</span>\n            <span class=\"nb\">nothing</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">try</span>\n        <span class=\"n\">SliceThickness</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">[(</span><span class=\"mh\">0x0018</span><span class=\"p\">,</span> <span class=\"mh\">0x0050</span><span class=\"p\">)]</span>\n        <span class=\"n\">SliceThickness</span> <span class=\"o\">=</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">loc_1</span> <span class=\"o\">-</span> <span class=\"n\">loc_2</span><span class=\"p\">)</span>\n    <span class=\"k\">catch</span>\n        <span class=\"nb\">nothing</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">RescaleSlope</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"p\">[(</span><span class=\"mh\">0x0028</span><span class=\"p\">,</span> <span class=\"mh\">0x1053</span><span class=\"p\">)]</span>\n    <span class=\"n\">RescaleIntercept</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"p\">[(</span><span class=\"mh\">0x0028</span><span class=\"p\">,</span> <span class=\"mh\">0x1052</span><span class=\"p\">)]</span>\n    <span class=\"n\">dcm_array</span> <span class=\"o\">=</span> <span class=\"n\">dcm_array</span> <span class=\"o\">.*</span> <span class=\"n\">RescaleSlope</span> <span class=\"o\">.+</span> <span class=\"n\">RescaleIntercept</span>\n    <span class=\"k\">return</span> <span class=\"n\">RefDs</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"p\">,</span> <span class=\"n\">dcm_array</span><span class=\"p\">,</span> <span class=\"n\">slice_thick_ori</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 269203727,
        "sender_full_name": "Dale Black",
        "timestamp": 1643080059
    },
    {
        "content": "<p>This produces nearly identical 3D arrays with a slight difference in the slice number it seems like?</p>\n<p>Python:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">dcm_array</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n<span class=\"c1\"># returns : 1275.0</span>\n\n<span class=\"n\">dcm_array</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n<span class=\"c1\"># returns: -2048.0</span>\n</code></pre></div>\n<p>Julia:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">maximum</span><span class=\"p\">(</span><span class=\"n\">dcm_array</span><span class=\"p\">)</span>\n<span class=\"c\"># returns: 1275.0</span>\n\n<span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">dcm_array</span><span class=\"p\">)</span>\n<span class=\"c\"># returns: -2048.0</span>\n</code></pre></div>",
        "id": 269203889,
        "sender_full_name": "Dale Black",
        "timestamp": 1643080179
    },
    {
        "content": "<p>These slices correspond to one another when comparing the Python array vs the Julia array (so it seems like it's off by a factor of 3):<br>\n<a href=\"/user_uploads/7178/UG4UgUfgBpHl3WtFJHLDgrYs/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/7178/knppp5CNW1JOC7_05xvaoqkd/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/UG4UgUfgBpHl3WtFJHLDgrYs/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/UG4UgUfgBpHl3WtFJHLDgrYs/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/7178/knppp5CNW1JOC7_05xvaoqkd/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/knppp5CNW1JOC7_05xvaoqkd/image.png\"></a></div><p>But, within the same arrays, these two slices also correspond to one another (so now it seems like it's off by a factor of 5):<br>\n<a href=\"/user_uploads/7178/2iIaA_L9ArHaiXla65nJkclJ/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/7178/e_z1hOAJH3rcCXMC44VyK5Dn/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/2iIaA_L9ArHaiXla65nJkclJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/2iIaA_L9ArHaiXla65nJkclJ/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/7178/e_z1hOAJH3rcCXMC44VyK5Dn/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/e_z1hOAJH3rcCXMC44VyK5Dn/image.png\"></a></div>",
        "id": 269204159,
        "sender_full_name": "Dale Black",
        "timestamp": 1643080407
    },
    {
        "content": "<p>Maybe take a look at <a href=\"https://github.com/JuliaNeuroscience/NIfTI.jl/blob/master/examples/dicom2nifti.jl\">https://github.com/JuliaNeuroscience/NIfTI.jl/blob/master/examples/dicom2nifti.jl</a></p>",
        "id": 269207515,
        "sender_full_name": "Zachary P Christensen",
        "timestamp": 1643083592
    },
    {
        "content": "<p>I have gone through that before and used it for many of my other projects, so thanks for putting that out there btw! For this specifically, I need the DICOMs to load in a way that is identical to the way the python function loads it because there are a ton of downstream functions that expect this. I am more confused about why this simple port of the python function is producing such surprising results? Do you know if <code>dcm_parse</code> from <a href=\"https://github.com/search?q=DICOM.jl&amp;type=Repositories\">DICOM.jl</a> loads the pixels differently than pydicom does?</p>",
        "id": 269209613,
        "sender_full_name": "Dale Black",
        "timestamp": 1643086303
    },
    {
        "content": "<p>I can't think of what else would be responsible for this shift, other than some underlying difference in <a href=\"https://github.com/search?q=DICOM.jl&amp;type=Repositories\">DICOM.jl</a> vs pydicom, because the rest of the function seems so straightforward.</p>",
        "id": 269209675,
        "sender_full_name": "Dale Black",
        "timestamp": 1643086384
    },
    {
        "content": "<p>Is there any possibility that walking the directory is different?</p>",
        "id": 269210304,
        "sender_full_name": "Zachary P Christensen",
        "timestamp": 1643087172
    },
    {
        "content": "<p>I can check, but I don't think that was the problem because the files that are output in a downstream function make sense. It might have something to with how I am using <code>InstanceNumber</code> in the Julia code to order the slices compared to the Python code. I will investigate those two possibilities today</p>",
        "id": 269275712,
        "sender_full_name": "Dale Black",
        "timestamp": 1643125591
    },
    {
        "content": "<p>I'm pretty terrible at converting Python code so it's hard for me to diagnose some of this. although that does seem like the most likely place for things getting mixed up.</p>",
        "id": 269277992,
        "sender_full_name": "Zachary P Christensen",
        "timestamp": 1643126422
    },
    {
        "content": "<p>Wow it was actually super simple.. In one of the lines I had <code>sort(instances)</code> when I needed <code>sort!(instances)</code></p>",
        "id": 269318394,
        "sender_full_name": "Dale Black",
        "timestamp": 1643142198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352971\">Dale Black</span> has marked this topic as resolved.</p>",
        "id": 269329400,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643147106
    }
]