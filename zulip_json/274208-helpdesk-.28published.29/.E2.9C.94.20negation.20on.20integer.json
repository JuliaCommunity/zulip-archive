[
    {
        "content": "<p>I may miss the obvious, but why is there no method assigned to the negation operator?</p>\n<p>I want to do the following: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"number must be non-negative\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 393559993,
        "sender_full_name": "ShalokShalom",
        "timestamp": 1695843976
    },
    {
        "content": "<p>not sure what exactly you're asking. There certainly are methods assigned to it:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">)</span>\n<span class=\"c\"># 4 methods for generic function \"!\" from Base:</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">ComposedFunction</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">)})</span>\n<span class=\"w\">     </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1089</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1088</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">35</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Missing</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"nb\">missing</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">101</span>\n</code></pre></div>\n<p>Your example just needs parentheses</p>",
        "id": 393560802,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1695844308
    },
    {
        "content": "<p>Well, not to an integer. I already tried to put parens around it, but that didnt help.  I tried now once again, and obviously, it works :P <br>\nI may have had the old state saved in the REPL, now it works. :D</p>",
        "id": 393561368,
        "sender_full_name": "ShalokShalom",
        "timestamp": 1695844535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"643895\">ShalokShalom</span> has marked this topic as resolved.</p>",
        "id": 393561501,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695844568
    },
    {
        "content": "<p>I do sometimes feel that python's <code>not x</code>is more legible sometimes than our <code>!x</code>. I guess I could always just do</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:call</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 393573289,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695850167
    },
    {
        "content": "<p>I tend to think unary operators are just not worth it</p>",
        "id": 393575660,
        "sender_full_name": "jar",
        "timestamp": 1695851405
    },
    {
        "content": "<p>I'm very very thankful we have <code>'</code> for adjoint.</p>",
        "id": 393575805,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695851518
    },
    {
        "content": "<p>I kinda wish we had more postfix unary operators</p>",
        "id": 393575884,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695851549
    },
    {
        "content": "<p>Yeah I just meant the prefix ones. I even have some postfixes in mind.</p>",
        "id": 393576057,
        "sender_full_name": "jar",
        "timestamp": 1695851654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.E2.9C.94.20negation.20on.20integer/near/393573289\">said</a>:</p>\n<blockquote>\n<p>I do sometimes feel that python's <code>not x</code>is more legible sometimes than our <code>!x</code>. I guess I could always just do</p>\n</blockquote>\n<p>Someone at <a href=\"http://jolin.io\">jolin.io</a> seems to have had similar thoughts: <a href=\"https://github.com/jolin-io/NotMacro.jl/blob/main/src/NotMacro.jl\">https://github.com/jolin-io/NotMacro.jl/blob/main/src/NotMacro.jl</a></p>",
        "id": 393625200,
        "sender_full_name": "Sundar R",
        "timestamp": 1695881422
    },
    {
        "content": "<p>Yes, this is why I opened <a href=\"https://github.com/JuliaLang/julia/issues/51485\">https://github.com/JuliaLang/julia/issues/51485</a></p>\n<p>You might help with emojicons and arguments :D</p>",
        "id": 393627710,
        "sender_full_name": "ShalokShalom",
        "timestamp": 1695882519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.E2.9C.94.20negation.20on.20integer/near/393573289\">said</a>:</p>\n<blockquote>\n<p>I do sometimes feel that python's <code>not x</code>is more legible sometimes than our <code>!x</code>. </p>\n</blockquote>\n<p>Names are always understood by anyone. Show me anyone, who doesn't know what <code>not</code> means. On the other hand, no one, who hasn't programmed yet already known that ! is supposed to has the meaning of <code>no</code></p>\n<p>So, particularly to introduce new people to programming, this seems to show, that Julia is currently not trying its best to onboard them.</p>",
        "id": 393628390,
        "sender_full_name": "ShalokShalom",
        "timestamp": 1695882834
    },
    {
        "content": "<p>Jar's point isn't really about <code>not</code> vs <code>!</code>. It's more just that <code>not x</code> isn't much of a win vs <code>not(x)</code>.</p>",
        "id": 393670055,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695895555
    },
    {
        "content": "<p>Whining that any syntax you don't like is julia \"not trying its best to onboard them\" is not really productive or helpful</p>",
        "id": 393670180,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695895604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423970\">Sundar R</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.E2.9C.94.20negation.20on.20integer/near/393625200\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.E2.9C.94.20negation.20on.20integer/near/393573289\">said</a>:</p>\n<blockquote>\n<p>I do sometimes feel that python's <code>not x</code>is more legible sometimes than our <code>!x</code>. I guess I could always just do</p>\n</blockquote>\n<p>Someone at <a href=\"http://jolin.io\">jolin.io</a> seems to have had similar thoughts: <a href=\"https://github.com/jolin-io/NotMacro.jl/blob/main/src/NotMacro.jl\">https://github.com/jolin-io/NotMacro.jl/blob/main/src/NotMacro.jl</a></p>\n</blockquote>\n<p><code># macroexpand solves `@not @not true &amp;&amp; false` case</code></p>\n<p>I'm not even sure what I'd want that to mean. That's a case where <code>!</code> seems much clearer</p>",
        "id": 393672002,
        "sender_full_name": "Sascha Mann",
        "timestamp": 1695896314
    },
    {
        "content": "<p>yeah, that seems totally unnecessary and not such a good idea</p>",
        "id": 393672839,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695896654
    },
    {
        "content": "<p>They likely thought there was a performance advantage to it because the <code>code_llvm</code> for <code>@not @not x &amp;&amp; y</code> looks shorter than the <code>code_llvm</code> for <code>!(!(x &amp;&amp; y))</code>, but at least on x86, they still compile to identical <code>code_native</code>.</p>",
        "id": 393674057,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695897098
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">NotMacro</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">code_native</span><span class=\"p\">(</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">           </span><span class=\"nd\">@not</span><span class=\"w\"> </span><span class=\"nd\">@not</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"go\">        .text</span>\n<span class=\"go\">        .file   \"#1\"</span>\n<span class=\"go\">        .globl  \"julia_#1_750\"                  # -- Begin function julia_#1_750</span>\n<span class=\"go\">        .p2align        4, 0x90</span>\n<span class=\"go\">        .type   \"julia_#1_750\",@function</span>\n<span class=\"go\">\"julia_#1_750\":                         # @\"julia_#1_750\"</span>\n<span class=\"go\">; ┌ @ REPL[13]:5 within `#1`</span>\n<span class=\"go\">        .cfi_startproc</span>\n<span class=\"go\"># %bb.0:                                # %top</span>\n<span class=\"go\">        pushq   %rbp</span>\n<span class=\"go\">        .cfi_def_cfa_offset 16</span>\n<span class=\"go\">        .cfi_offset %rbp, -16</span>\n<span class=\"go\">        movq    %rsp, %rbp</span>\n<span class=\"go\">        .cfi_def_cfa_register %rbp</span>\n<span class=\"go\">        movl    %edi, %eax</span>\n<span class=\"go\">; │┌ @ bool.jl:35 within `!`</span>\n<span class=\"go\">        andb    $1, %al</span>\n<span class=\"go\">        negb    %al</span>\n<span class=\"go\">        andb    %sil, %al</span>\n<span class=\"go\">; │└</span>\n<span class=\"go\">                                        # kill: def $al killed $al killed $eax</span>\n<span class=\"go\">        popq    %rbp</span>\n<span class=\"go\">        .cfi_def_cfa %rsp, 8</span>\n<span class=\"go\">        retq</span>\n<span class=\"go\">.Lfunc_end0:</span>\n<span class=\"go\">        .size   \"julia_#1_750\", .Lfunc_end0-\"julia_#1_750\"</span>\n<span class=\"go\">        .cfi_endproc</span>\n<span class=\"go\">; └</span>\n<span class=\"go\">                                        # -- End function</span>\n<span class=\"go\">        .section        \".note.GNU-stack\",\"\",@progbits</span>\n</code></pre></div>",
        "id": 393679418,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695898358
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">code_native</span><span class=\"p\">(</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">           </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"go\">        .text</span>\n<span class=\"go\">        .file   \"#1\"</span>\n<span class=\"go\">        .globl  \"julia_#1_752\"                  # -- Begin function julia_#1_752</span>\n<span class=\"go\">        .p2align        4, 0x90</span>\n<span class=\"go\">        .type   \"julia_#1_752\",@function</span>\n<span class=\"go\">\"julia_#1_752\":                         # @\"julia_#1_752\"</span>\n<span class=\"go\">; ┌ @ REPL[14]:4 within `#1`</span>\n<span class=\"go\">        .cfi_startproc</span>\n<span class=\"go\"># %bb.0:                                # %top</span>\n<span class=\"go\">        pushq   %rbp</span>\n<span class=\"go\">        .cfi_def_cfa_offset 16</span>\n<span class=\"go\">        .cfi_offset %rbp, -16</span>\n<span class=\"go\">        movq    %rsp, %rbp</span>\n<span class=\"go\">        .cfi_def_cfa_register %rbp</span>\n<span class=\"go\">        movl    %edi, %eax</span>\n<span class=\"go\">; │┌ @ bool.jl:35 within `!`</span>\n<span class=\"go\">        andl    %esi, %eax</span>\n<span class=\"go\">; │└</span>\n<span class=\"go\">        andb    $1, %al</span>\n<span class=\"go\">                                        # kill: def $al killed $al killed $eax</span>\n<span class=\"go\">        popq    %rbp</span>\n<span class=\"go\">        .cfi_def_cfa %rsp, 8</span>\n<span class=\"go\">        retq</span>\n<span class=\"go\">.Lfunc_end0:</span>\n<span class=\"go\">        .size   \"julia_#1_752\", .Lfunc_end0-\"julia_#1_752\"</span>\n<span class=\"go\">        .cfi_endproc</span>\n<span class=\"go\">; └</span>\n<span class=\"go\">                                        # -- End function</span>\n<span class=\"go\">        .section        \".note.GNU-stack\",\"\",@progbits</span>\n<span class=\"go\">nothing</span>\n<span class=\"go\">Main.B</span>\n</code></pre></div>",
        "id": 393679465,
        "sender_full_name": "Mason Protter",
        "timestamp": 1695898381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.E2.9C.94.20negation.20on.20integer/near/393670180\">said</a>:</p>\n<blockquote>\n<p>Whining that any syntax you don't like is julia \"not trying its best to onboard them\" is not really productive or helpful</p>\n</blockquote>\n<p>I did indeed mean <code>not</code> vs <code>!</code> and I gave reasoning, why I think one is more approachable.</p>",
        "id": 393690589,
        "sender_full_name": "ShalokShalom",
        "timestamp": 1695901086
    },
    {
        "content": "<p>I indeed quoted the wrong person, and meant my statement towards you (and simply agreed with you) <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 393691448,
        "sender_full_name": "ShalokShalom",
        "timestamp": 1695901326
    }
]