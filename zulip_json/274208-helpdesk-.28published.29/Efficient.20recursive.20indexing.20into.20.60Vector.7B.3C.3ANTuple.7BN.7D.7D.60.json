[
    {
        "content": "<p>I have a special structure that's basically a vector where every element is a Tuple of the same length, and I want to recursively index into it. So for example, I want </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">recursive_getindex</span><span class=\"p\">([(</span><span class=\"ss\">:a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:c</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">:d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:f</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:d</span>\n</code></pre></div>\n<p>I'm currently doing this with <code>divrem</code> to find the outer index and the inner index, but I feel like there should be an efficient way to do it. My instinct would be to use <code>reinterpret</code>, but I want to be able to support Tuples that might be padded or non-isbits.</p>",
        "id": 449054102,
        "sender_full_name": "Mason Protter",
        "timestamp": 1720088657
    },
    {
        "content": "<p>Any suggestions for how to go about this?</p>",
        "id": 449054150,
        "sender_full_name": "Mason Protter",
        "timestamp": 1720088678
    },
    {
        "content": "<p><code>divrem</code> is pretty optimal for this, since you're doing basically the same operation as for indexing a matrix linearly</p>",
        "id": 449054415,
        "sender_full_name": "Sukera",
        "timestamp": 1720088783
    },
    {
        "content": "<p>Hm, I think I must be doing something wrong then because it's quite slow compared to linearly accessing a matrix:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">recursive_getindex</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">}},</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">divrem</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">           </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">recursive_getindex</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">M</span><span class=\"o\">*$</span><span class=\"n\">N</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"n\">setup</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ntuple</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"n\">rand</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">M</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">âˆˆ</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:$</span><span class=\"n\">N</span><span class=\"p\">])</span>\n<span class=\"w\">           </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">M</span><span class=\"o\">*$</span><span class=\"n\">N</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"n\">setup</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">M</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">N</span><span class=\"p\">))</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"go\">  33.739 ns (0 allocations: 0 bytes)</span>\n<span class=\"go\">  12.827 ns (0 allocations: 0 bytes)</span>\n<span class=\"go\">17.3642736448238</span>\n</code></pre></div>",
        "id": 449058350,
        "sender_full_name": "Mason Protter",
        "timestamp": 1720090220
    },
    {
        "content": "<p>I guess what I should be doing is maybe interally just storing a <code>Vector{T}</code> and then have a function for taking <code>M</code> elements at a time as a <code>Tuple</code>, since I know I can make that fast.</p>",
        "id": 449058723,
        "sender_full_name": "Mason Protter",
        "timestamp": 1720090316
    },
    {
        "content": "<p>well it still has to load the tuple element first, seems like it doesn't want to fold that into one operation for some reason</p>",
        "id": 449080993,
        "sender_full_name": "Sukera",
        "timestamp": 1720097736
    },
    {
        "content": "<p>e.g. with</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"nd\">@propagate_inbounds</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">recursive_getindex</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">}},</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nd\">@boundscheck</span><span class=\"w\"> </span><span class=\"n\">checkbounds</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">divrem</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nd\">@inbounds</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">       </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">res</span>\n<span class=\"k\">end</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">code_native</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nd\">@inbounds</span><span class=\"p\">(</span><span class=\"n\">recursive_getindex</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"kt\">Float64</span><span class=\"p\">}},</span><span class=\"kt\">Int</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">dump_module</span><span class=\"o\">=</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">text</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">46</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`#87`</span>\n<span class=\"w\">    </span><span class=\"n\">push</span><span class=\"w\">    </span><span class=\"n\">rbp</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">r13</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`recursive_getindex`</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">86</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`-`</span>\n<span class=\"w\">    </span><span class=\"n\">dec</span><span class=\"w\"> </span><span class=\"n\">rsi</span>\n<span class=\"w\">    </span><span class=\"n\">movabs</span><span class=\"w\">  </span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6148914691236517206</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â””â””</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`recursive_getindex`</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">181</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`divrem`</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">203</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">295</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`div`</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsi</span>\n<span class=\"w\">    </span><span class=\"n\">imul</span><span class=\"w\">    </span><span class=\"n\">rcx</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â””â””</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`recursive_getindex`</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">907</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`getindex`</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rdi</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â””</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`recursive_getindex`</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">181</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`divrem`</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">203</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">295</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`div`</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rdx</span>\n<span class=\"w\">    </span><span class=\"n\">shr</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">63</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rdx</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”‚â””</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”‚</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">181</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`divrem`</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">204</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">88</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`*`</span>\n<span class=\"w\">    </span><span class=\"n\">lea</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">rax</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â””â””</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`recursive_getindex`</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">907</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`getindex`</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rcx</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"n\">rax</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”‚</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`getindex`</span>\n<span class=\"w\">    </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rax</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â”‚</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">907</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`getindex`</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rdx</span>\n<span class=\"w\">    </span><span class=\"n\">vmovups</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmmword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rcx</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"n\">rax</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">vmovaps</span><span class=\"w\"> </span><span class=\"n\">xmmword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">xmm0</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚â””</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”‚</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`recursive_getindex`</span>\n<span class=\"w\">    </span><span class=\"n\">vmovsd</span><span class=\"w\">  </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"n\">rsi</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c\"># xmm0 = mem[0],zero</span>\n<span class=\"w\">    </span><span class=\"n\">pop</span><span class=\"w\"> </span><span class=\"n\">rbp</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â””â””</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`&lt;invalid&gt;`</span>\n<span class=\"w\">    </span><span class=\"n\">nop</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"o\">:</span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â””</span>\n</code></pre></div>\n<p>while the <code>Matrix</code> version can just load the value without having to do the intermediate <code>divrem</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">code_native</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nd\">@inbounds</span><span class=\"p\">(</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"kt\">Int</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">dump_module</span><span class=\"o\">=</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">text</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">47</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`#89`</span>\n<span class=\"w\">    </span><span class=\"n\">push</span><span class=\"w\">    </span><span class=\"n\">rbp</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">r13</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”‚â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">907</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`getindex`</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rdi</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">vmovsd</span><span class=\"w\">  </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"n\">rsi</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c\"># xmm0 = mem[0],zero</span>\n<span class=\"w\">    </span><span class=\"n\">pop</span><span class=\"w\"> </span><span class=\"n\">rbp</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â””â””</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â”Œ</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">907</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"sb\">`&lt;invalid&gt;`</span>\n<span class=\"w\">    </span><span class=\"n\">nop</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">]</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">â””</span>\n</code></pre></div>",
        "id": 449081603,
        "sender_full_name": "Sukera",
        "timestamp": 1720097934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Efficient.20recursive.20indexing.20into.20.60Vector.7B.3C.3ANTuple.7BN.7D.7D.60/near/449058723\">said</a>:</p>\n<blockquote>\n<p>I guess what I should be doing is maybe interally just storing a <code>Vector{T}</code> and then have a function for taking <code>M</code> elements at a time as a <code>Tuple</code>, since I know I can make that fast.</p>\n</blockquote>\n<p>yeah, that's a good case for abstracting this away</p>",
        "id": 449081774,
        "sender_full_name": "Sukera",
        "timestamp": 1720097999
    },
    {
        "content": "<p>that being said, why not store this as a <code>Matrix</code> internally, one tuple per column? the biggest difference time wise probably won't be the single element indexing anyway but the continued iteration &amp; order that's being done in</p>",
        "id": 449082098,
        "sender_full_name": "Sukera",
        "timestamp": 1720098100
    },
    {
        "content": "<p>Oh yeah, good idea with the storing a matrix internally!</p>",
        "id": 449088113,
        "sender_full_name": "Mason Protter",
        "timestamp": 1720099697
    },
    {
        "content": "<p>I don't see why this function is called <code>recursive_getindex</code>, isn't it more like <code>flattened_getindex</code>?</p>",
        "id": 449150948,
        "sender_full_name": "jar",
        "timestamp": 1720120433
    },
    {
        "content": "<p>Well, the real name is just <code>getindex</code>, I'm writing a method for a specific struct</p>",
        "id": 449159653,
        "sender_full_name": "Mason Protter",
        "timestamp": 1720124271
    }
]