[
    {
        "content": "<p>I'm getting the following warnings when precompiling my package:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">│</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">pid</span><span class=\"w\"> </span><span class=\"mi\">26608</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">waiting</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">IO</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">finish</span><span class=\"o\">:</span>\n<span class=\"n\">│</span><span class=\"w\">   </span><span class=\"n\">Handle</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\">        </span><span class=\"n\">uv_handle_t</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span>\n<span class=\"n\">│</span><span class=\"w\">   </span><span class=\"n\">tcp</span><span class=\"p\">[</span><span class=\"mi\">864</span><span class=\"p\">]</span><span class=\"w\">           </span><span class=\"mi\">000002281</span><span class=\"n\">cc4f140</span><span class=\"o\">-&gt;</span><span class=\"mi\">0000022821</span><span class=\"n\">ce50a0</span>\n<span class=\"n\">│</span><span class=\"w\">   </span><span class=\"n\">tcp</span><span class=\"p\">[</span><span class=\"mi\">884</span><span class=\"p\">]</span><span class=\"w\">           </span><span class=\"mi\">000002281</span><span class=\"n\">cc4e430</span><span class=\"o\">-&gt;</span><span class=\"mi\">00000228206</span><span class=\"n\">c4a60</span>\n<span class=\"n\">│</span><span class=\"w\">  </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">means</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">started</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">background</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">finished</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">precompilation</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">complete</span><span class=\"w\"> </span><span class=\"n\">successfully</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"n\">needs</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">closed</span><span class=\"w\"> </span><span class=\"n\">explicitly</span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">See</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">developer</span><span class=\"w\"> </span><span class=\"n\">documentation</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">fixing</span><span class=\"w\"> </span><span class=\"n\">precompilation</span><span class=\"w\"> </span><span class=\"n\">hangs</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"o\">.</span>\n</code></pre></div>\n<p>The source is that the precompile workload uses <a href=\"https://juliahub.com/ui/Packages/General/HTTP\">HTTP.jl</a> <code>get</code> to download the data to work on. This is an integral part of what the package does, not something done just for precompiling and I really don't want to ship the data with the package.</p>\n<p>I can't see anything in HTTP which keeps TCP sockets open after requests have been received. Is it 'just' a matter of waiting for the handles to be garbage collected or something? I have tried to add (both busy and non-busy) waits for up to 20 seconds in the precompile statement but it only seems to be able to get rid of one of the handles from the warning.</p>\n<p>Are there anything bad that can happen if the warnings are not resolved (like leaking resources)? The precompile stuff helps alot with initial latency so I don't want to just remove it.</p>",
        "id": 407269722,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1702310215
    },
    {
        "content": "<p>But why do you have to do it during precompile?</p>",
        "id": 407295354,
        "sender_full_name": "Felix Kastner",
        "timestamp": 1702318499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269770\">Felix Kastner</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/PrecompileTools.20with.20HTTP.2Ejl/near/407295354\">said</a>:</p>\n<blockquote>\n<p>But why do you have to do it during precompile?</p>\n</blockquote>\n<p>Because I'm using <a href=\"https://juliahub.com/ui/Packages/General/PrecompileTools\">PrecompileTools.jl</a> to reduce ttfx.</p>",
        "id": 407298402,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1702319817
    },
    {
        "content": "<p>Probably because HTTP keeps the connection open for faster subsequent connections. Perhaps try with <code>HTTP.Connections.closeall()</code>?</p>",
        "id": 407334036,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1702335493
    },
    {
        "content": "<p>Once you fix it, Aqua provides a regression test for this FYI: <a href=\"https://juliatesting.github.io/Aqua.jl/stable/persistent_tasks/\">https://juliatesting.github.io/Aqua.jl/stable/persistent_tasks/</a></p>",
        "id": 407342975,
        "sender_full_name": "Eric Hanson",
        "timestamp": 1702340491
    },
    {
        "content": "<p>Couldn't you download the data during <code>Pkg.build</code> and not during precompilation? I seem to recall having seen some packages do this.</p>",
        "id": 407394148,
        "sender_full_name": "Felix Kastner",
        "timestamp": 1702361218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272644\">Fredrik Ekre</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/PrecompileTools.20with.20HTTP.2Ejl/near/407334036\">said</a>:</p>\n<blockquote>\n<p>Probably because HTTP keeps the connection open for faster subsequent connections. Perhaps try with <code>HTTP.Connections.closeall()</code>?</p>\n</blockquote>\n<p>Close, but no cigar for me :(. However, this worked:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">close</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vs</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">HTTP</span><span class=\"o\">.</span><span class=\"n\">Connections</span><span class=\"o\">.</span><span class=\"n\">OPENSSL_POOL</span><span class=\"p\">[]</span><span class=\"o\">.</span><span class=\"n\">keyedvalues</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>It seems a bit too reliant on internal details to be comfortable, but it looks like it is possible to supply an own pool through the <code>get</code> call (not sure how the kwargs propagate here). However, could it be a bug in HTTP that the above does not seem to happen when calling <code>Connections.closeall()</code>?</p>\n<blockquote>\n<p>Once you fix it, Aqua provides a regression test for this FYI:<br>\nGood tip, although I'm a bit scared of what Aqua will think of this package :)</p>\n</blockquote>\n<blockquote>\n<p>Couldn't you download the data during <a href=\"http://Pkg.build\">Pkg.build</a> and not during precompilation? I seem to recall having seen some packages do this.</p>\n</blockquote>\n<p>Ah, now I understand what you meant. This might be some kind of last resort option in case all else fails. The problem is that the code I want to precompile does quite a few calculations to find out what data to download, so it is not like the data which <code>HTTP</code> gets is some kind of input stimuli. I might be able to work around that though.</p>",
        "id": 407411934,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1702366535
    }
]