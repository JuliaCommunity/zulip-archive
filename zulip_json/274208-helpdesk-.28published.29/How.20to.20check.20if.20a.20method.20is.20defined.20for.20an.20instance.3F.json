[
    {
        "content": "<p>Say I have an instance <code>obj</code> how do I check if there is a method <code>size(obj)</code> defined?</p>",
        "id": 226653347,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1613567562
    },
    {
        "content": "<p>I would like to write a function that behaves differently depending on this availability of size. I know this is a trait, but I wonder if there is a simple way of checking this without relying on packages.</p>",
        "id": 226653429,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1613567608
    },
    {
        "content": "<p>I think, you can use hasmethod like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">hasmethod</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">),))</span>\n</code></pre></div>",
        "id": 226654460,
        "sender_full_name": "Felix Cremer",
        "timestamp": 1613568126
    },
    {
        "content": "<p>But I am not sure, whether this is the best way to do that.</p>",
        "id": 226654500,
        "sender_full_name": "Felix Cremer",
        "timestamp": 1613568148
    },
    {
        "content": "<p>Sorry, just to avoid XY problem. How is it possible that method <code>size</code> for <code>object</code> is not defined? I mean, it's you as a developer who is writing code and you know exactly whether you wrote this method or not. Why determine it in runtime?</p>",
        "id": 226659340,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1613570421
    },
    {
        "content": "<p>I would like to check if the user provided type has support for size, and if it has I can specialize the implementation. This is pretty much a trait but since Julia doesn't support traits as a built-in I think the hasmethod is enough in this case.</p>",
        "id": 226664276,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1613572538
    },
    {
        "content": "<p>Related discussion<br>\n<a href=\"https://discourse.julialang.org/t/how-much-performance-potential-does-dataframes-have/55441\">https://discourse.julialang.org/t/how-much-performance-potential-does-dataframes-have/55441</a></p>",
        "id": 226713338,
        "sender_full_name": "Fredrik Bagge Carlson",
        "timestamp": 1613590645
    },
    {
        "content": "<p>Note that <code>hasmethod</code> is slow for basically ideological reasons. If you want it to be fast, <a href=\"https://github.com/search?q=Tricks.jl&amp;type=Repositories\">Tricks.jl</a> has <code>static_hasmethod</code>.</p>",
        "id": 226714885,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613591323
    },
    {
        "content": "<p>The readme even has an example of using it to define traits: <a href=\"https://github.com/oxinabox/Tricks.jl#uses\">https://github.com/oxinabox/Tricks.jl#uses</a></p>",
        "id": 226714963,
        "sender_full_name": "Mason Protter",
        "timestamp": 1613591359
    },
    {
        "content": "<p>Thank you all for the tips. Very welcome.</p>",
        "id": 226737367,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1613600673
    }
]