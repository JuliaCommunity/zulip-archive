[
    {
        "content": "<p>Hello, friends.</p>\n<p>I'm starting to \"formally\" dive into functional programming. I was hoping to use Julia for this (instead of something like Haskell). Any suggestions of books/articles/blog posts/packages? I've found <a href=\"https://github.com/search?q=MLStyle.jl&amp;type=Repositories\">MLStyle.jl</a> , but I don't have the proper knowledge yet to understand most of the functional programming idiom. I'd love some guidance from the pros :)</p>\n<p>P.S: My main motivation is to learn how to better design some packages I'm working on.</p>",
        "id": 291427487,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1659185607
    },
    {
        "content": "<p>\"Functional programming\" can mean different things. It can mean no side-effects/referential transparency, or a paradigm of programming that uses map/filter/reduce, or both.</p>",
        "id": 291428827,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659187422
    },
    {
        "content": "<p>Which in particular are you interested in?</p>",
        "id": 291428831,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659187437
    },
    {
        "content": "<p>For the latter, Julia has versions of map/filter/reduce builtin to the language, so you really don't need a library. <a href=\"https://github.com/search?q=MLStyle.jl&amp;type=Repositories\">MLStyle.jl</a> pattern matching is not really inherent to functional programming, but is common in some FP languages. You might like <a href=\"https://github.com/search?q=Folds.jl&amp;type=Repositories\">Folds.jl</a> and the libraries built on top of it, as well as this JuliaCon 2022 talk: <a href=\"https://live.juliacon.org/talk/WKNY78\">https://live.juliacon.org/talk/WKNY78</a> for getting started.</p>",
        "id": 291429031,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659187750
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"374994\">@Michael Fiano</span> .  The term Functional Programming seem to be quite overloaded. That's actually one of the problems I'm facing and trying to understand.</p>",
        "id": 291429464,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1659188370
    },
    {
        "content": "<p>Welcome to CS, where even the term <code>overload</code> is overloaded <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 291429472,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659188401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374994\">@Michael Fiano</span> , I really liked the talk... Do you have any references you suggest for <code>map/filter/ reduce</code> part of FP?</p>",
        "id": 291430495,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1659189694
    },
    {
        "content": "<p>As I said, my main interest is in improving my code design. As I've started coding more complex packages, I realized that I needed a better understanding of the subject.</p>",
        "id": 291430548,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1659189743
    },
    {
        "content": "<p>Hmm, you could check out the API for <code>map</code>, <code>reduce</code>, <code>foldl</code>, <code>foldr</code>, and <code>filter</code> perhaps.</p>",
        "id": 291430578,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659189821
    },
    {
        "content": "<p><code>reduce</code>, and by extension <code>foldl</code> and <code>foldr</code> can take some getting used to, but the other two are pretty powerful on their own and pretty easy to grasp.</p>",
        "id": 291430653,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659189923
    },
    {
        "content": "<p>The thing about FP is it favors higher order functions. Julia was designed with this in mind, but Julia is multi-paradigm, and doesn't constrain your design if you need to reach for a comprehension or for loop or such.</p>",
        "id": 291430733,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659190016
    },
    {
        "content": "<p>I mean, truth is that I understand what they do, but I don't understand why it would be better than what one conventionally uses.</p>",
        "id": 291430735,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1659190019
    },
    {
        "content": "<p>It is more composable. Instead of looping over something, you can for example pass a re-usable function to apply to all elements of a container, with the higher order function <code>map</code>.</p>",
        "id": 291430805,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659190084
    },
    {
        "content": "<p><code>map(isodd, 1:10)</code> for example will tell you which elements are odd. You are not restricted to using builtin functions like <code>isodd</code> though. You can design re-usable functions that are used to map over or filter collections.</p>",
        "id": 291430853,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659190173
    },
    {
        "content": "<p>For anything that conforms to the iterate interface.</p>",
        "id": 291430860,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1659190198
    },
    {
        "content": "<p>For that sort of thing I’d heartily recommend <a href=\"https://github.com/search?q=Transducers.jl&amp;type=Repositories\">Transducers.jl</a> over the regular map, filter, fold constructions</p>",
        "id": 291443798,
        "sender_full_name": "Mason Protter",
        "timestamp": 1659205261
    },
    {
        "content": "<p>The way to think about them is that they’re a more structured form of  a loop, and because they have more structure, they can be (ideally) understood better by a compiler</p>",
        "id": 291443915,
        "sender_full_name": "Mason Protter",
        "timestamp": 1659205358
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> . I'll take a look.<br>\nAt the moment, I'm reading \"Grokking Simplicity\" on function programming. Have you guys read it?</p>",
        "id": 291449838,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1659213647
    },
    {
        "content": "<p>I'd love to hear book references, even if they are academic. I don't mind studying a bit of CS.</p>",
        "id": 291449856,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1659213684
    },
    {
        "content": "<p>What opened my eyes to handling state inside a program in a functional way was <a href=\"https://prog21.dadgum.com/23.html\">https://prog21.dadgum.com/23.html</a>. Part 3 in particular talks about how (not) to pass state through the system.</p>",
        "id": 291490766,
        "sender_full_name": "Rik Huijzer",
        "timestamp": 1659274188
    }
]