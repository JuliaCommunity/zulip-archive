[
    {
        "content": "<p>Well, topic's name is strange, but I do not know how to name it better.</p>\n<p>The question is the following: I have some <code>Tuple</code> type, for example <code>T1 = Tuple{Int, Int, Float64}</code>. And I want to add more types inside curly brackets, for example, <code>Tuple{String, Int, Int, Float64}</code>. Ideally it should be a function (or macros?) which do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"n\">S</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"o\">???</span><span class=\"p\">}})</span> <span class=\"o\">=</span> <span class=\"o\">???</span> <span class=\"c\"># should produces Tuple{S, ???...}</span>\n</code></pre></div>",
        "id": 233455231,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1617786548
    },
    {
        "content": "<p>May be from another angle, same question can be also asked like that. I have following structure</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"n\">Foo</span><span class=\"p\">{</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">Tuple</span><span class=\"p\">}</span>\n  <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">S</span>\n  <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">T</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>And I want to have</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Tables</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">::</span><span class=\"n\">Foo</span><span class=\"p\">{</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">})</span> <span class=\"n\">where</span> <span class=\"p\">{</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"o\">...</span><span class=\"p\">})</span>\n</code></pre></div>\n<p>Of course <code>T...</code> is not working here, because it is a type.</p>",
        "id": 233455693,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1617786820
    },
    {
        "content": "<p><code>f(::Type{S}, ::Type{T}) where {S,T&lt;:Tuple} = Tuple{S,T.types...}</code>  should do</p>",
        "id": 233466074,
        "sender_full_name": "Paul Bayer",
        "timestamp": 1617792151
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">})</span>\n<span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 233466145,
        "sender_full_name": "Paul Bayer",
        "timestamp": 1617792206
    },
    {
        "content": "<p>Ah, this is amazing, thank you!</p>",
        "id": 233466312,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1617792291
    },
    {
        "content": "<p>I was so close :-))</p>",
        "id": 233466368,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1617792324
    }
]