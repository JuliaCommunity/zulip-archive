[
    {
        "content": "<p>Might anyone be able to explain what's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Ref</span><span class=\"p\">{</span><span class=\"kt\">TypeVar</span><span class=\"p\">(</span><span class=\"ss\">:I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Union</span><span class=\"p\">{},</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"p\">)}</span>\n<span class=\"kt\">Ref</span><span class=\"p\">{</span><span class=\"kt\">I</span><span class=\"o\">&lt;:</span><span class=\"kt\">Integer</span><span class=\"p\">}</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"n\">tt</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">UndefVarError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"sb\">`A`</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">defined</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"c\">#unused#::Type{Ref{I&lt;:Integer}})</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">219</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">220</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 357919100,
        "sender_full_name": "Timothy",
        "timestamp": 1683906896
    },
    {
        "content": "<p>Interesting one - I don't think you should be able to define <code>r</code> like that</p>",
        "id": 357920917,
        "sender_full_name": "Sukera",
        "timestamp": 1683907221
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Ref</span><span class=\"p\">{</span><span class=\"kt\">I</span><span class=\"o\">&lt;:</span><span class=\"kt\">Integer</span><span class=\"p\">}</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">UndefVarError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"sb\">`I`</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">defined</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 357921046,
        "sender_full_name": "Sukera",
        "timestamp": 1683907254
    },
    {
        "content": "<p>compared to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Ref</span><span class=\"p\">{</span><span class=\"kt\">I</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"o\">&lt;:</span><span class=\"w\"> </span><span class=\"kt\">Integer</span>\n<span class=\"kt\">Ref</span><span class=\"p\">{</span><span class=\"kt\">I</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"o\">&lt;:</span><span class=\"kt\">Integer</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"n\">tt</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"kt\">Ref</span><span class=\"p\">{</span><span class=\"kt\">I</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"o\">&lt;:</span><span class=\"kt\">Integer</span>\n</code></pre></div>",
        "id": 357921138,
        "sender_full_name": "Sukera",
        "timestamp": 1683907276
    },
    {
        "content": "<p>since <code>TypeVar</code> is mutable,  it should not be possible to place it in that position - looks like a bug to me</p>",
        "id": 357921248,
        "sender_full_name": "Sukera",
        "timestamp": 1683907302
    },
    {
        "content": "<p>I find this curious on two levels:</p>\n<ol>\n<li>That this \"looks like it works\"</li>\n<li>The nature of the error message</li>\n</ol>",
        "id": 357925305,
        "sender_full_name": "Timothy",
        "timestamp": 1683908101
    },
    {
        "content": "<p>it's not a type that should be constructible, so it's unsurprising that the method says \"this doesn't exist, what are you doooing\"</p>",
        "id": 357925753,
        "sender_full_name": "Sukera",
        "timestamp": 1683908207
    },
    {
        "content": "<p>would be good to have an issue for this, I think</p>",
        "id": 357925848,
        "sender_full_name": "Sukera",
        "timestamp": 1683908225
    },
    {
        "content": "<p>I feel like it's more of a \"is malformed\" than \"doesn't exist\" situation</p>",
        "id": 357925988,
        "sender_full_name": "Timothy",
        "timestamp": 1683908261
    },
    {
        "content": "<p>mutable objects are forbidden from being a type paremeter - the type quite literally does not (or isn't supposed to) exist/be constructible</p>",
        "id": 357926671,
        "sender_full_name": "Sukera",
        "timestamp": 1683908417
    },
    {
        "content": "<p>I'm still surprised about <code>TypeVar</code> being mutable</p>",
        "id": 357927304,
        "sender_full_name": "Timothy",
        "timestamp": 1683908550
    },
    {
        "content": "<p>my guess is that this is so because it has to interface with C and writing that mutating then was/is easier in the compiler</p>",
        "id": 357927601,
        "sender_full_name": "Sukera",
        "timestamp": 1683908626
    },
    {
        "content": "<p>Can you open an issue for this? Since this shouldn't be constructible, this ought to error I think</p>",
        "id": 357976203,
        "sender_full_name": "Sukera",
        "timestamp": 1683921851
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/JuliaLang/julia/issues/49799\">https://github.com/JuliaLang/julia/issues/49799</a></p>",
        "id": 358038166,
        "sender_full_name": "Timothy",
        "timestamp": 1683956017
    }
]