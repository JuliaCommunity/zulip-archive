[
    {
        "content": "<p>Hello! </p>\n<p>Say I have many different concrete types and I want to specify a method that is dispatched on the <em>set</em> of types A,B,C,D all different, but in an order agnostic way, is there no better option than to specify f(::A,::B,::C,::D) and then specify all other possible combinations by then calling that method?</p>\n<p>This would imply writing 4!=24 different method definitions...</p>",
        "id": 297222144,
        "sender_full_name": "Lucien Huber",
        "timestamp": 1662382473
    },
    {
        "content": "<p>You could define <code>const ABCD = Union{A, B, C, D}</code> and use <code>f(a::ABCD, b::ABCD, c::ABCD, d::ABCD)</code> and then do a runtime check of the times. I imagine you would have to sort the variables somehow internally anyway in this case?</p>",
        "id": 297222584,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1662382681
    },
    {
        "content": "<p>No but in this case it would match a call to f(A,A,A,A) which I do not want, I only want to match when all are different</p>",
        "id": 297223622,
        "sender_full_name": "Lucien Huber",
        "timestamp": 1662383109
    },
    {
        "content": "<p>you can do <code>typeof(a) !== typeof(b) !== typeof(c) !== typeof(d) || throw(ArgumentError(\"types not distinct\"))</code> in your method</p>",
        "id": 297223791,
        "sender_full_name": "Sukera",
        "timestamp": 1662383178
    },
    {
        "content": "<p>Yea, but you can check for that and error is what I meant.</p>",
        "id": 297223792,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1662383180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306754\">Sukera</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Order.20agnostic.20dispatch/near/297223791\">said</a>:</p>\n<blockquote>\n<p>you can do <code>typeof(a) !== typeof(b) !== typeof(c) !== typeof(d) || throw(ArgumentError(\"types not distinct\"))</code> in your method</p>\n</blockquote>\n<p>or lets say I want something else to happen for f(A,A,A,A).. i.e definately not  dispatch and throw an error</p>",
        "id": 297224409,
        "sender_full_name": "Lucien Huber",
        "timestamp": 1662383439
    },
    {
        "content": "<p>Then you define another method with that signature. It will be more specific than the union.</p>",
        "id": 297224463,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1662383471
    },
    {
        "content": "<p>aha yes!</p>",
        "id": 297224619,
        "sender_full_name": "Lucien Huber",
        "timestamp": 1662383529
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 297224636,
        "sender_full_name": "Lucien Huber",
        "timestamp": 1662383536
    },
    {
        "content": "<p>I've created a macro for this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">MacroTools</span><span class=\"w\"></span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Combinatorics</span><span class=\"w\"></span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">applyPerm</span><span class=\"p\">(</span><span class=\"n\">perm</span><span class=\"p\">,</span><span class=\"n\">vector</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">newVector</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">perm</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">newVector</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">vector</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">newVector</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">invertPerm</span><span class=\"p\">(</span><span class=\"n\">perm</span><span class=\"p\">,</span><span class=\"n\">vector</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">newVector</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">perm</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">newVector</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">vector</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">newVector</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"n\">invertPerm</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">applyPerm</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]))</span><span class=\"w\"></span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">combineargs</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">combinearg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">A</span><span class=\"p\">,[</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"kt\">D</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nd\">@info</span><span class=\"w\"> </span><span class=\"s\">\"Abcd\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n\n\n<span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">symmetric</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">dict</span><span class=\"o\">=</span><span class=\"n\">splitdef</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">splitarg</span><span class=\"p\">,</span><span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"ss\">:args</span><span class=\"p\">])</span><span class=\"w\"></span>\n\n\n<span class=\"n\">symargs</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"n\">indices</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">newarguments</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">isexpr</span><span class=\"p\">((</span><span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">newarguments</span><span class=\"p\">,</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">nargs</span><span class=\"o\">+=</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">addsymargs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">splitarg</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">newarguments</span><span class=\"p\">,</span><span class=\"n\">addsymargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">nnewsymargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">addsymargs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">,(</span><span class=\"n\">nargs</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nargs</span><span class=\"o\">+</span><span class=\"n\">nnewsymargs</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">nargs</span><span class=\"o\">+=</span><span class=\"n\">nnewsymargs</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">symargs</span><span class=\"p\">,</span><span class=\"n\">addsymargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"n\">newarguments</span><span class=\"w\"></span>\n<span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"ss\">:args</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">combineargs</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">argtypes</span><span class=\"o\">=</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-&gt;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">symargs</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">perms</span><span class=\"o\">=</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">multiset_permutations</span><span class=\"p\">(</span><span class=\"n\">argtypes</span><span class=\"p\">,</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">argtypes</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">argtypes</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"o\">=</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">perms</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">MATCHED</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gensym</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"n\">intperms</span><span class=\"o\">=</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">}(</span><span class=\"nb\">undef</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">perm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">perms</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">argtypes</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">k</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"n\">findfirst</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">===</span><span class=\"n\">type</span><span class=\"p\">,</span><span class=\"n\">perm</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">perm</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">MATCHED</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">intperms</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"n\">fns</span><span class=\"o\">=</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Expr</span><span class=\"p\">}(</span><span class=\"nb\">undef</span><span class=\"p\">,</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">intperms</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span><span class=\"w\"></span>\n<span class=\"n\">fns</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">combinedef</span><span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">perm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">eachrow</span><span class=\"p\">(</span><span class=\"n\">intperms</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"p\">]))</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">cdict</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">carguments</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">carguments</span><span class=\"p\">[</span><span class=\"n\">indices</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">applyPerm</span><span class=\"p\">(</span><span class=\"n\">perm</span><span class=\"p\">,</span><span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"n\">indices</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">argu</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-&gt;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">arguments</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">body</span><span class=\"o\">=:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"ss\">:name</span><span class=\"p\">])(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">argu</span><span class=\"o\">...</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">cdict</span><span class=\"p\">[</span><span class=\"ss\">:body</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">body</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">cdict</span><span class=\"p\">[</span><span class=\"ss\">:args</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">combineargs</span><span class=\"p\">(</span><span class=\"n\">carguments</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fns</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">MacroTools</span><span class=\"o\">.</span><span class=\"n\">combinedef</span><span class=\"p\">(</span><span class=\"n\">cdict</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">quote</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">fns</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"kt\">D</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"></span>\n\n\n<span class=\"nd\">@symmetric</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"kt\">D</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nd\">@info</span><span class=\"w\"> </span><span class=\"s\">\"Abcd\"</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(),</span><span class=\"n\">A</span><span class=\"p\">(),</span><span class=\"n\">C</span><span class=\"p\">(),</span><span class=\"n\">D</span><span class=\"p\">())</span><span class=\"c\">#method not found</span><span class=\"w\"></span>\n<span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(),</span><span class=\"n\">B</span><span class=\"p\">(),</span><span class=\"n\">D</span><span class=\"p\">(),</span><span class=\"n\">C</span><span class=\"p\">())</span><span class=\"c\">#method found!</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However this is my first macro so I this I might have gotten some things wrong. When the method isn't found I get an error: <code>could not determine location of method definition</code>, Could someone more experienced take a look?</p>",
        "id": 297260137,
        "sender_full_name": "Lucien Huber",
        "timestamp": 1662399677
    },
    {
        "content": "<p>I think what you are looking for is diagonal dispatch:</p>",
        "id": 299931910,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1663759178
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"all same\"</span><span class=\"w\"></span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"not all same\"</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 299932022,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1663759216
    },
    {
        "content": "<p>The thing I want to avoid is to have to define methods for all the different orderings of the types.. So while diagonal dispatch eliminates the all equal case, it doesn't really solve the problem. The macro above actually works quite well, except this weird error thing.. </p>\n<p>I guess what I want is to be able to dispatch on sets of types, not specific orders of types.</p>",
        "id": 300743802,
        "sender_full_name": "Lucien Huber",
        "timestamp": 1664182288
    }
]