[
    {
        "content": "<p>Any idea why this would be causing a scalar indexing problem?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">6</span>\n        <span class=\"n\">x4</span> <span class=\"o\">=</span> <span class=\"n\">CuArray</span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n        <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">x4</span><span class=\"p\">)</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">sz</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Scalar</span> <span class=\"n\">indexing</span> <span class=\"n\">is</span> <span class=\"n\">disallowed</span><span class=\"o\">.</span>\n\n<span class=\"n\">Invocation</span> <span class=\"n\">of</span> <span class=\"n\">getindex</span> <span class=\"n\">resulted</span> <span class=\"k\">in</span> <span class=\"n\">scalar</span> <span class=\"n\">indexing</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">GPU</span> <span class=\"n\">array</span><span class=\"o\">.</span>\n\n<span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">typically</span> <span class=\"n\">caused</span> <span class=\"n\">by</span> <span class=\"n\">calling</span> <span class=\"n\">an</span> <span class=\"n\">iterating</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">method</span><span class=\"o\">.</span>\n\n<span class=\"n\">Such</span> <span class=\"n\">implementations</span> <span class=\"o\">*</span><span class=\"k\">do</span> <span class=\"n\">not</span><span class=\"o\">*</span> <span class=\"n\">execute</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">GPU</span><span class=\"p\">,</span> <span class=\"n\">but</span> <span class=\"n\">very</span> <span class=\"n\">slowly</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">CPU</span><span class=\"p\">,</span>\n\n<span class=\"n\">and</span> <span class=\"n\">therefore</span> <span class=\"n\">are</span> <span class=\"n\">only</span> <span class=\"n\">permitted</span> <span class=\"n\">from</span> <span class=\"n\">the</span> <span class=\"n\">REPL</span> <span class=\"k\">for</span> <span class=\"n\">prototyping</span> <span class=\"n\">purposes</span><span class=\"o\">.</span>\n\n<span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">did</span> <span class=\"n\">intend</span> <span class=\"n\">to</span> <span class=\"n\">index</span> <span class=\"n\">this</span> <span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">annotate</span> <span class=\"n\">the</span> <span class=\"n\">caller</span> <span class=\"n\">with</span> <span class=\"nd\">@allowscalar</span><span class=\"o\">.</span>\n\n<span class=\"n\">error</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span><span class=\"nd\">@error</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">33</span>\n<span class=\"n\">assertscalar</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span><span class=\"nd\">@indexing</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">53</span>\n<span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span><span class=\"nd\">@indexing</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">86</span>\n<span class=\"n\">iterate</span><span class=\"nd\">@abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1096</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">iterate</span><span class=\"nd\">@abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1094</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">indexed_iterate</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span><span class=\"nd\">@tuple</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">89</span>\n<span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span><span class=\"nd\">@Local</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 249312666,
        "sender_full_name": "Dale Black",
        "timestamp": 1628818051
    },
    {
        "content": "<p>Not sure why, but removing the <code>[0, 1]</code> from <code>rand</code> fixes the problem</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">6</span>\n        <span class=\"n\">x4</span> <span class=\"o\">=</span> <span class=\"n\">CuArray</span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n        <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">x4</span><span class=\"p\">)</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">sz</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 249483900,
        "sender_full_name": "Dale Black",
        "timestamp": 1628986729
    },
    {
        "content": "<p>Maybe has to do with CUDA support for replacing Base intrinsics automatically. Stuff like <code>sin</code> or <code>rand</code> used to require calling <code>CUDA.sin</code>/<code>CUDA.rand</code>. Now CUDA will automatically replace those calls with CUDA equivalents when you are using <code>CuArray</code>s. So here you actually ended up calling <code>CUDA.rand</code> and sampling from <code>[0, 1]</code> will scalar index that vector.</p>",
        "id": 249542084,
        "sender_full_name": "Kyle Daruwalla",
        "timestamp": 1629080483
    },
    {
        "content": "<p>Maybe <code>cu(Base.rand([0, 1], n, n))</code> will work?</p>",
        "id": 249542132,
        "sender_full_name": "Kyle Daruwalla",
        "timestamp": 1629080533
    },
    {
        "content": "<p><a href=\"https://juliagpu.org/post/2021-04-09-cuda_3.0/\">https://juliagpu.org/post/2021-04-09-cuda_3.0/</a> for more info</p>",
        "id": 249542145,
        "sender_full_name": "Kyle Daruwalla",
        "timestamp": 1629080570
    },
    {
        "content": "<p>I think  your problem is the stray commas.  <code>dt = zeros(sz), v = ones(sz), z = zeros(sz)</code> is parsed as... some kind of unpacking like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">Scalar</span> <span class=\"n\">indexing</span> <span class=\"n\">is</span> <span class=\"n\">disallowed</span><span class=\"o\">.</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">),</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">),</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">CUDA</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">sz</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">Scalar</span> <span class=\"n\">indexing</span> <span class=\"n\">is</span> <span class=\"n\">disallowed</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 249542685,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1629081468
    },
    {
        "content": "<p>Oh, I didn't even notice the commas before. That could've been the problem too, hmm</p>",
        "id": 249549444,
        "sender_full_name": "Dale Black",
        "timestamp": 1629090239
    }
]