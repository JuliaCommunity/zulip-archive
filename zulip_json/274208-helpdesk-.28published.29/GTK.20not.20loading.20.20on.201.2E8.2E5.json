[
    {
        "content": "<p>I've got an old Project.toml in a project that I was using in Julia 1.6.5, but now I'm trying to run the project on Julia-1.8.3 and things like Gtk don't compile (probably the version specified in the Project.toml isn't compatible with Julia 1.8.3). Is there a way to say that instead of using the version (UUID) specified in the Project.toml, just go ahead and load up all the latest versions of the dependencies? (what I did was manually go through and add all of the packages in the Project.toml, but I suspect there must be a better way)</p>",
        "id": 357088144,
        "sender_full_name": "Phil Tomson",
        "timestamp": 1683662285
    },
    {
        "content": "<p><a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/GTK.20not.20loading.20.20on.201.2E8.2E5/near/357088144\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"274208\" href=\"/#narrow/stream/274208-helpdesk-.28published.29/topic/Why.20is.20this.20not.20typestable.3F\">#helpdesk (published) &gt; Why is this not typestable?</a> by <span class=\"user-mention silent\" data-user-id=\"306754\">Sukera</span>.</p>",
        "id": 357089236,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683662591
    },
    {
        "content": "<p>what error do you get?</p>",
        "id": 357089273,
        "sender_full_name": "Sukera",
        "timestamp": 1683662609
    },
    {
        "content": "<p>have you tried <code>]resolve</code> and <code>]instantiate</code> afterwards?</p>",
        "id": 357089342,
        "sender_full_name": "Sukera",
        "timestamp": 1683662639
    },
    {
        "content": "<p>Project.toml doesn't store any versions of a particular instantiation, only the package UUIDs (which identify which package is a dependency) and the compat bounds (which state which versions of a given package a project is compatible with)</p>",
        "id": 357089533,
        "sender_full_name": "Sukera",
        "timestamp": 1683662715
    },
    {
        "content": "<p>or simply  <code>]up</code>?</p>",
        "id": 357089576,
        "sender_full_name": "Sukera",
        "timestamp": 1683662733
    },
    {
        "content": "<p>Oh, sorry, ended up in the wrong channel or something, I haven't been on here in ages...<br>\nIt was a compile error of some sort. I was able to get them loaded by manually adding, I'll try the ]resolve and ]instantiate.</p>",
        "id": 357089741,
        "sender_full_name": "Phil Tomson",
        "timestamp": 1683662783
    },
    {
        "content": "<p>Would it be <code>]activate .</code> followed by <code>]resolve</code> and then `]instantiate'?</p>",
        "id": 357090222,
        "sender_full_name": "Phil Tomson",
        "timestamp": 1683662983
    },
    {
        "content": "<p>yes, you'll have to activate the environment of the project</p>",
        "id": 357091427,
        "sender_full_name": "Sukera",
        "timestamp": 1683663446
    },
    {
        "content": "<p>don't just add all the dependencies to your main/default environment :)</p>",
        "id": 357091453,
        "sender_full_name": "Sukera",
        "timestamp": 1683663464
    },
    {
        "content": "<p>Yeah, when I try that I get a bunch of errors like: <br>\nRROR: The following 2 direct dependencies failed to precompile:</p>\n<p>Images [916415d5-f1e6-5110-898d-aaa5f9f070e0]</p>\n<p>Failed to precompile Images [916415d5-f1e6-5110-898d-aaa5f9f070e0] to /home/phil/.julia/compiled/v1.8/Images/jl_TRVB3o.<br>\nERROR: LoadError: ArgumentError: Package CompilerSupportLibraries_jll does not have Pkg in its dependencies:</p>",
        "id": 357092922,
        "sender_full_name": "Phil Tomson",
        "timestamp": 1683663999
    },
    {
        "content": "<p>can you share the Project.toml and Manifest.toml for that? This shouldn't happen <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 357182163,
        "sender_full_name": "Sukera",
        "timestamp": 1683702447
    },
    {
        "content": "<p>I'm pretty sure it has something to do with a difference in the Project.toml and Manifest.toml since an earlier version of Julia (IIRC 1.6.3 worked for this project.). I removed them and regenerated them and that seemed to work.</p>",
        "id": 357361545,
        "sender_full_name": "Phil Tomson",
        "timestamp": 1683739720
    },
    {
        "content": "<p>Yeah, there's no gaurentees that a manifest can be re-used between julia versions</p>",
        "id": 357362551,
        "sender_full_name": "Mason Protter",
        "timestamp": 1683740012
    },
    {
        "content": "<p>Nowadays we even warn people if they use a manifest that was generated on a different version for this reason</p>",
        "id": 357362625,
        "sender_full_name": "Mason Protter",
        "timestamp": 1683740038
    },
    {
        "content": "<p>So do you save the toml files in github (or whatever your version control is) <br>\nor do you just regen them every time you move to a new version of Julia?</p>",
        "id": 357362941,
        "sender_full_name": "Phil Tomson",
        "timestamp": 1683740136
    },
    {
        "content": "<p>I only save the Project.toml file to github</p>",
        "id": 357363085,
        "sender_full_name": "Mason Protter",
        "timestamp": 1683740170
    },
    {
        "content": "<p>The Manifest is only for exact reproducibility, and in that case you want to use it with the same julia version anyways</p>",
        "id": 357363172,
        "sender_full_name": "Mason Protter",
        "timestamp": 1683740214
    },
    {
        "content": "<p>ah, ok. That's what I did wrong, then.</p>",
        "id": 357363234,
        "sender_full_name": "Phil Tomson",
        "timestamp": 1683740238
    },
    {
        "content": "<p>I'd developed this this package on 1.6, IIRC ( a couple of years ago).</p>",
        "id": 357363561,
        "sender_full_name": "Phil Tomson",
        "timestamp": 1683740325
    },
    {
        "content": "<p>it depends on what the project is for - if you develop an application, saving the Manifest.toml certainly makes sense for reproducibility. For regular packages though, I usually stick to just having Project.toml</p>",
        "id": 357461667,
        "sender_full_name": "Sukera",
        "timestamp": 1683781540
    }
]