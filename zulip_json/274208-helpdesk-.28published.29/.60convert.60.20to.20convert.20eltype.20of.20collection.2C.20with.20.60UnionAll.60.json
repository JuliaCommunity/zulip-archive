[
    {
        "content": "<p>Why this behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mf\">1.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>\n <span class=\"mi\">2</span>\n\n<span class=\"n\">ulia</span><span class=\"o\">&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span>\n <span class=\"mf\">2.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">T</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractFloat</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">A</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">)(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span>\n</code></pre></div>",
        "id": 247385915,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627417392
    },
    {
        "content": "<p>The second of your examples is just converting to Vector.</p>",
        "id": 247387352,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1627418072
    },
    {
        "content": "<p>Note as well that <code>Vector{AbstractFloat}</code> is completely different from <code>Vector{T} where T &lt;: AbstractFloat</code></p>",
        "id": 247387476,
        "sender_full_name": "Mason Protter",
        "timestamp": 1627418156
    },
    {
        "content": "<p>Right, <code>(Vector{T} where T) === Vector</code></p>",
        "id": 247387997,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627418406
    },
    {
        "content": "<p>I know the two types are different :</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">]</span> <span class=\"k\">isa</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">}</span>\n<span class=\"nb\">false</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">]</span> <span class=\"k\">isa</span> <span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">T</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractFloat</span><span class=\"p\">)</span>\n<span class=\"nb\">true</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"kt\">AbstractFloat</span><span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">]</span> <span class=\"k\">isa</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">}</span>\n<span class=\"nb\">true</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"kt\">AbstractFloat</span><span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">]</span> <span class=\"k\">isa</span> <span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">T</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractFloat</span><span class=\"p\">)</span>\n<span class=\"nb\">true</span>\n</code></pre></div>",
        "id": 247388181,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627418499
    },
    {
        "content": "<p>but I am wondering why <code>convert</code> is not defined differently .</p>",
        "id": 247388204,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627418519
    },
    {
        "content": "<p>(so that the fourth of my examples does what I expect)</p>",
        "id": 247388332,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627418581
    },
    {
        "content": "<p>It basically just comes down to the fact that unionalls are hard to deal with</p>",
        "id": 247390305,
        "sender_full_name": "Mason Protter",
        "timestamp": 1627419539
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"kt\">Complex</span><span class=\"p\">{</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">},</span> <span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"nb\">im</span><span class=\"p\">)</span>\n<span class=\"mf\">1.0</span> <span class=\"o\">+</span> <span class=\"mf\">1.0</span><span class=\"nb\">im</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"kt\">Complex</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">T</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractFloat</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"nb\">im</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"p\">(</span><span class=\"kt\">Complex</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractFloat</span><span class=\"p\">)(</span><span class=\"o\">::</span><span class=\"kt\">Complex</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})(</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Number</span> <span class=\"n\">at</span> <span class=\"n\">boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">760</span>\n  <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})(</span><span class=\"o\">::</span><span class=\"kt\">AbstractChar</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">AbstractChar</span><span class=\"p\">,</span> <span class=\"kt\">Number</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"n\">char</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">50</span>\n  <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})(</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">TwicePrecision</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Number</span> <span class=\"n\">at</span> <span class=\"n\">twiceprecision</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">243</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"c\">#unused#::Type{Complex{T} where T&lt;:AbstractFloat}, x::Complex{Int64})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">number</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">7</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 247390425,
        "sender_full_name": "Mason Protter",
        "timestamp": 1627419604
    },
    {
        "content": "<p>So, you don't think it would be inconsistent or wrong if those <code>UnionAll</code> <code>MethodError</code> instead worked?</p>",
        "id": 247390828,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627419676
    },
    {
        "content": "<p>So long as <code>convert(T, x) isa T</code></p>",
        "id": 247391014,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627419713
    },
    {
        "content": "<p>I don't see any problem with it working. It seems to just be that someone defined some convenient methods, but decided that a fully general system here was too hard to do</p>",
        "id": 247391303,
        "sender_full_name": "Mason Protter",
        "timestamp": 1627419796
    },
    {
        "content": "<p>but I have no idea</p>",
        "id": 247391322,
        "sender_full_name": "Mason Protter",
        "timestamp": 1627419801
    },
    {
        "content": "<p>The situation that I am in is the following</p>\n<p>I have an <code>AbstractSet{CartesianIndex}</code> that is backed by an <code>Array{Bool}</code>. Roughly <code>in(elt, set) = set.array[elt]</code></p>",
        "id": 247392395,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627420257
    },
    {
        "content": "<p>I also have defined a <code>convert</code>method from any <code>AbstractSet</code> to <code>MySet</code>. But if I convert a <code>MySet</code> to a <code>MySet</code>, then I just want to use the same underlying array. So I defined a <code>convert</code> method. but this <code>convert</code> method does not handle <code>UnionAll</code>s correctly.  Because, as you said, that's hard.</p>",
        "id": 247392592,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627420366
    },
    {
        "content": "<p>I think I can fix my situation by replacing the definition </p>\n<p><code>Base.convert(::Type{T}, s::Foo) where {T &lt;: Foo} = T(s.x)</code></p>\n<p>with</p>\n<p><code>Base.convert(::Type{T}, s::Foo) where {T &lt;: Foo} = s ia T ? s : T(s.x)</code></p>\n<p>like <a href=\"https://github.com/JuliaLang/julia/blob/2fbeef8d712ff9151370fd27a3ae07ea8b2e740d/base/array.jl#L614\">https://github.com/JuliaLang/julia/blob/2fbeef8d712ff9151370fd27a3ae07ea8b2e740d/base/array.jl#L614</a></p>",
        "id": 247394446,
        "sender_full_name": "Gustavo Goretkin",
        "timestamp": 1627421463
    }
]