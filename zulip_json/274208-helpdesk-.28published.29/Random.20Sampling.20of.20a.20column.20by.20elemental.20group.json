[
    {
        "content": "<p>Let's say we have an array{Int64,1} with N=100 values</p>\n<p>I would like to create new array with a sub-sample from<br>\nthat pulls q values for every 5 number subset. </p>\n<p>example: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">StatsBase</span>\n<span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>q = a random number; so for each subset of 5 numbers, <br>\nq can be differ. </p>\n<p>Any suggestions out there?</p>",
        "id": 229084116,
        "sender_full_name": "QuBit",
        "timestamp": 1615024139
    },
    {
        "content": "<p>Can you make it more explicit?</p>\n<p>For simplicity, I use 3 instead of 5 in what follows.</p>\n<p>So, you are saying, that we have an array <code>[1, 2, 3, 4]</code> and we have all 3-length subsets</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"c\"># etc</span>\n</code></pre></div>\n<p>And you want to have sample of the length <code>q</code>. So if q = 2, then </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span>\n</code></pre></div>\n<p>is a valid sample. Am I correct?</p>",
        "id": 229085436,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615025405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Random.20Sampling.20of.20a.20column.20by.20elemental.20group/near/229085436\">said</a>:</p>\n<blockquote>\n<p>Can you make it more explicit?</p>\n<p>For simplicity, I use 3 instead of 5 in what follows.</p>\n<p>So, you are saying, that we have an array <code>[1, 2, 3, 4]</code> and we have all 3-length subsets</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"c\"># etc</span>\n</code></pre></div>\n<p>And you want to have sample of the length <code>q</code>. So if q = 2, then </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span>\n</code></pre></div>\n<p>is a valid sample. Am I correct?</p>\n</blockquote>\n<p>Hi Andrey, </p>\n<p>Yes you were correct. However, I <br>\nonly mentioned array to make <br>\nthings more simple. </p>\n<p>I am working with a dataframe and <br>\nwant to replace the sampled values<br>\nwith 'missing', then apply the <br>\nsample back to the original <br>\ndataframe. </p>\n<p>Any ideas?</p>",
        "id": 229090094,
        "sender_full_name": "QuBit",
        "timestamp": 1615029874
    },
    {
        "content": "<p>Sorry, is hard to say, since structure of the <code>Data</code> is unknown. And since you already have something working, what are you trying to achieve? Make it faster and/or shorter?</p>\n<p>Can you give an example in terms of example data? Like</p>\n<p>\"<br>\nAs an input I have</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span>\n</code></pre></div>\n<p>As an output I want</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>\"</p>\n<p>It would be easier to help you then. This way one can reproduce your situation and give some meaningful advice, otherwise we only have to try and guess.</p>",
        "id": 229090514,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615030277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Random.20Sampling.20of.20a.20column.20by.20elemental.20group/near/229090514\">said</a>:</p>\n<blockquote>\n<p>Sorry, is hard to say, since structure of the <code>Data</code> is unknown. And since you already have something working, what are you trying to achieve? Make it faster and/or shorter?</p>\n<p>Can you give an example in terms of example data? Like</p>\n<p>\"<br>\nAs an input I have</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span>\n</code></pre></div>\n<p>As an output I want</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>\"</p>\n<p>It would be easier to help you then. This way one can reproduce your situation and give some meaningful advice, otherwise we only have to try and guess.</p>\n</blockquote>\n<p>Hi Andrey, </p>\n<p>the original data = <br>\nID | Location | Value1 | Value2<br>\n1 |  Chad | 2.4 | 5.4<br>\n2 | Chile | 5.3 | 0.6<br>\n3 | Mexico | 3.3 | 9.4<br>\n4 | Anguilla | 3.5 | 7.1<br>\n5 | Bulgaria| 5.7 | 8.2<br>\n6 | Slovania | 6.7 | 3.9</p>\n<p>the sampled data  = <br>\nID | Location | Value1 | Value2<br>\n1 |  Chad | 2.4 | 5.4<br>\n4 | Anguilla | 3.5 | 7.1<br>\n6 | Slovania | 6.7 | 3.9</p>\n<p>I want to replace the columns in cols (:Value1, :Value2)<br>\nwith the word 'missing' in the 'sampled data' then apply <br>\nthis dataframe back into the original dataframe with the <br>\nnew values at the same id position. </p>\n<p>desired data frame= <br>\nID | Location | Value1 | Value2<br>\n1 |  Chad | missing | missing<br>\n2 | Chile | 5.3 | 0.6<br>\n3 | Mexico | 3.3 | 9.4<br>\n4 | Anguilla | missing | missing<br>\n5 | Bulgaria| 5.7 | 8.2<br>\n6 | Slovania | missing | missing</p>\n<p>Is this a better explanation?</p>",
        "id": 229091494,
        "sender_full_name": "QuBit",
        "timestamp": 1615031253
    },
    {
        "content": "<p>Well, you can do the following</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">ID</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n               <span class=\"o\">:</span><span class=\"n\">Location</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"s\">\"Chad\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chile\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mexico\"</span><span class=\"p\">,</span> <span class=\"s\">\"Anguilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bulgaria\"</span><span class=\"p\">,</span> <span class=\"s\">\"Slovania\"</span><span class=\"p\">],</span>\n               <span class=\"o\">:</span><span class=\"n\">Value1</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mf\">2.4</span><span class=\"p\">,</span> <span class=\"mf\">5.3</span><span class=\"p\">,</span> <span class=\"mf\">3.3</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">5.7</span><span class=\"p\">,</span> <span class=\"mf\">6.7</span><span class=\"p\">],</span>\n               <span class=\"o\">:</span><span class=\"n\">Value2</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mf\">5.4</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">9.4</span><span class=\"p\">,</span> <span class=\"mf\">7.1</span><span class=\"p\">,</span> <span class=\"mf\">8.2</span><span class=\"p\">,</span> <span class=\"mf\">3.9</span><span class=\"p\">])</span>\n\n<span class=\"n\">smp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">Value1</span> <span class=\"o\">=</span> <span class=\"n\">ifelse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kp\">in</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">smp</span><span class=\"p\">)),</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">Value1</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">Value2</span> <span class=\"o\">=</span> <span class=\"n\">ifelse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kp\">in</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">smp</span><span class=\"p\">)),</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">Value2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Then <code>df</code> looks exactly as you want</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n<span class=\"mi\">6</span><span class=\"n\">×4</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">ID</span>     <span class=\"n\">Location</span>  <span class=\"n\">Value1</span>     <span class=\"n\">Value2</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"n\">String</span>    <span class=\"kt\">Float64</span><span class=\"o\">?</span>   <span class=\"kt\">Float64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼───────────────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">Chad</span>      <span class=\"n\">missing</span>    <span class=\"n\">missing</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">Chile</span>           <span class=\"mf\">5.3</span>        <span class=\"mf\">0.6</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">Mexico</span>          <span class=\"mf\">3.3</span>        <span class=\"mf\">9.4</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">4</span>  <span class=\"n\">Anguilla</span>  <span class=\"n\">missing</span>    <span class=\"n\">missing</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">5</span>  <span class=\"n\">Bulgaria</span>        <span class=\"mf\">5.7</span>        <span class=\"mf\">8.2</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span>     <span class=\"mi\">6</span>  <span class=\"n\">Slovania</span>  <span class=\"n\">missing</span>    <span class=\"n\">missing</span>\n</code></pre></div>",
        "id": 229097124,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615036497
    },
    {
        "content": "<p>You can do it for arbitrary number of columns with </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">column</span> <span class=\"kp\">in</span> <span class=\"p\">[</span><span class=\"o\">:</span><span class=\"n\">Value1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">Value2</span><span class=\"p\">]</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ifelse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kp\">in</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">smp</span><span class=\"p\">)),</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"p\">])</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 229097288,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615036665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Random.20Sampling.20of.20a.20column.20by.20elemental.20group/near/229097124\">said</a>:</p>\n<blockquote>\n<p>Well, you can do the following</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">ID</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n               <span class=\"o\">:</span><span class=\"n\">Location</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"s\">\"Chad\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chile\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mexico\"</span><span class=\"p\">,</span> <span class=\"s\">\"Anguilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bulgaria\"</span><span class=\"p\">,</span> <span class=\"s\">\"Slovania\"</span><span class=\"p\">],</span>\n               <span class=\"o\">:</span><span class=\"n\">Value1</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mf\">2.4</span><span class=\"p\">,</span> <span class=\"mf\">5.3</span><span class=\"p\">,</span> <span class=\"mf\">3.3</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">5.7</span><span class=\"p\">,</span> <span class=\"mf\">6.7</span><span class=\"p\">],</span>\n               <span class=\"o\">:</span><span class=\"n\">Value2</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mf\">5.4</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">9.4</span><span class=\"p\">,</span> <span class=\"mf\">7.1</span><span class=\"p\">,</span> <span class=\"mf\">8.2</span><span class=\"p\">,</span> <span class=\"mf\">3.9</span><span class=\"p\">])</span>\n\n<span class=\"n\">smp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">Value1</span> <span class=\"o\">=</span> <span class=\"n\">ifelse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kp\">in</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">smp</span><span class=\"p\">)),</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">Value1</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">Value2</span> <span class=\"o\">=</span> <span class=\"n\">ifelse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kp\">in</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">smp</span><span class=\"p\">)),</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">Value2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Then <code>df</code> looks exactly as you want</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n<span class=\"mi\">6</span><span class=\"n\">×4</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">ID</span>     <span class=\"n\">Location</span>  <span class=\"n\">Value1</span>     <span class=\"n\">Value2</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"n\">String</span>    <span class=\"kt\">Float64</span><span class=\"o\">?</span>   <span class=\"kt\">Float64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼───────────────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">Chad</span>      <span class=\"n\">missing</span>    <span class=\"n\">missing</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">Chile</span>           <span class=\"mf\">5.3</span>        <span class=\"mf\">0.6</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">Mexico</span>          <span class=\"mf\">3.3</span>        <span class=\"mf\">9.4</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">4</span>  <span class=\"n\">Anguilla</span>  <span class=\"n\">missing</span>    <span class=\"n\">missing</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">5</span>  <span class=\"n\">Bulgaria</span>        <span class=\"mf\">5.7</span>        <span class=\"mf\">8.2</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span>     <span class=\"mi\">6</span>  <span class=\"n\">Slovania</span>  <span class=\"n\">missing</span>    <span class=\"n\">missing</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Excellent Andrey !  -- thank you much. <br>\nI can replace smp with Data[:, :Id] instead <br>\nof listing out the indices?</p>\n<p>Thanks again!</p>",
        "id": 229097400,
        "sender_full_name": "QuBit",
        "timestamp": 1615036757
    },
    {
        "content": "<p>Of course, it requres indices of sampled data, but they are easily extracted from sampled data</p>",
        "id": 229097424,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615036800
    },
    {
        "content": "<p>Ha, I was to late to write comment :-)</p>",
        "id": 229097504,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615036831
    },
    {
        "content": "<p>Well, it's better to use <code>DataSample.ID</code> or <code>DataSample[!, :id]</code> instead of <code>DataSample[:, :id]</code></p>",
        "id": 229097574,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615036887
    },
    {
        "content": "<p>No one needs extra allocations, no matter how tiny they are.</p>",
        "id": 229097578,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615036913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Random.20Sampling.20of.20a.20column.20by.20elemental.20group/near/229097578\">said</a>:</p>\n<blockquote>\n<p>No one needs extra allocations, no matter how tiny they are.</p>\n</blockquote>\n<p>Testing this out on my DataFrame now. <br>\nExcellent coding. clean, appreciated.</p>",
        "id": 229097650,
        "sender_full_name": "QuBit",
        "timestamp": 1615036984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390081\">qu bit</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Random.20Sampling.20of.20a.20column.20by.20elemental.20group/near/229097650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Random.20Sampling.20of.20a.20column.20by.20elemental.20group/near/229097578\">said</a>:</p>\n<blockquote>\n<p>No one needs extra allocations, no matter how tiny they are.</p>\n</blockquote>\n<p>Testing this out on my DataFrame now. <br>\nExcellent coding. clean, appreciated.</p>\n</blockquote>\n<p>Hi Andrey: </p>\n<p>Implemented:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"n\">Slice</span> <span class=\"o\">=</span> <span class=\"n\">DataMod</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"p\">]</span>\n<span class=\"n\">SMP</span> <span class=\"o\">=</span> <span class=\"n\">DataSample</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"n\">Id</span><span class=\"p\">]</span>\n<span class=\"n\">Slice</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ifelse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kp\">in</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">Slice</span><span class=\"o\">.</span><span class=\"n\">Id</span><span class=\"p\">,</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">SMP</span><span class=\"p\">)),</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">Slice</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I suppose I could have used DataMod instead of Slice, <br>\nbut wanted to keep the former dataframe for<br>\nback-up</p>\n<p>Could you point me to the resource that describes<br>\nthe Ref() method? </p>\n<p>Thanks</p>",
        "id": 229099406,
        "sender_full_name": "QuBit",
        "timestamp": 1615038502
    },
    {
        "content": "<p><code>Ref</code> trick is a usual trick, when you want to use broadcasting, but one of the objects is an array, which should be treated as a single element.</p>\n<p><a href=\"https://discourse.julialang.org/t/how-to-broadcast-over-only-certain-function-arguments/19274\">https://discourse.julialang.org/t/how-to-broadcast-over-only-certain-function-arguments/19274</a><br>\n<a href=\"https://discourse.julialang.org/t/marking-types-as-scalar-for-broadcasting-ref-vs-tuple/29105\">https://discourse.julialang.org/t/marking-types-as-scalar-for-broadcasting-ref-vs-tuple/29105</a><br>\n<a href=\"https://stackoverflow.com/questions/51993802/what-is-the-connection-between-refs-and-broadcasting-in-julia\">https://stackoverflow.com/questions/51993802/what-is-the-connection-between-refs-and-broadcasting-in-julia</a></p>",
        "id": 229102382,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615041168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Random.20Sampling.20of.20a.20column.20by.20elemental.20group/near/229102382\">said</a>:</p>\n<blockquote>\n<p><code>Ref</code> trick is a usual trick, when you want to use broadcasting, but one of the objects is an array, which should be treated as a single element.</p>\n<p><a href=\"https://discourse.julialang.org/t/how-to-broadcast-over-only-certain-function-arguments/19274\">https://discourse.julialang.org/t/how-to-broadcast-over-only-certain-function-arguments/19274</a><br>\n<a href=\"https://discourse.julialang.org/t/marking-types-as-scalar-for-broadcasting-ref-vs-tuple/29105\">https://discourse.julialang.org/t/marking-types-as-scalar-for-broadcasting-ref-vs-tuple/29105</a><br>\n<a href=\"https://stackoverflow.com/questions/51993802/what-is-the-connection-between-refs-and-broadcasting-in-julia\">https://stackoverflow.com/questions/51993802/what-is-the-connection-between-refs-and-broadcasting-in-julia</a></p>\n</blockquote>\n<p>Understood -- in our test case here Ref() could have acted upon<br>\nRef([1,4,6]), but is more legible with the single variable as the <br>\nelement for larger test cases.</p>",
        "id": 229103194,
        "sender_full_name": "QuBit",
        "timestamp": 1615041890
    }
]