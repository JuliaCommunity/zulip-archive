[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Relate</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">Relate</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div>\n<p>Especially <code>convert(Int64, Relate[!, 1])</code> is exactly what the error says, that tries to convert the whole column into a number.<br>\nDid you want to change the eltype to <code>Int</code>? </p>\n<p>Also, what are all the <code>map</code>s supposed to do? What is the structure of Relate? Maybe we can work from this forwards.</p>",
        "id": 228480742,
        "sender_full_name": "Florian Große",
        "timestamp": 1614717265
    },
    {
        "content": "<p>Suppose you have:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">((</span><span class=\"n\">as</span> <span class=\"o\">=</span> <span class=\"kt\">Any</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mf\">10.</span><span class=\"o\">..</span><span class=\"p\">],</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"kt\">Any</span><span class=\"p\">[</span><span class=\"s\">\"Col_</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"s\">\"</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"kp\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">]))</span>\n<span class=\"mi\">10</span><span class=\"n\">×3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">as</span>   <span class=\"n\">bs</span>         <span class=\"n\">names</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Any</span>  <span class=\"kt\">Float64</span>    <span class=\"kt\">Any</span>\n<span class=\"n\">─────┼────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"mi\">1</span>    <span class=\"mf\">0.452431</span>   <span class=\"n\">Col_1</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"mi\">2</span>    <span class=\"mf\">0.965297</span>   <span class=\"n\">Col_2</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"mi\">3</span>    <span class=\"mf\">0.0673582</span>  <span class=\"n\">Col_3</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"mi\">4</span>    <span class=\"mf\">0.319082</span>   <span class=\"n\">Col_4</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"mi\">5</span>    <span class=\"mf\">0.53456</span>    <span class=\"n\">Col_5</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span> <span class=\"mi\">6</span>    <span class=\"mf\">0.175433</span>   <span class=\"n\">Col_6</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span> <span class=\"mi\">7</span>    <span class=\"mf\">0.131868</span>   <span class=\"n\">Col_7</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span> <span class=\"mi\">8</span>    <span class=\"mf\">0.996933</span>   <span class=\"n\">Col_8</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span> <span class=\"mi\">9</span>    <span class=\"mf\">0.275728</span>   <span class=\"n\">Col_9</span>\n  <span class=\"mi\">10</span> <span class=\"n\">│</span> <span class=\"mi\">10</span>   <span class=\"mf\">0.326396</span>   <span class=\"n\">Col_10</span>\n</code></pre></div>\n<p>What about:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">as</span> <span class=\"o\">=</span> <span class=\"n\">convert</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n<span class=\"mi\">10</span><span class=\"n\">×3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">as</span>     <span class=\"n\">bs</span>         <span class=\"n\">names</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>    <span class=\"n\">String</span>\n<span class=\"n\">─────┼──────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"mf\">0.452431</span>   <span class=\"n\">Col_1</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"mf\">0.965297</span>   <span class=\"n\">Col_2</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"mf\">0.0673582</span>  <span class=\"n\">Col_3</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">4</span>  <span class=\"mf\">0.319082</span>   <span class=\"n\">Col_4</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">5</span>  <span class=\"mf\">0.53456</span>    <span class=\"n\">Col_5</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span>     <span class=\"mi\">6</span>  <span class=\"mf\">0.175433</span>   <span class=\"n\">Col_6</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span>     <span class=\"mi\">7</span>  <span class=\"mf\">0.131868</span>   <span class=\"n\">Col_7</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span>     <span class=\"mi\">8</span>  <span class=\"mf\">0.996933</span>   <span class=\"n\">Col_8</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span>     <span class=\"mi\">9</span>  <span class=\"mf\">0.275728</span>   <span class=\"n\">Col_9</span>\n  <span class=\"mi\">10</span> <span class=\"n\">│</span>    <span class=\"mi\">10</span>  <span class=\"mf\">0.326396</span>   <span class=\"n\">Col_10</span>\n</code></pre></div>",
        "id": 228485579,
        "sender_full_name": "Florian Große",
        "timestamp": 1614719161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383122\">Florian Große</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Coverting.20Array.7BAny.2C1.7D.20Column.20Data.20Types/near/228485579\">said</a>:</p>\n<blockquote>\n<p>Suppose you have:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">((</span><span class=\"n\">as</span> <span class=\"o\">=</span> <span class=\"kt\">Any</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mf\">10.</span><span class=\"o\">..</span><span class=\"p\">],</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"kt\">Any</span><span class=\"p\">[</span><span class=\"s\">\"Col_</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"s\">\"</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"kp\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">]))</span>\n<span class=\"mi\">10</span><span class=\"n\">×3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">as</span>   <span class=\"n\">bs</span>         <span class=\"n\">names</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Any</span>  <span class=\"kt\">Float64</span>    <span class=\"kt\">Any</span>\n<span class=\"n\">─────┼────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"mi\">1</span>    <span class=\"mf\">0.452431</span>   <span class=\"n\">Col_1</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"mi\">2</span>    <span class=\"mf\">0.965297</span>   <span class=\"n\">Col_2</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"mi\">3</span>    <span class=\"mf\">0.0673582</span>  <span class=\"n\">Col_3</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"mi\">4</span>    <span class=\"mf\">0.319082</span>   <span class=\"n\">Col_4</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"mi\">5</span>    <span class=\"mf\">0.53456</span>    <span class=\"n\">Col_5</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span> <span class=\"mi\">6</span>    <span class=\"mf\">0.175433</span>   <span class=\"n\">Col_6</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span> <span class=\"mi\">7</span>    <span class=\"mf\">0.131868</span>   <span class=\"n\">Col_7</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span> <span class=\"mi\">8</span>    <span class=\"mf\">0.996933</span>   <span class=\"n\">Col_8</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span> <span class=\"mi\">9</span>    <span class=\"mf\">0.275728</span>   <span class=\"n\">Col_9</span>\n  <span class=\"mi\">10</span> <span class=\"n\">│</span> <span class=\"mi\">10</span>   <span class=\"mf\">0.326396</span>   <span class=\"n\">Col_10</span>\n</code></pre></div>\n<p>What about:</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">as</span> <span class=\"o\">=</span> <span class=\"n\">convert</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n<span class=\"mi\">10</span><span class=\"n\">×3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">as</span>     <span class=\"n\">bs</span>         <span class=\"n\">names</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>    <span class=\"n\">String</span>\n<span class=\"n\">─────┼──────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"mf\">0.452431</span>   <span class=\"n\">Col_1</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"mf\">0.965297</span>   <span class=\"n\">Col_2</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"mf\">0.0673582</span>  <span class=\"n\">Col_3</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">4</span>  <span class=\"mf\">0.319082</span>   <span class=\"n\">Col_4</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">5</span>  <span class=\"mf\">0.53456</span>    <span class=\"n\">Col_5</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span>     <span class=\"mi\">6</span>  <span class=\"mf\">0.175433</span>   <span class=\"n\">Col_6</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span>     <span class=\"mi\">7</span>  <span class=\"mf\">0.131868</span>   <span class=\"n\">Col_7</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span>     <span class=\"mi\">8</span>  <span class=\"mf\">0.996933</span>   <span class=\"n\">Col_8</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span>     <span class=\"mi\">9</span>  <span class=\"mf\">0.275728</span>   <span class=\"n\">Col_9</span>\n  <span class=\"mi\">10</span> <span class=\"n\">│</span>    <span class=\"mi\">10</span>  <span class=\"mf\">0.326396</span>   <span class=\"n\">Col_10</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"383122\">@Florian Große</span> , was able to implement: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"n\">Relate</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">convert</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">Relate</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">Relate</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">float</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">Relate</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"n\">Relate</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">Relate</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">Relate</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>When I hover over the dataframe in the output, <br>\nthe float fields do not show the data type. </p>\n<p>Any suggestion?</p>",
        "id": 228489038,
        "sender_full_name": "QuBit",
        "timestamp": 1614720470
    },
    {
        "content": "<p>I don't really understand what you mean by \"hover over\". Is this code in a Pluto notebook?</p>",
        "id": 228489740,
        "sender_full_name": "Florian Große",
        "timestamp": 1614720748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383122\">Florian Große</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Coverting.20Array.7BAny.2C1.7D.20Column.20Data.20Types/near/228489740\">said</a>:</p>\n<blockquote>\n<p>I don't really understand what you mean by \"hover over\". Is this code in a Pluto notebook?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"383122\">@Florian Große</span> ,  yes it is. v1.5.3</p>",
        "id": 228491301,
        "sender_full_name": "QuBit",
        "timestamp": 1614721380
    },
    {
        "content": "<p>what does <code>typeof.(df[!,name] for name in names(df))</code> yield for you after conversion?</p>",
        "id": 228492891,
        "sender_full_name": "Florian Große",
        "timestamp": 1614721998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383122\">Florian Große</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Coverting.20Array.7BAny.2C1.7D.20Column.20Data.20Types/near/228492891\">said</a>:</p>\n<blockquote>\n<p>what does <code>typeof.(df[!,name] for name in names(df))</code> yield for you after conversion?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"383122\">@Florian Große</span> , the following is returned</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">DataType</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">Missing</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 228494744,
        "sender_full_name": "QuBit",
        "timestamp": 1614722710
    },
    {
        "content": "<p>too bad, can't make it visible myself</p>",
        "id": 228495045,
        "sender_full_name": "Florian Große",
        "timestamp": 1614722827
    },
    {
        "content": "<p>thanks, so the types appear to be correct. Does it matter whether you see them or not?</p>",
        "id": 228495278,
        "sender_full_name": "Florian Große",
        "timestamp": 1614722918
    },
    {
        "content": "<p>If it does, it's probably something for the <a class=\"stream\" data-stream-id=\"243342\" href=\"/#narrow/stream/243342-pluto.2Ejl\">#pluto.jl</a> channel</p>",
        "id": 228495332,
        "sender_full_name": "Florian Große",
        "timestamp": 1614722942
    },
    {
        "content": "<p>(assuming the problem is related to Pluto, I still don't exactly understand what you mean by hover over)</p>",
        "id": 228495415,
        "sender_full_name": "Florian Große",
        "timestamp": 1614722979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383122\">Florian Große</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Coverting.20Array.7BAny.2C1.7D.20Column.20Data.20Types/near/228495332\">said</a>:</p>\n<blockquote>\n<p>If it does, it's probably something for the <a class=\"stream\" data-stream-id=\"243342\" href=\"/#narrow/stream/243342-pluto.2Ejl\">#pluto.jl</a> channel</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"383122\">@Florian Große</span>  -- Thank you I will reach out to them about it. </p>\n<p>What I mean is, once you generate an output, in this case<br>\na dataframe, you can move your mouse over the column <br>\nheadings and see the eltype for each field.</p>",
        "id": 228495704,
        "sender_full_name": "QuBit",
        "timestamp": 1614723079
    },
    {
        "content": "<p>I see, that's nice, I never tried that</p>",
        "id": 228495865,
        "sender_full_name": "Florian Große",
        "timestamp": 1614723142
    },
    {
        "content": "<p>Have you tried using <code>infer_eltypes=true</code> so that <a href=\"https://github.com/search?q=XLSX.jl&amp;type=Repositories\">XLSX.jl</a> just infers the types for you?</p>",
        "id": 228576566,
        "sender_full_name": "Nils",
        "timestamp": 1614771165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Coverting.20Array.7BAny.2C1.7D.20Column.20Data.20Types/near/228576566\">said</a>:</p>\n<blockquote>\n<p>Have you tried using <code>infer_eltypes=true</code> so that <a href=\"https://github.com/search?q=XLSX.jl&amp;type=Repositories\">XLSX.jl</a> just infers the types for you?</p>\n</blockquote>\n<p>Excellent -- thank you <span class=\"user-mention\" data-user-id=\"269318\">@Nils</span> , this worked. </p>\n<p>I used</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">DeadAvenger</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">xl</span><span class=\"o\">.</span><span class=\"n\">readtable</span><span class=\"p\">(</span><span class=\"s\">\"Data.xlsx\"</span><span class=\"p\">,</span> <span class=\"s\">\"IronMan\"</span><span class=\"p\">,</span>\n            <span class=\"n\">infer_eltypes</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Might you know of a website that lists the parameters for <br>\ncommon methods? I posted the question to the general <br>\nboard previously. </p>\n<p>Thank you,</p>",
        "id": 228604156,
        "sender_full_name": "QuBit",
        "timestamp": 1614782997
    },
    {
        "content": "<p>The answer that was given to you in the other thread stands: most packages have documentation, and while that is not always complete, it is pretty good for the packages you're deling with (DataFrames, CSV, XLSX). Here it is for <code>XLSX.readtable</code>: <a href=\"https://felipenoris.github.io/XLSX.jl/dev/api/#XLSX.readtable\">https://felipenoris.github.io/XLSX.jl/dev/api/#XLSX.readtable</a></p>",
        "id": 228623396,
        "sender_full_name": "Nils",
        "timestamp": 1614789392
    }
]