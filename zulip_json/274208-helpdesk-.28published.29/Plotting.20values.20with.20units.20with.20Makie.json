[
    {
        "content": "<p>I am trying to plot a vector with Quanities with Makie. I tried defining the following, where getval is a custum function that returns the val field of its input:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Quantity</span><span class=\"p\">},</span> <span class=\"n\">ys</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Quantity</span><span class=\"p\">};</span> <span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"o\">|&gt;</span><span class=\"n\">getval</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"o\">|&gt;</span><span class=\"n\">getval</span><span class=\"p\">;</span> <span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Quantity</span><span class=\"p\">};</span> <span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"o\">|&gt;</span><span class=\"n\">getval</span><span class=\"p\">;</span> <span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Quantity</span><span class=\"p\">},</span> <span class=\"n\">ys</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">;</span> <span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"o\">|&gt;</span><span class=\"n\">getval</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">;</span> <span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>However, based on the line that errored in the stacktrace, I am able to deduct that I should look into<br>\n<a href=\"https://github.com/JuliaPlots/AbstractPlotting.jl/blob/master/src/recipes.jl\">https://github.com/JuliaPlots/AbstractPlotting.jl/blob/master/src/recipes.jl</a><br>\n, where I find:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"c\"># All plot types</span>\n    <span class=\"n\">convert_arguments</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractPlot</span><span class=\"p\">},</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">MyType</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">convert_arguments</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n    <span class=\"c\"># Only for scatter plots</span>\n    <span class=\"n\">convert_arguments</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"o\">&lt;:</span><span class=\"kt\">Scatter</span><span class=\"p\">},</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">MyType</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">convert_arguments</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I do not really understand what to make of the examples. I have tried defining<br>\n<code>convert_arguments(P::Type{&lt;:Scatter}, x::Quantity, y::Quantity) = convert_arguments(P, getval(x), getval(y))</code><br>\nand<br>\n<code>convert_arguments(P::Type{&lt;:Scatter}, x::Quantity) = convert_arguments(P, getval(x))</code><br>\n, but without luck.</p>\n<p>Any good ideas on how to plot values of type Quantity with Makie?</p>",
        "id": 238432426,
        "sender_full_name": "KronosTheLate",
        "timestamp": 1620804309
    },
    {
        "content": "<p>The recipe system is not working basically. I have some open issues there where you can learn more.</p>",
        "id": 238451054,
        "sender_full_name": "JÃºlio Hoffimann",
        "timestamp": 1620814764
    },
    {
        "content": "<p>I reckon at this stage your best option is to always explicitly strip the unit and add it to the labels... If you want to go the recipe way, maybe <a href=\"https://github.com/search?q=UnitfulRecipes.jl&amp;type=Repositories\">UnitfulRecipes.jl</a> can serve as a guide, although the internals of <a href=\"https://github.com/search?q=Plots.jl&amp;type=Repositories\">Plots.jl</a> are quite different so I'm pretty sure you can't translate everything to Makie...</p>",
        "id": 238468182,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1620824108
    }
]