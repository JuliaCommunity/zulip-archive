[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272599\">Fredrik Bagge Carlson</span> </p>\n<p>Thanks for sharing. </p>\n<p>I wanted to extend the question a little<br>\nand was curious if the detectOutliers()<br>\nmethod could be used to remove rows<br>\nfrom a dataFrame  based on row values<br>\nof another DataFrame. </p>\n<p>An initial approach: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">mysetdiff</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"n\">eltype</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)}(</span><span class=\"n\">undef</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"nd\">@inbounds</span> <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"kp\">in</span> <span class=\"n\">y</span>\n        <span class=\"n\">el</span> <span class=\"o\">âˆˆ</span> <span class=\"n\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">continue</span>\n        <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">res</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Or if possible: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">Vector</span> <span class=\"n\">of</span> <span class=\"n\">Row</span> <span class=\"n\">Value</span> <span class=\"n\">Indices</span><span class=\"p\">)</span>\n<span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">df1</span><span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">end</span><span class=\"p\">],</span> <span class=\"o\">:</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>How can I delete rows from DF1<br>\nbased on rows of DF2 where the <br>\nelements of DF2 are outliers in <br>\nDF1? </p>\n<p>I believe <a href=\"https://github.com/search?q=Query.jl&amp;type=Repositories\">Query.jl</a> has the least <br>\ncomputational expensive method<br>\nto approach this with @filter or <br>\n@join, would you agree? </p>\n<p><span class=\"user-mention\" data-user-id=\"272771\">@Andrey Oskin</span> </p>\n<p>Best,</p>",
        "id": 231713528,
        "sender_full_name": "QuBit",
        "timestamp": 1616622025
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231734961,
        "sender_full_name": "QuBit",
        "timestamp": 1616635552
    },
    {
        "content": "<p>Not quite sure what you want, but it looks like typical use case for antijoin</p>",
        "id": 231746640,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1616646772
    },
    {
        "content": "<p><a href=\"https://dataframes.juliadata.org/stable/man/joins/#Database-Style-Joins\">https://dataframes.juliadata.org/stable/man/joins/#Database-Style-Joins</a></p>",
        "id": 231746692,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1616646836
    },
    {
        "content": "<p>But you need a key to join them of course</p>",
        "id": 231746765,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1616646868
    }
]