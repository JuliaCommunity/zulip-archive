[
    {
        "content": "<p>A nice feature of <code>map</code> is that it preserves the container type while potentially changing the element type. For example, if you map over a <code>Vector</code>, you get back a <code>Vector</code>, and if you map over a <code>StaticVector</code>, you get back another <code>StaticVector</code>. This is a good reason to prefer <code>map</code> over list comprehensions in some cases.</p>\n<p>I'd like the same thing, but for dictionaries. Here's what I'm currently doing. I define a helper function</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">roottype</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">T</span> <span class=\"k\">isa</span> <span class=\"kt\">UnionAll</span> <span class=\"o\">?</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">wrapper</span>\n</code></pre></div>\n<p>and then I write something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">mapvals</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">::</span><span class=\"kt\">D</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">D</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">roottype</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">))(</span><span class=\"n\">k</span> <span class=\"o\">=&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This seems to work but it feels bad. Is there a better way?</p>",
        "id": 258142925,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1634620741
    },
    {
        "content": "<p>Have you seen <a href=\"https://github.com/search?q=Dictionaries.jl&amp;type=Repositories\">Dictionaries.jl</a>?</p>",
        "id": 258159351,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1634632305
    },
    {
        "content": "<p>It looks very nice, but it's a replacement for the standard dictionary types, right? I was looking for something that would work with <code>Dict</code>, <code>OrderedDict</code>, and other <code>AbstractDict</code> types.</p>",
        "id": 258226679,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1634660951
    },
    {
        "content": "<p>This would be a nice thing to have. I can’t really think of away to do it other than what you’ve suggested though unfortunately.</p>",
        "id": 258227723,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634661314
    },
    {
        "content": "<p>I find the situation with <a href=\"https://github.com/search?q=Dictionaries.jl&amp;type=Repositories\">Dictionaries.jl</a> rather frustrating.  I agree it is better than <code>Base</code> dictionaries, but so much is already designed to use <code>Base</code> dictionaries that I am hesitant to use it.</p>",
        "id": 258227958,
        "sender_full_name": "Expanding Man",
        "timestamp": 1634661391
    },
    {
        "content": "<p>That is my feeling as well.</p>",
        "id": 258228396,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1634661543
    }
]