[
    {
        "content": "<p>I have a 3x3x3 array and I'd like to use \"labels\" for indexing. I've looked at most of the implementations out there, for example <a href=\"https://github.com/mcabbott/AxisKeys.jl\">AxisKeys.jl</a>. However, I'd like to do indexing with the labels, and no package seems to support it. From AxisKeys' readme:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">AxisKeys</span>\n<span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Int8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">.|&gt;</span><span class=\"w\"> </span><span class=\"n\">abs</span><span class=\"p\">;</span>\n<span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">KeyedArray</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">channel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"ss\">:left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:right</span><span class=\"p\">],</span>\n<span class=\"w\">                     </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2.5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">),</span>\n<span class=\"w\">                     </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">33</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>One can index as <code>A[iter=1]</code> or lookup as <code>A(iter=31)</code>. I really want to index as <code>A[iter=31]</code>, though (I'm not too concerned about performance in this particular case). <code>AxisArrays</code> is also quite clunky for this use case.</p>\n<p><a href=\"https://github.com/andyferris/Dictionaries.jl\">Dictionaries.jl</a> is suggested as an alternative to do the kind of indexing I want. I just can't figure out how to do it for multidimensional arrays, though. If it is really possible, does anyone have an example?</p>",
        "id": 342202767,
        "sender_full_name": "mbaz",
        "timestamp": 1678933188
    },
    {
        "content": "<p>I don't think it's possible to do multidimensionality in <a href=\"https://github.com/search?q=Dictionaries.jl&amp;type=Repositories\">Dictionaries.jl</a> though there are some discussions in issues about it</p>",
        "id": 342214213,
        "sender_full_name": "jar",
        "timestamp": 1678940912
    },
    {
        "content": "<p>AIU, when you start indexing by labels instead of sequential integer keys, the thing stops being an abstractarray. So, a dictionary is totally fine as long as you don't need array functionality:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dictionary</span><span class=\"p\">([(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"ss\">:left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"ss\">:right</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">])</span>\n<span class=\"n\">d</span><span class=\"p\">[(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"ss\">:left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">)]</span><span class=\"w\">  </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>But when array functionality is needed (eg slicing), it's probably better to stay within the realm of actual arrays. This means, indexing goes by sequential indices.<br>\nWhy <code>AxisKeys</code>' label lookup with round brackets instead of square brackets doesn't work for your usecase?</p>",
        "id": 342286580,
        "sender_full_name": "aplavin",
        "timestamp": 1678967246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373536\">Alexander</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/AxisKeys.20and.20Dictionaries/near/342286580\">said</a>:</p>\n<blockquote>\n<p>But when array functionality is needed (eg slicing), it's probably better to stay within the realm of actual arrays. This means, indexing goes by sequential indices.</p>\n</blockquote>\n<p>It can be done, but it's slow. In my particular use case, I'd rather have convenience than speed, though.</p>\n<blockquote>\n<p>Why <code>AxisKeys</code>' label lookup with round brackets instead of square brackets doesn't work for your usecase?</p>\n</blockquote>\n<p>The reason is that lookup doesn't work for assignment. I'd like to be able to do <code>A[iter=31] = ...</code>.</p>",
        "id": 342303187,
        "sender_full_name": "mbaz",
        "timestamp": 1678971517
    },
    {
        "content": "<p>I had missed <a href=\"https://github.com/davidavdav/NamedArrays.jl\">NamedArrays.jl</a>, found it in an issue in <a href=\"https://github.com/search?q=Dictionaries.jl&amp;type=Repositories\">Dictionaries.jl</a>. It is actually the closest to what I'm looking for.</p>",
        "id": 342327478,
        "sender_full_name": "mbaz",
        "timestamp": 1678976655
    },
    {
        "content": "<p>There's also <a href=\"https://github.com/invenia/NamedDims.jl\">NamedDims.jl</a> and <a href=\"https://github.com/rafaqz/DimensionalData.jl\">DimensionalData.jl</a></p>",
        "id": 342398339,
        "sender_full_name": "Sundar R",
        "timestamp": 1678992874
    },
    {
        "content": "<blockquote>\n<p>The reason is that lookup doesn't work for assignment. I'd like to be able to do A[iter=31] = ....</p>\n</blockquote>\n<p>Setting the whole slice:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"ss\">:left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">.=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Setting a single value:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\"># note the trailing colon</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"ss\">:left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">.=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Unfortunately, specifying dims by names doesn't work in the latter case. This isn't fundamental though, see <a href=\"https://github.com/mcabbott/AxisKeys.jl/pull/110\">https://github.com/mcabbott/AxisKeys.jl/pull/110</a> (and upvote it :) ).</p>",
        "id": 342399269,
        "sender_full_name": "aplavin",
        "timestamp": 1678993183
    },
    {
        "content": "<p>Upvoted</p>",
        "id": 342400839,
        "sender_full_name": "mbaz",
        "timestamp": 1678993597
    },
    {
        "content": "<p>I'm implementing my own solution, just for fun... so far I got this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">CatalogArrays</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">2×3 Matrix{Float64}:</span>\n<span class=\"go\"> 0.456233  0.322689  0.501975</span>\n<span class=\"go\"> 0.943775  0.160793  0.482612</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CatalogArray</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">snr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">.2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">.4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">.6</span><span class=\"p\">));</span>\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"go\">0.16079269059283696</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">snr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.4</span><span class=\"p\">]</span>\n<span class=\"go\">0.16079269059283696</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">snr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">]</span>\n<span class=\"go\">0.16079269059283696</span>\n</code></pre></div>\n<p>Now I <em>just</em> need to implement slicing and <code>setindex!</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 342441193,
        "sender_full_name": "mbaz",
        "timestamp": 1679009106
    }
]