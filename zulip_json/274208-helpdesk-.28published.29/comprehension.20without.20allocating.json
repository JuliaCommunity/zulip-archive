[
    {
        "content": "<p>A comprehension by default creates an vector.<br>\nSometimes though I use comprehension as an one-line mutating procedure.<br>\ne.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"c\"># my one-liner mutating comprehension</span><span class=\"w\"></span>\n<span class=\"n\">deletespec!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">deleteat!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Clearly here, I am not interested in the result.<br>\nI just want the mutating operation to happen.</p>\n<p>Calling it will return a vector, which means something got allocated, that I didn't really need</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">deletespec!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"go\">[[2, 4, 6, 7, 8, 9, 10, 11, 12, 13  …  91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 4, 6, 7, 8, 9, 10, 11, 12, 13  …  91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 4, 6, 7, 8, 9, 10, 11, 12, 13  …  91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]</span>\n</code></pre></div>\n<p>Is there a way to produce comprehensions that return nothing, i.e. allocate nothing ?<br>\nShould I even worry about this performance-wise ?</p>\n<p><em>PS I know what I am doing to delete multiple indices is wrong and there are better ways to do that, but please don't focus on this.</em></p>",
        "id": 320963071,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1673536598
    },
    {
        "content": "<p>A comprehension by default creates an vector.<br>\nSometimes though I use comprehension as an one-line mutating procedure.<br>\ne.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"c\"># my one-liner mutating comprehension</span><span class=\"w\"></span>\n<span class=\"n\">deletespec!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">deleteat!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Clearly here, I am not interested in the result.<br>\nI just want the mutating operation to happen.</p>\n<p>Calling it will return a vector, which means something got allocated, that I didn't really need</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">deletespec!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"go\">[[2, 4, 6, 7, 8, 9, 10, 11, 12, 13  …  91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 4, 6, 7, 8, 9, 10, 11, 12, 13  …  91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 4, 6, 7, 8, 9, 10, 11, 12, 13  …  91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]</span>\n</code></pre></div>\n<p>Is there a way to produce comprehensions that return nothing, i.e. allocate nothing ?<br>\nShould I even worry about this performance-wise ?</p>\n<p><em>PS I know what I am doing to delete multiple indices is wrong and there are better ways to do that, but please don't focus on this.</em></p>",
        "id": 320963073,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1673536598
    },
    {
        "content": "<p>Would a generator work here?</p>",
        "id": 320963530,
        "sender_full_name": "mbaz",
        "timestamp": 1673536715
    },
    {
        "content": "<p>you mean writing <code>(deleteat!(a, x) for x in v)</code> instead of <code>[deleteat!(a, x) for x in v]</code>. It would work but again it feels like there is some effort going somewhere (e.g. constructing the generator) which is unneeded.</p>",
        "id": 320966858,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1673537501
    },
    {
        "content": "<p>wait no, it wouldn't work.</p>",
        "id": 320967170,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1673537569
    },
    {
        "content": "<p>the mutation will happen only when I start iterating the elements of the generator.</p>",
        "id": 320967250,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1673537593
    },
    {
        "content": "<p>Why not use <code>foreach</code>?</p>",
        "id": 320973382,
        "sender_full_name": "Brian Chen",
        "timestamp": 1673539158
    },
    {
        "content": "<p>Yes, this is a good suggestion.. However nested <code>foreach</code> will get ugly. Comprehensions are easier to follow in that regard..</p>",
        "id": 320975743,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1673539749
    },
    {
        "content": "<p>Nested <code>foreach</code> using the <code>do</code> construction shouldn't be that ugly, or am I missing something?</p>",
        "id": 321011667,
        "sender_full_name": "Gunnar Farnebäck",
        "timestamp": 1673549884
    },
    {
        "content": "<p>Nested list comprehensions would also get pretty ugly pretty fast</p>",
        "id": 321020214,
        "sender_full_name": "Mason Protter",
        "timestamp": 1673552616
    }
]