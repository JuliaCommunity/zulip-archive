[
    {
        "content": "<p>I might just be making a silly mistake but this seems like an error</p>\n<p><code>Symbolics.derivative(cot(x), x)</code> outputs <code>-1 -(cot(x)^2)</code> but I expect it to output <code>-(csc(x)^2)</code></p>\n<p>Am I missing something?</p>",
        "id": 230791928,
        "sender_full_name": "Dale Black",
        "timestamp": 1616027589
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mo><mi>cot</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><msup><mo><mi>tan</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mfrac><mrow><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mfrac><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mo>−</mo><msup><mo><mi>csc</mi><mo>⁡</mo></mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">-(1 + \\cot^2(x)) = - (1 + \\frac{1}{\\tan^2(x)}) = -(1 + \\frac{\\cos^2(x)}{\\sin^2(x)}) = - \\frac{\\sin^2(x) + \\cos^2(x)}{\\sin^2(x)} = -\\frac{1}{\\sin^2(x)} = -\\csc^2(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0690879999999998em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">cot</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8190879999999999em;\"><span style=\"top:-3.0679800000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.365108em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">t</span><span class=\"mtight\">a</span><span class=\"mtight\">n</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.6366419999999997em;vertical-align:-0.5277219999999999em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10892em;\"><span style=\"top:-2.647278em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">s</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7753171428571428em;\"><span style=\"top:-2.815002857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">c</span><span class=\"mtight\">o</span><span class=\"mtight\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5277219999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.6366419999999997em;vertical-align:-0.5277219999999999em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10892em;\"><span style=\"top:-2.647278em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">s</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7753171428571428em;\"><span style=\"top:-2.815002857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">s</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">+</span><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">c</span><span class=\"mtight\">o</span><span class=\"mtight\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5277219999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.37283em;vertical-align:-0.5277219999999999em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.647278em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">s</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7753171428571428em;\"><span style=\"top:-2.815002857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5277219999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">csc</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 230795203,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1616029911
    },
    {
        "content": "<p>The real problem is that <code>simplify</code> doesn't know about this identity <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Symbolics</span><span class=\"o\">.</span><span class=\"n\">derivative</span><span class=\"p\">(</span><span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">csc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">|&gt;</span> <span class=\"n\">simplify</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"p\">((</span><span class=\"n\">csc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 230796061,
        "sender_full_name": "Mason Protter",
        "timestamp": 1616030108
    },
    {
        "content": "<p>it would be pretty simple to add... pretty sure you can even do it at runtime if you really want</p>",
        "id": 230796736,
        "sender_full_name": "Expanding Man",
        "timestamp": 1616030253
    },
    {
        "content": "<p>Whoops, thank you</p>",
        "id": 230799169,
        "sender_full_name": "Dale Black",
        "timestamp": 1616030807
    },
    {
        "content": "<p>It actually appears ot be kinda tricky to solve because the matchers are so brittle. I don't actually know how to even match this expression now that they've changed the representation of terms so much.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@rule</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"match!\"</span><span class=\"p\">)(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@rule</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"match!\"</span><span class=\"p\">)(</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@acrule</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"match!\"</span><span class=\"p\">)(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@acrule</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"match!\"</span><span class=\"p\">)(</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>cc <span class=\"user-mention\" data-user-id=\"128947\">@Shashi</span> <span class=\"user-mention\" data-user-id=\"297100\">@Yingbo Ma</span></p>",
        "id": 230803245,
        "sender_full_name": "Mason Protter",
        "timestamp": 1616032706
    },
    {
        "content": "<p>Yeah, I have found matching to be pretty rough, I really think we need some ways to \"hook into\" the matching function to see what goes wrong.  I was thinking of opening an issue and exploring some options, but I hesitated because my biggest difficulty actually came from me idiotically not noticing something</p>",
        "id": 230803393,
        "sender_full_name": "Expanding Man",
        "timestamp": 1616032825
    },
    {
        "content": "<p>but I did have a number of similar frustrations to the above when I was trying to figure out what I did wrong)</p>",
        "id": 230803415,
        "sender_full_name": "Expanding Man",
        "timestamp": 1616032842
    },
    {
        "content": "<p>Yes. That's part of the problem. It's currently very hard to tell the difference between bugs and user error.</p>",
        "id": 230803458,
        "sender_full_name": "Mason Protter",
        "timestamp": 1616032877
    },
    {
        "content": "<p>matching being finicky seems unavoidable because Julia's AST is so complicated, but currently it's just about impossible to figure out what goes wrong</p>",
        "id": 230803478,
        "sender_full_name": "Expanding Man",
        "timestamp": 1616032895
    },
    {
        "content": "<p>I think the matching algorithm just has a bug related to subtraction though</p>",
        "id": 230803697,
        "sender_full_name": "Mason Protter",
        "timestamp": 1616033057
    },
    {
        "content": "<p>I figured out what happens there,  it reads some <code>-</code> operators as <code>+</code> and multiplication by <code>-1</code> without recognizing the equivalence</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@rule</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"works!\"</span><span class=\"p\">)(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"s\">\"works!\"</span>\n</code></pre></div>",
        "id": 230803998,
        "sender_full_name": "Expanding Man",
        "timestamp": 1616033373
    },
    {
        "content": "<p>thinks it's fair to call that a bug</p>",
        "id": 230804002,
        "sender_full_name": "Expanding Man",
        "timestamp": 1616033378
    },
    {
        "content": "<p>Huh. For some reason, I could have sworn I tried that</p>",
        "id": 230806456,
        "sender_full_name": "Mason Protter",
        "timestamp": 1616035756
    },
    {
        "content": "<p>Yeah the matcher requires some love since we stopped using the straightforward Term datastructure. The performance benefits of the more complicated representation is immense, but shouldn’t have to come at the cost of expressability. That said only <span class=\"user-mention\" data-user-id=\"269446\">@Expanding Man</span> ‘s rule would work with or simplify rules even without the new representation since the first thing we do is to canonicalize in this way.</p>",
        "id": 230830494,
        "sender_full_name": "Shashi Gowda",
        "timestamp": 1616057731
    },
    {
        "content": "<p>also note that derivative will not automatically call simplify</p>",
        "id": 230830529,
        "sender_full_name": "Shashi Gowda",
        "timestamp": 1616057754
    },
    {
        "content": "<p>This is just what DiffRules seems to do.</p>",
        "id": 230830652,
        "sender_full_name": "Shashi Gowda",
        "timestamp": 1616057811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306332\">@Shashi Gowda</span> what Term data structure are you using now?</p>",
        "id": 231042506,
        "sender_full_name": "Alessandro Cheli",
        "timestamp": 1616168192
    },
    {
        "content": "<p>It's a combination of 4 types: Term, Add, Mul and Pow -- they have different internal datastructures for performance.  But they all look like <code>istree</code> and support <code>operation</code>, <code>arguments</code> and <code>similarterm</code>. :)</p>",
        "id": 231108516,
        "sender_full_name": "Shashi Gowda",
        "timestamp": 1616200367
    }
]