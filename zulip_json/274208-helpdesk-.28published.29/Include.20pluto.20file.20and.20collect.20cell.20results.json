[
    {
        "content": "<p>Someone  had a question on Slack today that I had some fun with, so I figured I'd copy my answer here for posterity. Suppose I have some pluto file like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\">### A Pluto.jl notebook ###</span>\n<span class=\"c\"># v0.16.1</span>\n\n<span class=\"k\">using</span> <span class=\"n\">Markdown</span>\n<span class=\"k\">using</span> <span class=\"n\">InteractiveUtils</span>\n\n<span class=\"c\"># ╔═╡ f39d12e8-26eb-11ec-0e1d-5b291ffb6ca5</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c\"># ╔═╡ bafb4a21-d800-4db5-8d00-3e85a817a635</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">.^</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">.-</span> <span class=\"n\">x</span><span class=\"o\">'</span>\n\n<span class=\"c\"># ╔═╡ ddccda44-7343-4ec4-98d7-bbd9c398806a</span>\n<span class=\"mi\">1</span> <span class=\"o\">.+</span> <span class=\"n\">x</span>\n\n<span class=\"c\"># ╔═╡ Cell order:</span>\n<span class=\"c\"># ╠═f39d12e8-26eb-11ec-0e1d-5b291ffb6ca5</span>\n<span class=\"c\"># ╠═bafb4a21-d800-4db5-8d00-3e85a817a635</span>\n<span class=\"c\"># ╠═ddccda44-7343-4ec4-98d7-bbd9c398806a</span>\n</code></pre></div>\n<p>The question is, how can I run this as a script but retain the 'cell strcture' so that one can ask what the output of a given cell was. The idea I came up with was to basically take this file as a string, and then <code>split</code> the string using <code># ╔═╡</code> as a delimiter (and throw away the following UUID). That gives me the cell structure, then I just need to assign each cell to a dictionary, put it all in a <code>:block</code> and then <code>eval</code> it. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">collect_cells</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"s\">\"# ╔═╡\"</span><span class=\"p\">)</span>\n    <span class=\"n\">final_expr</span> <span class=\"o\">=</span> <span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:block</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">Out</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}()))</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">cell</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">)</span>\n        <span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">cell</span> <span class=\"o\">|&gt;</span> <span class=\"kt\">IOBuffer</span> <span class=\"o\">|&gt;</span> <span class=\"n\">eachline</span> <span class=\"o\">|&gt;</span> <span class=\"n\">collect</span> <span class=\"o\">|&gt;</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">],</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"o\">$</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">Meta</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s\">\"begin</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"o\">*</span><span class=\"n\">cell</span><span class=\"o\">*</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">end\"</span><span class=\"p\">)))</span>\n        <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">final_expr</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">final_expr</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">plutoinclude</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"cm\">#=::filename=#</span><span class=\"p\">)</span>\n    <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"n\">collect_cells</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kt\">String</span><span class=\"p\">))</span>\n    <span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>e.g. in this case,</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"</span>\n<span class=\"s\">### A Pluto.jl notebook ###</span>\n<span class=\"s\"># v0.16.1</span>\n\n<span class=\"s\">using Markdown</span>\n<span class=\"s\">using InteractiveUtils</span>\n\n<span class=\"s\"># ╔═╡ f39d12e8-26eb-11ec-0e1d-5b291ffb6ca5</span>\n<span class=\"s\">x = rand(10)</span>\n\n<span class=\"s\"># ╔═╡ bafb4a21-d800-4db5-8d00-3e85a817a635</span>\n<span class=\"s\">y = (x .^ 2) .- x'</span>\n\n<span class=\"s\"># ╔═╡ ddccda44-7343-4ec4-98d7-bbd9c398806a</span>\n<span class=\"s\">1 .+ x</span>\n\n<span class=\"s\"># ╔═╡ Cell order:</span>\n<span class=\"s\"># ╠═f39d12e8-26eb-11ec-0e1d-5b291ffb6ca5</span>\n<span class=\"s\"># ╠═bafb4a21-d800-4db5-8d00-3e85a817a635</span>\n<span class=\"s\"># ╠═ddccda44-7343-4ec4-98d7-bbd9c398806a</span>\n<span class=\"s\">\"\"\"</span><span class=\"p\">;</span>\n\n<span class=\"n\">collect_cells</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"c\">#+RESULTS:</span>\n<span class=\"k\">quote</span>\n    <span class=\"n\">Out</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}()</span>\n    <span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">begin</span>\n            <span class=\"cm\">#= none:4 =#</span>\n            <span class=\"k\">using</span> <span class=\"n\">Markdown</span>\n            <span class=\"cm\">#= none:5 =#</span>\n            <span class=\"k\">using</span> <span class=\"n\">InteractiveUtils</span>\n        <span class=\"k\">end</span>\n    <span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">begin</span>\n            <span class=\"cm\">#= none:2 =#</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"k\">end</span>\n    <span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">begin</span>\n            <span class=\"cm\">#= none:2 =#</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">.^</span> <span class=\"mi\">2</span> <span class=\"o\">.-</span> <span class=\"n\">x</span><span class=\"o\">'</span>\n        <span class=\"k\">end</span>\n    <span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">begin</span>\n            <span class=\"cm\">#= none:2 =#</span>\n            <span class=\"mi\">1</span> <span class=\"o\">.+</span> <span class=\"n\">x</span>\n        <span class=\"k\">end</span>\n    <span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">begin</span>\n            <span class=\"cm\">#= none:5 =#</span>\n        <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 256488519,
        "sender_full_name": "Mason Protter",
        "timestamp": 1633556093
    }
]