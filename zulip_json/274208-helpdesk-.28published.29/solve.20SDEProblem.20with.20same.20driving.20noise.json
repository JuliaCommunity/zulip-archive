[
    {
        "content": "<p>Using <code>DifferentialEquations.jl</code>, I would like to solve several SDEs with the <em>same</em> driving Wiener noise. I am surprised to see that <code>sol.u</code> and <code>sol2.u</code> are different.  Any suggestions how come?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n  <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">g2</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n  <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"n\">u0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">WienerProcess</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">])</span>\n\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">SDEProblem</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">g2</span><span class=\"p\">,</span> <span class=\"n\">u0</span><span class=\"p\">,</span> <span class=\"n\">tspan</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span>  <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"n\">Z</span><span class=\"p\">)</span>\n<span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span> <span class=\"n\">EM</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">),</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n\n<span class=\"n\">prob2</span> <span class=\"o\">=</span> <span class=\"n\">SDEProblem</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">g2</span><span class=\"p\">,</span> <span class=\"n\">u0</span><span class=\"p\">,</span> <span class=\"n\">tspan</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"n\">Z</span><span class=\"p\">)</span>\n<span class=\"n\">sol2</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob2</span><span class=\"p\">,</span> <span class=\"n\">EM</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">),</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n\n<span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">W</span> <span class=\"o\">==</span> <span class=\"n\">sol2</span><span class=\"o\">.</span><span class=\"n\">W</span> <span class=\"c\"># true</span>\n<span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">sol2</span><span class=\"o\">.</span><span class=\"n\">u</span> <span class=\"c\"># false</span>\n<span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">sol2</span><span class=\"o\">.</span><span class=\"n\">t</span> <span class=\"c\"># true</span>\n</code></pre></div>",
        "id": 233071575,
        "sender_full_name": "Frank van der Meulen",
        "timestamp": 1617531961
    },
    {
        "content": "<p>To reproduce the same noise values with a <code>NoiseProcess</code>,  you'll need to fix the seed:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">StochasticDiffEq</span><span class=\"p\">,</span> <span class=\"n\">DiffEqNoiseProcess</span><span class=\"p\">,</span> <span class=\"n\">Random</span>\n<span class=\"k\">function</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">g2</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"n\">u0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.98</span><span class=\"p\">]</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">WienerProcess</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">])</span>\n\n<span class=\"n\">Random</span><span class=\"o\">.</span><span class=\"n\">seed!</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">SDEProblem</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">g2</span><span class=\"p\">,</span> <span class=\"n\">u0</span><span class=\"p\">,</span> <span class=\"n\">tspan</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"n\">Z</span><span class=\"p\">)</span>\n<span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span> <span class=\"n\">EM</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">),</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">save_noise</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"n\">Random</span><span class=\"o\">.</span><span class=\"n\">seed!</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">prob2</span> <span class=\"o\">=</span> <span class=\"n\">SDEProblem</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">g2</span><span class=\"p\">,</span> <span class=\"n\">u0</span><span class=\"p\">,</span> <span class=\"n\">tspan</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"n\">Z</span><span class=\"p\">)</span>\n<span class=\"n\">sol2</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob2</span><span class=\"p\">,</span> <span class=\"n\">EM</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">),</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">save_noise</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n\n<span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">W</span><span class=\"o\">.</span><span class=\"n\">W</span> <span class=\"o\">==</span> <span class=\"n\">sol2</span><span class=\"o\">.</span><span class=\"n\">W</span><span class=\"o\">.</span><span class=\"n\">W</span> <span class=\"c\"># true</span>\n<span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">sol2</span><span class=\"o\">.</span><span class=\"n\">u</span> <span class=\"c\"># true</span>\n<span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">sol2</span><span class=\"o\">.</span><span class=\"n\">t</span> <span class=\"c\"># true</span>\n\n<span class=\"k\">using</span> <span class=\"n\">Plots</span>\n\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">)</span>\n<span class=\"n\">plot!</span><span class=\"p\">(</span><span class=\"n\">sol2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>However, I am also a bit surprised that <code>sol.W.W</code> in your example shows true.. I think that this is actually not the case and a new independent driving noise is drawn. </p>\n<p>The correct way to re-use the noise values is to use <code>NoiseWrapper</code> from DiffEqNoiseProcess:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Zrep</span> <span class=\"o\">=</span> <span class=\"n\">NoiseWrapper</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">W</span><span class=\"p\">)</span>\n<span class=\"n\">prob2</span><span class=\"o\">=</span> <span class=\"n\">SDEProblem</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">g2</span><span class=\"p\">,</span> <span class=\"n\">u0</span><span class=\"p\">,</span> <span class=\"n\">tspan</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"n\">Zrep</span><span class=\"p\">)</span>\n<span class=\"n\">sol2</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob2</span><span class=\"p\">,</span> <span class=\"n\">EM</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">),</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">save_noise</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">)</span>\n\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">)</span>\n<span class=\"n\">plot!</span><span class=\"p\">(</span><span class=\"n\">sol2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>If a fixed grid with a non-adaptive solver should be used, then <code>NoiseGrid</code> might also be a good choice, see <a href=\"https://diffeq.sciml.ai/latest/features/noise_process/#NoiseGrid-2\">https://diffeq.sciml.ai/latest/features/noise_process/#NoiseGrid-2</a>.</p>",
        "id": 233288532,
        "sender_full_name": "Frank Schäfer",
        "timestamp": 1617700251
    },
    {
        "content": "<p>Thanks. </p>\n<p>That is confusing: you pass the noise to the function call, so why would you ever need to fix the seed? No random numbers need to be generated. I can work around this now of course, but the logic is not clear to me. </p>\n<p>Looking at the \"correct way\" to do this,  without <code>save_noise=false</code> something would change? </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>\n</code></pre></div>",
        "id": 233294243,
        "sender_full_name": "Frank van der Meulen",
        "timestamp": 1617703285
    },
    {
        "content": "<p>I opened an issue regarding <code>sol.W == sol2.W # true</code> <a href=\"https://github.com/SciML/StochasticDiffEq.jl/issues/412\">https://github.com/SciML/StochasticDiffEq.jl/issues/412</a>. In your example, I'd have expected that in <code>sol2</code> a  new, independent noise process is simulated. So it's weird that the same noise values are displayed. </p>\n<p>The random seed is just to fix the generation of the Wiener noise values (assuming that the noise values are fully regenerated). </p>\n<p>I wouldn't expect a difference with <code>save_noise=false</code>; except that the noise values might grow a little because of floating point errors, i.e., if you step not exactly to the values of the time grid, a noise value will be sampled using the bridge distribution close to the time points of the grid, and this new noise value -- which will be very similar to the noise value on the grid -- would probably be stored as well.</p>",
        "id": 233307702,
        "sender_full_name": "Frank Schäfer",
        "timestamp": 1617711268
    }
]