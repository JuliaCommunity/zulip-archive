[
    {
        "content": "<p>Suppose we are given an iterator <code>iter</code> and a list of linear indices <code>inds</code>. How to collect <code>iter</code> at <code>inds</code>? Is there a helper function in Base for that?</p>",
        "id": 419830837,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707136958
    },
    {
        "content": "<p>I wrote the following helper function assuming that <code>inds</code> is indexable and sorted:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">[</span><span class=\"k\">begin</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">[(</span><span class=\"k\">begin</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">ind</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span>\n<span class=\"w\">  </span><span class=\"k\">end</span>\n<span class=\"w\">  </span><span class=\"n\">vec</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Do you have improvement suggestions?</p>",
        "id": 419833917,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707138003
    },
    {
        "content": "<p>The function above is super slow though with large collections. Any workaround?</p>",
        "id": 419836608,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707138871
    },
    {
        "content": "<p>The underlying issue is that I have a large collection that requires more memory than available RAM. However, I only need to materialize at specific indices efficiently.</p>",
        "id": 419836801,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707138931
    },
    {
        "content": "<p>Another solution is:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">eltype</span><span class=\"p\">(</span><span class=\"kt\">iter</span><span class=\"p\">)}()</span>\n<span class=\"w\">  </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">set</span>\n<span class=\"w\">      </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">  </span><span class=\"k\">end</span>\n<span class=\"w\">  </span><span class=\"n\">vec</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 419839052,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707139636
    },
    {
        "content": "<p>Does <code>inds</code> have a known size?</p>",
        "id": 419839055,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707139637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Collecting.20an.20iterator.20at.20specified.20indices.3F/near/419839055\">said</a>:</p>\n<blockquote>\n<p>Does <code>inds</code> have a known size?</p>\n</blockquote>\n<p>yes, it does</p>",
        "id": 419839087,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707139650
    },
    {
        "content": "<p>My first intinct is to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">BangBang</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">setindex!!</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">MicroCollections</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UndefArray</span>\n\n<span class=\"c\"># easy case where we can just take a view of `A`</span>\n<span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">))</span>\n\n<span class=\"c\"># Harder case where `iter` is some general iterator</span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UndefArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">iter_next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">inds_ind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">firstindex</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">iter_next</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter_next</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">[</span><span class=\"n\">inds_ind</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">setindex!!</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds_ind</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">inds_ind</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">arr</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 419840942,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707140247
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> , will take a look at it as soon as possible. Running some experiments at the moment to see if this bottleneck is solved.</p>",
        "id": 419841383,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707140389
    },
    {
        "content": "<p>sorry I made some typos above</p>",
        "id": 419842047,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707140596
    },
    {
        "content": "<p>Needs a few fixes</p>",
        "id": 419842062,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707140602
    },
    {
        "content": "<p>Thanks for the help. I am investigating the runs so far and will look into it more carefully soon.</p>",
        "id": 419842170,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707140637
    },
    {
        "content": "<p>Hm, yeah the things I've been trying are all pretty slow.</p>",
        "id": 419846914,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707142053
    },
    {
        "content": "<p>This does seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">eltype</span><span class=\"p\">(</span><span class=\"kt\">iter</span><span class=\"p\">)}(</span><span class=\"nb\">undef</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">iter_next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">firstindex</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">iter</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">[</span><span class=\"n\">ind</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">setindex!!</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ind</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lastindex</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">break</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">arr</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>but the perf is not good</p>",
        "id": 419847089,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707142095
    },
    {
        "content": "<p>I think maybe one should just write a custom iterator?</p>",
        "id": 419847144,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707142110
    },
    {
        "content": "<p>i.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">IterView</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Inds</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">iter</span><span class=\"o\">::</span><span class=\"kt\">Iter</span>\n<span class=\"w\">    </span><span class=\"n\">inds</span><span class=\"o\">::</span><span class=\"kt\">Inds</span>\n<span class=\"k\">end</span>\n<span class=\"n\">IterView</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"o\">::</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"o\">::</span><span class=\"kt\">I</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">IterView</span><span class=\"p\">{</span><span class=\"kt\">eltype</span><span class=\"p\">(</span><span class=\"kt\">A</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"p\">}(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>and then a custom <code>iterate</code> method</p>",
        "id": 419847543,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707142217
    },
    {
        "content": "<p>but it'd be annoying to write and I'm not sure it'd be faster</p>",
        "id": 419847601,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707142233
    },
    {
        "content": "<p>I did a workaround in the script to avoid the construction of large iterators, but will continue to push the limits here, and come back to the collectat soon.</p>",
        "id": 419849070,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707142650
    },
    {
        "content": "<p>Won't something like <code>map(last, Iterators.filter(((i, v),) -&gt; i in ind, enumerate(iter)))</code> work? Basically, a one-line version of your second solution <span class=\"user-mention\" data-user-id=\"273172\">@Júlio Hoffimann</span>.</p>",
        "id": 419861825,
        "sender_full_name": "aplavin",
        "timestamp": 1707145940
    },
    {
        "content": "<p>that will still materialize each item right? just not all at the same time</p>",
        "id": 419869098,
        "sender_full_name": "Andy Dienes",
        "timestamp": 1707147784
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10000000</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">];</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@allocated</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n<span class=\"mi\">641436824</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@allocated</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(((</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">),)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">)))</span>\n<span class=\"mi\">8003540800</span>\n</code></pre></div>",
        "id": 419869820,
        "sender_full_name": "Andy Dienes",
        "timestamp": 1707147986
    },
    {
        "content": "<p>Of course, iterators are fundamentally sequential, so the only way to get to the Nth element is to iterate over the first N-1. For random access, see arrays :)</p>",
        "id": 419892494,
        "sender_full_name": "aplavin",
        "timestamp": 1707154237
    },
    {
        "content": "<p>The problem is that your version goes through all elements of <code>itr</code>, whereas mine stops once you've consumed all the indices</p>",
        "id": 419893455,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707154556
    },
    {
        "content": "<p>which can be very consequential:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\">#+begin_src julia</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">BangBang</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MicroCollections</span>\n\n<span class=\"n\">idxs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">];</span>\n<span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"p\">);</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UndefArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">iter_next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">firstindex</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">iter</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">[</span><span class=\"n\">ind</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">setindex!!</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ind</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ind</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lastindex</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">break</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">arr</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">collectat_itr</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(((</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">),)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">)))</span>\n\n<span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n<span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">collectat_itr</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">idxs</span><span class=\"p\">);</span>\n<span class=\"c\">#+end_src</span>\n<span class=\"c\">#+RESULTS:</span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">95.072</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">610.35</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">1.181</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">307</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">7.45</span><span class=\"w\"> </span><span class=\"n\">GiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 419893598,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707154591
    },
    {
        "content": "<p>That's not a fundamental issue – just add <code>Iterators.takewhile</code> for optimization! Still composes nicely out of basic building blocks:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">DataPipes</span><span class=\"w\">  </span><span class=\"c\"># @p to make piping nice</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">collectat_itr</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nd\">@p</span><span class=\"w\"> </span><span class=\"k\">let</span>\n<span class=\"w\">    </span><span class=\"n\">itr</span>\n<span class=\"w\">    </span><span class=\"n\">enumerate</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">takewhile</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">≤</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">collectat_itr</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">idxs</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"mf\">72.524</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">610.35</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 419894837,
        "sender_full_name": "aplavin",
        "timestamp": 1707155029
    },
    {
        "content": "<p>yeah that's pretty good</p>",
        "id": 419896165,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707155450
    },
    {
        "content": "<p>I think if we want to talk about decomposing into modular building blocks though, Transducers is still my favourite:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\">#+begin_src julia</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Transducers</span>\n<span class=\"n\">SelectAt</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"w\"> </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">TakeWhile</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">≤</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">Filter</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n<span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">collectat_itr2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">idxs</span><span class=\"p\">);</span>\n<span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">SelectAt</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">idxs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">;</span>\n<span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">SelectAt</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">idxs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">tcollect</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"n\">basesize</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"c\">#+end_src</span>\n\n<span class=\"c\">#+RESULTS:</span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">93.922</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">610.35</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">93.933</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">610.35</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">94.020</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">610.35</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">61.983</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">222</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">915.54</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 419899721,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707156649
    },
    {
        "content": "<p>Thank you all for the inputs, experimenting with them here.</p>",
        "id": 420025169,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707218329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> I really like the <a href=\"https://juliahub.com/ui/Packages/General/Transducers\">Transducers.jl</a> solution and we already have it as a dependency. What is the <code>⨟</code> symbol? Couldn't find it in the docs. Would it be a lazy version of <code>|&gt;</code>?</p>",
        "id": 420031238,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707220642
    },
    {
        "content": "<p>Huh it's weird it's not in the docs. Here's the docstring, I'll try and get it in the docs website too though:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">help</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"o\">⨟</span>\n<span class=\"s\">\"⨟\"</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">typed</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"n\">bbsemi</span><span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">search</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">⨟</span>\n\n<span class=\"w\">  </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">opcompose</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n\n<span class=\"w\">  </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">opposite</span><span class=\"w\"> </span><span class=\"n\">composition</span><span class=\"w\"> </span><span class=\"n\">operator</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">as</span>\n\n<span class=\"w\">  </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">∘</span><span class=\"w\"> </span><span class=\"n\">g</span>\n<span class=\"w\">  </span><span class=\"o\">⨟</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"o\">⨟</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">∘</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 420032062,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707220929
    },
    {
        "content": "<p>Mhm, I guess it's because it's actually a re-export from <a href=\"https://juliahub.com/ui/Packages/General/CompositionsBase\">CompositionsBase.jl</a></p>",
        "id": 420032628,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707221149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> I had to adjust the definition to handle empty <code>inds</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Transducers</span>\n\n<span class=\"s\">\"\"\"</span>\n<span class=\"s\">    collectat(iter, inds)</span>\n\n<span class=\"s\">Collect iterator `iter` at indices `inds` without materialization.</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">collectat</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">isempty</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">eltype</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">)[]</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">selectat</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"w\"> </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">TakeWhile</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">≤</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">Filter</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">inds</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">selectat</span><span class=\"p\">(</span><span class=\"n\">inds</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">tcollect</span>\n<span class=\"w\">  </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 420049484,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707226917
    },
    {
        "content": "<p>Okay got a docstring in Transducers itself now:<a href=\"https://juliafolds2.github.io/Transducers.jl/dev/reference/manual/#CompositionsBase.:%E2%A8%9F\">https://juliafolds2.github.io/Transducers.jl/dev/reference/manual/#CompositionsBase.:%E2%A8%9F</a></p>",
        "id": 420051646,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707227534
    },
    {
        "content": "<p>Some history on the topic if you're interested: <a href=\"https://github.com/JuliaFolds/Transducers.jl/issues/67\">https://github.com/JuliaFolds/Transducers.jl/issues/67</a></p>",
        "id": 420051796,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707227580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273172\">Júlio Hoffimann</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Collecting.20an.20iterator.20at.20specified.20indices.3F/near/420049484\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> I had to adjust the definition to handle empty <code>inds</code>:</p>\n</blockquote>\n<p>You could also do</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">SelectAt</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">enumerate</span>\n<span class=\"w\">                  </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">TakeWhile</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">isempty</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">≤</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">))</span>\n<span class=\"w\">                  </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">Filter</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n<span class=\"w\">                  </span><span class=\"o\">⨟</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 420055783,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707228822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> is this a good application for <a href=\"https://juliahub.com/ui/Packages/General/OhMyThreads\">OhMyThreads.jl</a>? We are considering moving some code from <a href=\"https://juliahub.com/ui/Packages/General/Transducers\">Transducers.jl</a> to the new package</p>",
        "id": 420154937,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1707263052
    },
    {
        "content": "<p>Not really, no. OhMyThreads doesn't handle general iterators or early termination like Transducers does</p>",
        "id": 420155651,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707263483
    },
    {
        "content": "<p>OhMyThreads isn't me giving up on Transducers, it was more just that I knew that the design of OhMyThreads can cover a big chunk of use-cases with very little code, and be relatively low maintenance and easy for people to pick up and contribute to</p>",
        "id": 420156762,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707264138
    }
]