[
    {
        "content": "<p>I have a situation, where I have an integration and I want to give the integration limit as an argument to a function, but the limit depends on something that is calculated in the same function. Therefore, I would like to use a variable name as a function argument, but that variable is only defined in the function scope.</p>\n<p>It should be doable with metaprogramming, but I can't figure it out.</p>\n<p>I guess it is something analogous to making these function calls work</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">  </span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># 1</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">baz</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># 2</span>\n</code></pre></div>\n<p>At the moment this gives <code>UndefVarError</code>.</p>",
        "id": 403388214,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700575702
    },
    {
        "content": "<p>You could use a dictionary or a named tuple and use symbols as keys. no need to <code>eval</code> here.</p>",
        "id": 403428267,
        "sender_full_name": "Sergio Vargas",
        "timestamp": 1700586950
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 403533100,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700637213
    },
    {
        "content": "<p>In some cases, I would also like to do some simple manipulation with the variable and in that case the dictionary does not work. For example, <code>foo(10*bar)</code>.</p>",
        "id": 403543289,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700641931
    },
    {
        "content": "<p>I think you should give a more realistic example of what you're trying to do. It doesn't seem a case for metaprograming at all, but your example <code>foo(x)</code> function does not make sense, as <code>x</code>, is the argument. You example works with:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:bar</span>\n<span class=\"w\">               </span><span class=\"mi\">1</span>\n<span class=\"w\">           </span><span class=\"k\">elseif</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:baz</span>\n<span class=\"w\">               </span><span class=\"mi\">2</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"ss\">:bar</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"ss\">:baz</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">f</span><span class=\"p\">()</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n</code></pre></div>\n<p>but understanding why this is not what you need requires some more explanation.</p>",
        "id": 403780995,
        "sender_full_name": "Leandro Martínez",
        "timestamp": 1700743166
    },
    {
        "content": "<p>The actual use case is that I am calculating the mass of galaxy groups, which includes taking an integral to some radius from the group's center. There are different definitions of radii that can be used as the radius of the group. I want to be able to give the main function an argument, which determines the upper limit of that integral. The problem is that the different radii are not known beforehand. They are calculated in the main function. For example, I would like to run a function <code>calculate_mass(galaxies; integral_limit=10*R1)</code> or change the limit to <code>integral_limit=5*R2</code>. In the end, <code>R1</code> and <code>R2</code> will have some value, and the upper limit will be used as an argument for the <code>quadgk</code> function.</p>\n<p>Fortunately, at the moment, I am only comparing two different radii and implementing it as a simple boolean. I only need multiplication, so I added another argument to the <code>calculate_mass</code> function that contains the factor as a number. I just hoped there was an elegant way to solve this so that I could have an argument <code>10*R1</code> without <code>R1</code> being defined yet (but it will be determined before it is actually used).</p>\n<p>Does this make any sense?</p>",
        "id": 403786968,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700745327
    },
    {
        "content": "<p>if there are not a lot of additional usage instances, you could just define a <code>Radius{N}</code> struct, define <code>Base.:(*)(::Number, ::Radius)</code>and then have a method that evaluates it once it's known (kind of like a minimal symbolics stack)</p>",
        "id": 403788467,
        "sender_full_name": "Daniel González",
        "timestamp": 1700745889
    },
    {
        "content": "<p>so something like </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Radius</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">}</span>\n<span class=\"w\">       </span><span class=\"n\">scale</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.:</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">Number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">::</span><span class=\"kt\">Radius</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Radius</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">}(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">R1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Radius</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">R2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Radius</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">}(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 403788912,
        "sender_full_name": "Daniel González",
        "timestamp": 1700746054
    },
    {
        "content": "<p>Then </p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">R1</span>\n<span class=\"go\">Radius{1}(10.0)</span>\n</code></pre></div>",
        "id": 403788963,
        "sender_full_name": "Daniel González",
        "timestamp": 1700746076
    },
    {
        "content": "<p>then resolve it once the value is known as <code>resolve(r::Radius{1}, r1, r2) = r1 * r.scale</code> and <code>resolve(r::Radius{2}, r1, r2) = r2 * r.scale</code>(if there are two options, otherwise you could have all of them as a tuple and define all of them with a single method)</p>",
        "id": 403789267,
        "sender_full_name": "Daniel González",
        "timestamp": 1700746189
    },
    {
        "content": "<p>Though I just read the post where you said you wanted to do some manipulation as <code>foo(10*R1)</code>, which I guess discards my proposal because you'd basically be reinventing a symbolics engine (or maybe it just works if you define another struct with the function and the <code>Radius{N}</code> as fields, for delayed evaluation? In any case hard to assess without the details)</p>",
        "id": 403790000,
        "sender_full_name": "Daniel González",
        "timestamp": 1700746443
    },
    {
        "content": "<p>I am slipping up with trying to simplify things <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> Using just <code>R1</code> and <code>R2</code> wasn't the best example because the radii actually have names (such as <code>R_grav</code> and <code>R_200</code>). I like your solution, but I guess I would just have to put the radii into some ordered list. I think in general, there is no point in trying to figure out more complicated solutions, as my case was quite simple in practice and solvable with just a boolean and an extra argument, and it is unlikely to get any more complicated.</p>",
        "id": 403792551,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700747365
    },
    {
        "content": "<p>I guess the question I was looking an answer to was whether I could have an expression <code>10*x</code>, when <code>x</code> is not defined, and evaluate it after <code>x</code> has been defined.</p>",
        "id": 403792898,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700747485
    },
    {
        "content": "<p>yeah, if a flag works then it's probably the best solution instead of adding code (you could still build <code>R_grav = Radius{:grav}(1.0)</code> if you really really wanted to, though)</p>",
        "id": 403792964,
        "sender_full_name": "Daniel González",
        "timestamp": 1700747521
    },
    {
        "content": "<p>Why aren't these just separate arguments to <code>calculate_mass</code>?</p>",
        "id": 403798046,
        "sender_full_name": "Mason Protter",
        "timestamp": 1700749191
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">calculate_mass</span><span class=\"p\">(</span><span class=\"n\">galaxies</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">integral_limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">limit_style</span><span class=\"o\">=</span><span class=\"ss\">:R_grav</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>or something?</p>",
        "id": 403798329,
        "sender_full_name": "Mason Protter",
        "timestamp": 1700749276
    },
    {
        "content": "<blockquote>\n<p>I guess the question I was looking an answer to was whether I could have an expression 10*x, when x is not defined, and evaluate it after x has been defined.</p>\n</blockquote>\n<p>You sort of can, but it's a terribly bad idea in many ways.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"k\">global</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">         </span><span class=\"k\">global</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">         </span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">))</span>\n<span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 403811740,
        "sender_full_name": "Gunnar Farnebäck",
        "timestamp": 1700753792
    },
    {
        "content": "<p><em>please</em> don't do this in real code</p>",
        "id": 403818341,
        "sender_full_name": "Mason Protter",
        "timestamp": 1700756400
    },
    {
        "content": "<p>why can't the radii calculations be refactored into a separate function? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 403827558,
        "sender_full_name": "Sergio Vargas",
        "timestamp": 1700760343
    },
    {
        "content": "<p>Is there a reason to not let the user pass in a function that computes the radius, rather than an expression?</p>",
        "id": 403834421,
        "sender_full_name": "Fredrik Bagge Carlson",
        "timestamp": 1700762813
    },
    {
        "content": "<p>I guess in the general case you just want to pass a function:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">           </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"mi\">20</span>\n</code></pre></div>",
        "id": 403835959,
        "sender_full_name": "Leandro Martínez",
        "timestamp": 1700763364
    },
    {
        "content": "<p>(oh yes, everybody just said that)</p>",
        "id": 403836095,
        "sender_full_name": "Leandro Martínez",
        "timestamp": 1700763412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Variable.20defined.20in.20the.20function.20scope.20as.20an.20argument/near/403798329\">said</a>:</p>\n<blockquote>\n<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">calculate_mass</span><span class=\"p\">(</span><span class=\"n\">galaxies</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">integral_limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">limit_style</span><span class=\"o\">=</span><span class=\"ss\">:R_grav</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>or something?</p>\n</blockquote>\n<p>This is what I ended up doing.</p>",
        "id": 403912765,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700810361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486849\">Sergio Vargas</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Variable.20defined.20in.20the.20function.20scope.20as.20an.20argument/near/403827558\">said</a>:</p>\n<blockquote>\n<p>why can't the radii calculations be refactored into a separate function? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>It is an iterative calculation that cannot be calculated beforehand as the integral has to be taken in every iteration until the results have converged.</p>",
        "id": 403913025,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700810490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272599\">Fredrik Bagge Carlson</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Variable.20defined.20in.20the.20function.20scope.20as.20an.20argument/near/403834421\">said</a>:</p>\n<blockquote>\n<p>Is there a reason to not let the user pass in a function that computes the radius, rather than an expression?</p>\n</blockquote>\n<p>In general, I agree, but these two radii that I wanted to compare are both needed in the calculations in different steps and are already calculated.</p>",
        "id": 403913601,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1700810798
    },
    {
        "content": "<p>Multiplying two numbers takes on the order of a nanosecond, are you sure that recalculsting them is an issue? Even if you pass in a function and that function is called twice, julia will likely inline that function and optimize away any simple calculation that is repeated. How expensive is this operation we're talking about?</p>",
        "id": 403980263,
        "sender_full_name": "Fredrik Bagge Carlson",
        "timestamp": 1700837156
    },
    {
        "content": "<p>They aren't expensive computationally, and I could definitely just calculate them twice, once for the general calculations and once for the integral limit. I think I figured that reusing the values would be simpler than doing the radius calculations twice, but that does not seem to be the case.</p>",
        "id": 404563193,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1701156687
    }
]