[
    {
        "content": "<p>In the various blogs, docs, and posts about Artifacts it is very nicely explained how to use Artifacts in a package. I'd love to see a MWE of using Artifacts in a project that is not a package.</p>\n<p>My specific use-case is providing all the code to reproduce the analysis (to be) published in a scientific article. This analysis depends on raw data that is hosted online.</p>\n<p>I really like that the data is:</p>\n<ul>\n<li>linked to its sha256</li>\n<li>downloaded and managed by the Artifacts framework</li>\n<li>located at  artifact\"name\"</li>\n<li>maintained (and gc) by the Artifacts framework</li>\n</ul>\n<p>Does anyone have a good example for this?</p>\n<p>One specific problem I currently have, for instance, is that although I have a Artifact.toml file in the project's directory, activating and then instantiating the session does not \"install\" the artifacts specified in the Artifacts.toml file. I need to \"manually\" <code>download_artifact</code> or <code>ensure_artifact_installed</code> first.</p>",
        "id": 262776420,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1637919456
    },
    {
        "content": "<p>the solution was to use ArtifactUtils</p>",
        "id": 262790036,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1637928480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272632\">Yakir Luc Gagnon</span> has marked this topic as resolved.</p>",
        "id": 262798465,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637934047
    },
    {
        "content": "<p>Why not make a package for the paper? I do that I find that it works quite well, but maybe there is an easier way?</p>",
        "id": 262945154,
        "sender_full_name": "Rik Huijzer",
        "timestamp": 1638129242
    },
    {
        "content": "<p>I use <a href=\"https://github.com/search?q=DataDeps.jl&amp;type=Repositories\">DataDeps.jl</a> for papers. Maybe you don't need the Artfifacts framework after all <span class=\"user-mention\" data-user-id=\"272632\">@Yakir Luc Gagnon</span> ?</p>",
        "id": 262956720,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1638145641
    },
    {
        "content": "<p>The package works nicely and was designed with your use case in mind. Register a URL and use the data as is it was on disk already downloaded.</p>",
        "id": 262956789,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1638145730
    },
    {
        "content": "<p>First <code>DataDeps</code>:<br>\nI love DataDeps and use it regularly. It's truly great. I find though that there are a few of these packages that overlap a bit, and since the Artifacts framework is intrinsic to Julia I'd give it a shot. I actually don't have a strong opinion on whether it's better or worse for my use-case, I'm not sure there is even a good answer to that. But this is the first time I use Artifacts for something like this. And so far it works very nicely.</p>\n<p>Secondly, package versus project for scientific papers:<br>\nThis is  a great question. I did both by now, here's what I learned.</p>\n<h1>Using a package</h1>\n<h2>Advantages</h2>\n<ul>\n<li>you can leverage the updating functionality of Pkg to get the people you work with to easily update their versions (i.e. before publishing). </li>\n<li>you can use the Test framework to include tests to your publication</li>\n<li>possibly more extensive documentations</li>\n</ul>\n<h2>Disadvantages</h2>\n<ul>\n<li>users need to <code>using MyPackage</code> and <code>run_main()</code> every time they want to generate the results of the study, instead of just <code>include(\"generate_results.jl\")</code></li>\n<li>we include a Manifest.toml file to the package to make sure it will always work, this too is not terribly natural for a Package to do.</li>\n</ul>\n<h1>Using a project</h1>\n<h2>Advantages</h2>\n<ul>\n<li>it's easier for the reader to parse</li>\n<li>less moving parts</li>\n</ul>\n<h2>Disadvantages</h2>\n<ul>\n<li>basically the inverse of the advantages of using a package...</li>\n</ul>\n<p>I'd love to hear your opinions on this. I also think that this heavily depends on your specific field of research. People that do a lot of simulations should find <a href=\"https://github.com/search?q=DrWatson.jl&amp;type=Repositories\">DrWatson.jl</a> amazing, people that don't might find it too large or opinionated (rightly or not)?</p>",
        "id": 262980870,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638176395
    },
    {
        "content": "<p>Good discussion here. I did some write-up on projects here: <a href=\"https://j-fu.github.io/marginalia/julia/project-workflow/\">https://j-fu.github.io/marginalia/julia/project-workflow/</a><br>\nIn short, I tend to side with the idea to set a project up as a package with Manifest.toml.<br>\nCurrently trying this out with my colleagues, so far  it seems to work. <br>\nA follow-up  on packages  and on local registries is in the making...</p>",
        "id": 262982326,
        "sender_full_name": "j-fu",
        "timestamp": 1638177253
    },
    {
        "content": "<p>wow, I love this! I really like the idea of keeping a packages repo and deving those. then everything ships together and there shouldn't be any issues what so ever to reproduce (in my specific case I depend on two of my own packages, one registered and one not). Hmmm... I might change to this! Thank you <span class=\"user-mention\" data-user-id=\"297505\">@j-fu</span></p>",
        "id": 262990232,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638181859
    },
    {
        "content": "<p>So actually <span class=\"user-mention\" data-user-id=\"297505\">@j-fu</span> , I'm not so convinced anymore: the pros and cons I listed above are for an actual package versus a project. The framework you nicely presented in that blog seems (I might be wrong) like a project. Here's why:<br>\nYou generated a package and with it all its functional sub-directories, that's true, but then by requiring that the user start a session from within this package's path and activate it there, you've effectively rendered that package into a project. Or it's more correct to say that the user interacts with that code as a project, not as a package. Interacting with it as a package would be starting Julia anywhere and just <code>using MyProject</code> (assuming it's been added to the current environment).  </p>\n<p>I still really like the ideas presented in your blog and the whole framework, but I think what you've described is a project, not a package.</p>",
        "id": 263121362,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638265911
    },
    {
        "content": "<p>Indeed,  I agree, I described a project, not a package - this was my intention. Instantiating  a project as a package (as B. Kaminski advocates) helps with the possibility to run tests, documentation generation etc. </p>\n<p>The second point (which I learned from reading the tutorials of Dr.Watson.jl) is the possibility to develop project-local packages within this project due to the ability of Pkg to use a relative path in Manifest.toml.  This IMHO helps with early states of new packages, where just ideas are tried out etc. This initial development would take place locally within the project. <br>\nOnly at later stages  - e.g. when it should be shared between several projects - a  budding package would  be registered. I envision to have some intermediate  level registry (using <a href=\"https://github.com/search?q=LocalRegistry.jl&amp;type=Repositories\">LocalRegistry.jl</a>) for versions  0.0.x , after that, re-registration in e.g.  General starting with 0.1.0  would be possible.</p>",
        "id": 263123505,
        "sender_full_name": "j-fu",
        "timestamp": 1638267103
    },
    {
        "content": "<p>Love this, yeah, I agree. As I said before, I really like keeping accompanying packages within the project's repo. It makes the whole thing completely reproducible.  Thanks for the useful discussion!</p>",
        "id": 263129906,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638270986
    },
    {
        "content": "<p>any package is also always a project, no?</p>",
        "id": 263135787,
        "sender_full_name": "Sukera",
        "timestamp": 1638274745
    },
    {
        "content": "<p>Ok you trigger me to do some RTFM (for my own alphabetization, should have done this earlier...) : the Pkg glossary is quite clear on this: <a href=\"https://pkgdocs.julialang.org/v1.6/glossary/#Glossary\">https://pkgdocs.julialang.org/v1.6/glossary/#Glossary</a>  and introduces an \"Applications\" wich include \"simulation/analytics code accompanying a scientific paper\".  </p>\n<p>So in that sense we are talking here about applications vs. packages. Will update my post when  I find time...</p>",
        "id": 263151260,
        "sender_full_name": "j-fu",
        "timestamp": 1638282093
    },
    {
        "content": "<p>hm</p>",
        "id": 263152046,
        "sender_full_name": "Sukera",
        "timestamp": 1638282375
    },
    {
        "content": "<p>a project is just a directory with a <code>Project.toml</code> in it. A package is a project with a special directory structure (e.g. usually has <code>src</code>, <code>test</code>...) and is registered. An application is a self contained project, commonly with a Manifest.toml commited as well (for reproducibility) and it may also be compiled to a static binary (e.g. using PackageCompiler)</p>",
        "id": 263152243,
        "sender_full_name": "Sukera",
        "timestamp": 1638282477
    },
    {
        "content": "<p>in general, for a publication you want to definitely include the <code>Manifest.toml</code>, since it allows anyone reading your paper to reproduce your exact julia environment by running <code>]instantiate</code></p>",
        "id": 263153550,
        "sender_full_name": "Sukera",
        "timestamp": 1638283006
    },
    {
        "content": "<p>Exacty, after all, the committed manifest makes the difference. Besides of reproducibility this allows for dev'ed packages with relative paths, which provides a resonable low key way to start collaborative package development before registration. One would have an application monorepo with subpackages in it and can register the subpackages when they are sufficiently mature.</p>",
        "id": 263154157,
        "sender_full_name": "j-fu",
        "timestamp": 1638283227
    },
    {
        "content": "<p><code>git clone</code> and <code>]instantiate</code> are also sufficient for this approach.</p>",
        "id": 263154346,
        "sender_full_name": "j-fu",
        "timestamp": 1638283320
    },
    {
        "content": "<p>you can also <code>]add</code> a git repo directly, but that also requires a Manifest</p>",
        "id": 263155795,
        "sender_full_name": "Sukera",
        "timestamp": 1638283935
    },
    {
        "content": "<p>I'm not too fond of monorepos :)</p>",
        "id": 263155811,
        "sender_full_name": "Sukera",
        "timestamp": 1638283942
    },
    {
        "content": "<p>A monorepo for an application used to reproduce the stats and figures of a scientific publication is great. You wouldn't want all the code used to reproduce the published article in a bunch of different places. Think of it this way, all your projects are probably in one monorepo anyways, <code>/home/sukera/</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 263188595,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638297376
    },
    {
        "content": "<p>Depends on your needs, but I often find it’s worth the time to split out My workflow into packages</p>",
        "id": 263189223,
        "sender_full_name": "Mason Protter",
        "timestamp": 1638297637
    },
    {
        "content": "<p>I don't have a .git in my home directory, no :p</p>",
        "id": 263189550,
        "sender_full_name": "Sukera",
        "timestamp": 1638297795
    },
    {
        "content": "<p>I feel like we're talking over each other's heads: I too hate having things in one single monolithic repo,  and my \"workflow\" also works best if it's split into composable units. But, if you're gonna publish a scientific article, and you want to provide a single link to a repository that contains everything the reader would need to reproduce said article, I'd argue it's better if all the moving pieces are in one tracked place.</p>",
        "id": 263195011,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638300098
    },
    {
        "content": "<p>I'm not arguing against that</p>",
        "id": 263195428,
        "sender_full_name": "Sukera",
        "timestamp": 1638300273
    },
    {
        "content": "<p>Isn’t that why we have Project.toml and manifest.toml files?</p>",
        "id": 263202946,
        "sender_full_name": "Mason Protter",
        "timestamp": 1638303724
    },
    {
        "content": "<p>I’ve certainly always found Julia projects split into packages waaaay more reproducible than a anything else out there in the scientific community. </p>\n<p>“Run this make file” is <strong>not</strong> reproducible.</p>",
        "id": 263203081,
        "sender_full_name": "Mason Protter",
        "timestamp": 1638303816
    },
    {
        "content": "<p>Or even worse is “here’s my Matlab script”</p>",
        "id": 263203101,
        "sender_full_name": "Mason Protter",
        "timestamp": 1638303830
    },
    {
        "content": "<p>my point is that a monorepo implies keeping things that should be tracked via seperate versions with the same version - and that's not a good thing</p>",
        "id": 263203170,
        "sender_full_name": "Sukera",
        "timestamp": 1638303850
    },
    {
        "content": "<p>I'm not at all opposed to having subprojects (in terms of having subdirectories with their own Project.toml)</p>",
        "id": 263203259,
        "sender_full_name": "Sukera",
        "timestamp": 1638303895
    },
    {
        "content": "<p>as long as those subprojects are semantically supposed to be tracked with the same version, it's fine</p>",
        "id": 263203363,
        "sender_full_name": "Sukera",
        "timestamp": 1638303947
    },
    {
        "content": "<p>on example for that would be having a subdirectory for plotting, while the main project doesn't require plotting packages</p>",
        "id": 263203454,
        "sender_full_name": "Sukera",
        "timestamp": 1638303979
    },
    {
        "content": "<p>I’m agreeing with you. I’m disagreeing with <span class=\"user-mention\" data-user-id=\"272632\">@Yakir Luc Gagnon</span></p>",
        "id": 263205119,
        "sender_full_name": "Mason Protter",
        "timestamp": 1638304763
    },
    {
        "content": "<p>I hope we are all talking about the same thing here. Different research fields might legitimately lend them selves to one way more than the other. In my field, behavioral biology (or more specifically visual ecology) for instance, we have tons of raw videos, we (mostly manually) track animals behaving in them, calibrate some of those results, and analyze the stats. There isn't tons in there that could easily get separated out into packages that would be ultra useful for the community. </p>\n<p>My point is that things that are mostly (even only) useful for one specific publication shouldn't need to be semver-tracked, with coverage reports and continuous integration, full documentation, and in the general registry. They can start off as a small module, in a sub-directory of the monorepo in which said Application-project resides. Doing so allows the researcher to think in a composable manner, containing pieces of the analysis within modules, while freeing her/him from maintaining a separate package that only this publication will use. It's kind of neat. </p>\n<p>This snapshot, this project that is an application, doesn't need to be scattered across github/lab in a meticulous semver network of packages. It's gonna exist and be used literally only for that one publication. And of course, if more publications/people find parts of it useful, let those inner modules bud out as fully fledged packages!</p>\n<p>I honestly think we're thinking of different things when we say \"publications\". I have a feeling that when you publish you publish super useful code or analysis tool while I publish \"findings\"... I'd love to hear how I could improve this process, which is why I started this thread, so please let me know where I've misunderstood you.</p>",
        "id": 263218256,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638311377
    },
    {
        "content": "<p>Again, we're not talking about forcefully ripping things apart into multiple packages and registering them.</p>",
        "id": 263218412,
        "sender_full_name": "Sukera",
        "timestamp": 1638311459
    },
    {
        "content": "<p>and I think we (I at least) am very much thinking of code associated with your publication, which serves as purely a tool to achieve your analysis. Your focus is not on the artifact (i.e. the code) itself - that's fine and we're not talking about forcefully seperating the two.</p>",
        "id": 263218601,
        "sender_full_name": "Sukera",
        "timestamp": 1638311566
    },
    {
        "content": "<p>what we _are_ talking about is tracking changes in that code and (most importantly) _providing it as part of your publication_, even if it's not the main point of your work. This immensely helps in reproducing your results.</p>",
        "id": 263218715,
        "sender_full_name": "Sukera",
        "timestamp": 1638311621
    },
    {
        "content": "<p>However, at the same time, if you _do_ find yourself writing the same code over and over and over again for the same kinds of publications - factoring them out into their own thing (i.e. package) and referencing _that_ with a consistent version makes both your and your colleagues' life easier, because they don't have to rely on a fragile setup where things can change all the time. To that extent, a <code>Project.toml</code> and a <code>Manifest.toml</code> you can <code>]instantiate</code> are extremely useful tools - no more, no less. Neither of those two imply that you _have_ to create a package, register,  publish &amp; maintain it though - it just makes it easier to use code _that isn't directly shipped with the code directly associated with your publication_ or that's shared by multiple publications.</p>",
        "id": 263219030,
        "sender_full_name": "Sukera",
        "timestamp": 1638311785
    },
    {
        "content": "<p>I'm actually not sure if you're responding to me or Mason.. </p>\n<p>Who said anything about not using a Project and Manifest file...? Did you see j-fu's outlined suggestion in his blog? That is the monorepo I was promoting. Of course we'll use Project and Manifest files, testing, docs, and a readme -- for the Application, the monorepo. That's how we'd make it reproducible. The fact we don't maintain composable chunks in separate packages elsewhere on the web makes it very self contained.    </p>\n<p>Honestly, I think we're just talking over each other's heads now.</p>",
        "id": 263220839,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638312891
    },
    {
        "content": "<p>I was replying to you, and I'm fairly certain Mason &amp; I agree on this :)</p>",
        "id": 263221042,
        "sender_full_name": "Sukera",
        "timestamp": 1638313034
    },
    {
        "content": "<p>Yeah. Usually what I try to do when I'm doing research for a paper is that I'll make a <em>local</em> package on my computer (or a remote machine). Rarely does this thing ever get published anywhere. </p>\n<p>At first, the functions in this package are basically just wrappers around a script that I can call from the REPL or a notebook, but then as I start doing more and more stuff and I get a feel for what sub-functionality is being duplicated a lot, I'll start splitting out parts of these things into their own utility functions. By the end of the project, the package ends up having a hierarchical structure with some very general purpose utilities being wrapped by some quite specialized pipeline functions. That way, almost all the work I'm doing at the REPL / notebook is just writing <code>f(x, y)</code>, inspecting the output and then changing things in the package and continuing. </p>\n<p>Sometimes through this process I'll notice some group of functions that I'm pretty sure I'll be using again at a future date so I turn that into it's own separate module.</p>",
        "id": 263221078,
        "sender_full_name": "Mason Protter",
        "timestamp": 1638313082
    },
    {
        "content": "<p>Definitely not saying to always split things up all the time</p>",
        "id": 263221156,
        "sender_full_name": "Mason Protter",
        "timestamp": 1638313118
    },
    {
        "content": "<p>But it pays to put yourself in a position where it's easy to split thing into sub-repos</p>",
        "id": 263221187,
        "sender_full_name": "Mason Protter",
        "timestamp": 1638313143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"272632\">@Yakir Luc Gagnon</span>  I guess there's a difference in terminology - in Software Engineering, a \"monorepo\" is a collection of distinct, unrelated projects (that should have their own versions) being tracked in a single repo with a single version instead. This is what I'm arguing against.</p>",
        "id": 263221193,
        "sender_full_name": "Sukera",
        "timestamp": 1638313147
    },
    {
        "content": "<p>That's also my hangup with calling your approach a \"monorepo\" - it isn't! it's just a single repo for a single project (or it seems to be, if I understand you corrrectly).</p>",
        "id": 263221252,
        "sender_full_name": "Sukera",
        "timestamp": 1638313196
    },
    {
        "content": "<p>One famous example is for a monorepo is (or at least used to be) windows. The operating system. Everything, from kernel to windows explorer, to graphics stack is/was a single repo with a single version - the windows version and its build number.</p>",
        "id": 263221426,
        "sender_full_name": "Sukera",
        "timestamp": 1638313268
    },
    {
        "content": "<p>blah! no one wants that! I'll argue against that too!</p>\n<p>You understood me perfectly well. And I was seemingly using the term monorepo incorrectly (to me, mono - single, repo - repository).</p>",
        "id": 263221487,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638313311
    },
    {
        "content": "<p>No worries! :) Not all meanings for words can be inferred from their linguistic origins alone after all</p>",
        "id": 263221595,
        "sender_full_name": "Sukera",
        "timestamp": 1638313371
    },
    {
        "content": "<p>I guess it's one more reason for why a universal translator is an insanely hard project - not even the same language can be translated to itself <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 263221741,
        "sender_full_name": "Sukera",
        "timestamp": 1638313456
    },
    {
        "content": "<p>Sorry for having introduced \"That-What-Must-Not-Be-Named\"  (monorepo) into the discussion. It was just meant as a  bit of an analogy <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> ...</p>",
        "id": 263226532,
        "sender_full_name": "j-fu",
        "timestamp": 1638316738
    },
    {
        "content": "<p>Yeah, I tried to understand where and what went wrong. You introduced it and I just went with it cause it made total sense to me. I'm glad at least we understood each other. </p>\n<p>Thanks all for a great discussion (love <img alt=\":zulip:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/zulip.png\" title=\"zulip\">!)</p>",
        "id": 263254028,
        "sender_full_name": "Yakir Luc Gagnon",
        "timestamp": 1638344579
    }
]