[
    {
        "content": "<p>Hi i am a beginner with autodiff packages. In a test function, one input variable is a <code>Dict</code> with an <code>x</code> and a <code>y</code> component. <code>x</code> type is changed by running the function through ForwardDiff or ReverseDiff. </p>\n<ul>\n<li>from a  <code>:x =&gt; [6, 2, 3]</code> </li>\n<li>to a scary looking  [last line below] <code>:x =&gt; ForwardDiff.Dual{ForwardDiff.Tag{var\"#165#166\", Int64}, Int64, 3}[Dual{ForwardDiff.Tag{var\"#165#166\", Int64}}(2,1,0,0), Dual{ForwardDiff.Tag{var\"#165#166\", Int64}}(3,0,1,0), </code> <strong>[not finished]</strong></li>\n</ul>\n<p>is this expected? Is there documentation on this? </p>\n<p>1) function / to be differentiated</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">dfweight</span><span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"p\">,</span><span class=\"n\">x_inp</span><span class=\"p\">)</span>\n    <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"ss\">:x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x_inp</span>\n    <span class=\"n\">df1</span> <span class=\"o\">=</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n    <span class=\"n\">aa</span><span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">.*</span> <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"ss\">:x</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">aa</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>2) REPL log.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">xloc</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">2</span>\n <span class=\"mi\">3</span>\n <span class=\"mi\">7</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">dic</span><span class=\"o\">=</span><span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:x</span> <span class=\"o\">=&gt;</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">;</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"ss\">:y</span><span class=\"o\">=&gt;</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">entries</span><span class=\"o\">:</span>\n  <span class=\"ss\">:y</span> <span class=\"o\">=&gt;</span> <span class=\"mf\">0.5</span>\n  <span class=\"ss\">:x</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">dfweight</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"p\">,</span><span class=\"n\">xloc</span><span class=\"p\">)</span> <span class=\"c\"># --&gt; 29</span>\n<span class=\"mi\">29</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">ForwardDiff</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">dfweight</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span><span class=\"n\">xloc</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>\n <span class=\"mi\">2</span>\n <span class=\"mi\">3</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">dic</span>\n<span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">entries</span><span class=\"o\">:</span>\n  <span class=\"ss\">:y</span> <span class=\"o\">=&gt;</span> <span class=\"mf\">0.5</span>\n  <span class=\"ss\">:x</span> <span class=\"o\">=&gt;</span> <span class=\"n\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Tag</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#165#166\"</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}[</span><span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardD…</span>\n</code></pre></div>",
        "id": 257846145,
        "sender_full_name": "reumle",
        "timestamp": 1634404164
    },
    {
        "content": "<p>Yes this is expected. Passing numbers of a weird type through your function is precisely how ForwardDiff works:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">id</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nd\">@show</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">ForwardDiff</span><span class=\"o\">.</span><span class=\"n\">derivative</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Tag</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">),</span> <span class=\"kt\">Int64</span><span class=\"p\">}}(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">ForwardDiff</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">xs</span> <span class=\"o\">-&gt;</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">abs2</span> <span class=\"o\">∘</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">])</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Tag</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#9#10\"</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}(</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Tag</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#9#10\"</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}(</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Tag</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#9#10\"</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}(</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">14</span>\n <span class=\"mi\">22</span>\n <span class=\"mi\">26</span>\n</code></pre></div>\n<p>There's a bit of description here: <a href=\"https://juliadiff.org/ForwardDiff.jl/latest/dev/how_it_works.html\">https://juliadiff.org/ForwardDiff.jl/latest/dev/how_it_works.html</a> . There's a longer description here: <a href=\"https://github.com/MikeInnes/diff-zoo\">https://github.com/MikeInnes/diff-zoo</a></p>",
        "id": 257854420,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1634411992
    },
    {
        "content": "<p>see also this discussion on zulip: <a href=\"#narrow/stream/225542-helpdesk/topic/Comparing.20julia.20and.20numpy/near/209135246\">https://julialang.zulipchat.com/#narrow/stream/225542-helpdesk/topic/Comparing.20julia.20and.20numpy/near/209135246</a></p>",
        "id": 257860587,
        "sender_full_name": "j-fu",
        "timestamp": 1634417671
    },
    {
        "content": "<p>Thank you Michael, j-fu!</p>",
        "id": 257903529,
        "sender_full_name": "reumle",
        "timestamp": 1634462268
    }
]