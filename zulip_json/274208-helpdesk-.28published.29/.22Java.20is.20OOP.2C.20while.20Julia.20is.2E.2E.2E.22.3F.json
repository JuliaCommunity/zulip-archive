[
    {
        "content": "<p>Hey everyone, I was wondering if there is a name for the programming paradigm in Julia. Is there such a thing ?</p>",
        "id": 270901567,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644169384
    },
    {
        "content": "<p>Functional programming.</p>",
        "id": 270901703,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1644169553
    },
    {
        "content": "<p>Oh, really? I thought Julia wasn't functional programming.</p>",
        "id": 270901759,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644169580
    },
    {
        "content": "<p>I guess I have to read a bit more in functional programming then.</p>",
        "id": 270901780,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644169598
    },
    {
        "content": "<p>I remember reading somewhere that Julia wasn't actual FP, but that incorporated some aspects of it.</p>",
        "id": 270901882,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644169719
    },
    {
        "content": "<p>FPMD :-)</p>",
        "id": 270902995,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1644170949
    },
    {
        "content": "<p>Multiple Dispath programing?!</p>",
        "id": 270903002,
        "sender_full_name": "Elias Carvalho",
        "timestamp": 1644170960
    },
    {
        "content": "<p>There's a difference between functional programming and \"pure\" functional programming, and while Julia definitely doesn't belong to the latter category it does belong to the former. As a point of comparison, Lisp is also often called a functional programming language. In the end, it's probably best to call Julia \"multi-paradigm\" which is the label often applied to languages like python.</p>",
        "id": 270906250,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1644174952
    },
    {
        "content": "<p>I certainly wouldn't call julia a functional programming language. It doesn't really focus on a specific 'paradigm', at least not a paradigm that non-julia programmers would recognize</p>",
        "id": 270907004,
        "sender_full_name": "Mason Protter",
        "timestamp": 1644175676
    },
    {
        "content": "<p>I see. I thought perhaps Julia was following some <em>known</em> paradigm. But, as pointed, it's own docs state that it's a multi-paradigm lang. Not problem, I was just wondering if a package I was working on could somehow be placed in a specific paradigm since I was using Julia.</p>",
        "id": 270907811,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644176713
    },
    {
        "content": "<p>Sure. You can write code in pretty much any paradigm you like in julia</p>",
        "id": 270907892,
        "sender_full_name": "Mason Protter",
        "timestamp": 1644176789
    },
    {
        "content": "<p>More than anything else, single paradigm langauges are more about penalizing people from deviating from a specific paradigm.</p>",
        "id": 270907920,
        "sender_full_name": "Mason Protter",
        "timestamp": 1644176841
    },
    {
        "content": "<p>I don't think julia is very functional currently, though I personally would like it to be more. And maybe it will be, e.g. <a href=\"https://github.com/JuliaLang/julia/pull/31630#issue-429910148\">https://github.com/JuliaLang/julia/pull/31630#issue-429910148</a></p>",
        "id": 270908456,
        "sender_full_name": "jar",
        "timestamp": 1644177445
    },
    {
        "content": "<p>Julia has what one needs to write functional code. It doesn't always have what one needs to write performant functional code, but (hot take) neither does Haskell despite what they might tell you <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 270908566,
        "sender_full_name": "Mason Protter",
        "timestamp": 1644177549
    },
    {
        "content": "<p>But yes, I certainly wouldn't advocate for writing functional style code in julia in many circumstances. Really depends. Julia is much more of a practical language than an ideological one.</p>",
        "id": 270908795,
        "sender_full_name": "Mason Protter",
        "timestamp": 1644177722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296263\">Adam non-jedi Beckmeyer</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.22Java.20is.20OOP.2C.20while.20Julia.20is.2E.2E.2E.22.3F/near/270906250\">said</a>:</p>\n<blockquote>\n<p>There's a difference between functional programming and \"pure\" functional programming, and while Julia definitely doesn't belong to the latter category it does belong to the former. As a point of comparison, Lisp is also often called a functional programming language. In the end, it's probably best to call Julia \"multi-paradigm\" which is the label often applied to languages like python.</p>\n</blockquote>\n<p>And given how little agreement there is about in- and out-group membership for each of these \"paradigms\", trying to assign a language into a neat set of categories is an inherently lossy exercise. \"imperative\" vs \"declarative\" is another tarpit.</p>",
        "id": 270910077,
        "sender_full_name": "Brian Chen",
        "timestamp": 1644179418
    },
    {
        "content": "<p>To borrow a line from the OO-sphere, paradigms are \"has-a\" relationships rather than \"is-a\". Even then the threshold for having is not clear, hence the disagreement between pure FP and FP (and pure FP and purer FP, etc.)</p>",
        "id": 270910180,
        "sender_full_name": "Brian Chen",
        "timestamp": 1644179586
    },
    {
        "content": "<p>I think even the line between <code>has-a</code> vs <code>is-a</code> gets blurred too. E.g. in many people's minds, functional programming is as much about <strong>disallowing</strong> things as it is about allowing features</p>",
        "id": 270910384,
        "sender_full_name": "Mason Protter",
        "timestamp": 1644179863
    },
    {
        "content": "<p>This <code>has-a</code> is a nice way to look at it.</p>",
        "id": 270910739,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644180293
    },
    {
        "content": "<p>My own hot take is that saying X language follows Y paradigm is primarily social signalling. It evokes a primarily emotional response and serves as a (usually poor) heuristic for those looking for a reason to jump on the bandwagon or avoid it like the plague.</p>",
        "id": 270913355,
        "sender_full_name": "Brian Chen",
        "timestamp": 1644183538
    },
    {
        "content": "<p>For this reason, I'd argue it's a poor predictor of how well one's actual experience with the language will go. IMO there are many more quantitative and qualitative dimensions to assess a language by before having to resort to such vagaries.</p>",
        "id": 270913429,
        "sender_full_name": "Brian Chen",
        "timestamp": 1644183655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272644\">Fredrik Ekre</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.22Java.20is.20OOP.2C.20while.20Julia.20is.2E.2E.2E.22.3F/near/270901703\">said</a>:</p>\n<blockquote>\n<p>Functional programming.</p>\n</blockquote>\n<p>YES!!!</p>",
        "id": 270915946,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1644187120
    },
    {
        "content": "<p>The marketing around these paradigms does confuse things. As we saw in the other <a href=\"#narrow/stream/137791-general/topic/Object.20Oriented.20Programming\">OOP thread</a>, programming languages all say they're \"functional\" these days, just like they all were \"object-oriented\" in 2000 and \"structured\" before that. Often such languages capture some of the ideas of $paradigm but miss others.</p>",
        "id": 270917167,
        "sender_full_name": "jar",
        "timestamp": 1644188858
    },
    {
        "content": "<p>Personally, I call it \"dispatch-oriented programming\", because concepts like type-stability are really critical here, and don't really have an analogue in languages that aren't focused around multiple dispatch... but  not sure how other folks feel about that term</p>",
        "id": 270919047,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1644191844
    },
    {
        "content": "<p>The <a href=\"https://en.wikipedia.org/wiki/Julia_(programming_language)\">Wikipedia article on Julia</a> says</p>\n<blockquote>\n<p>Distinctive aspects of Julia's design include a type system with parametric polymorphism in a dynamic programming language; with multiple dispatch as its core programming paradigm.</p>\n</blockquote>",
        "id": 270923992,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1644198860
    },
    {
        "content": "<p>when asked to select \"white\", \"black\", \"hispanic\", \"asian\", I just want to scream!</p>",
        "id": 270940541,
        "sender_full_name": "Patrick Toche",
        "timestamp": 1644218152
    }
]