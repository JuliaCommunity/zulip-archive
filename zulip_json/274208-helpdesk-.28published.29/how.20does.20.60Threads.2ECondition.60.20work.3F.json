[
    {
        "content": "<p><code>Base.Condition</code> works exactly like I'd expect it to, given the docs, but I don't understand <code>Threads.Condition</code> at all.</p>\n<p>See for example, the following</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Threads</span>\n<span class=\"k\">using</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Threads</span><span class=\"o\">:</span> <span class=\"nd\">@spawn</span><span class=\"p\">,</span> <span class=\"kt\">Condition</span>\n\n<span class=\"k\">function</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">Condition</span><span class=\"p\">)</span>\n    <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"hello f\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">g</span><span class=\"p\">()</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"kt\">Condition</span><span class=\"p\">()</span>\n    <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"nd\">@spawn</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"hello g\"</span><span class=\"p\">)</span>\n    <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"n\">unlock</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>This only prints <code>\"hello g\"</code>.  There doesn't seem to be anything I can do to get the condition to stop blocking.</p>\n<p>Also, I'm not completely sure I understand what <code>lock</code> is doing, I take it is ensuring that a certain piece of memory can only be written to by the current thread?</p>",
        "id": 229118987,
        "sender_full_name": "Expanding Man",
        "timestamp": 1615055791
    },
    {
        "content": "<p>I strongly suggest to \"never\" write rogue <code>@spawn</code>/<code>@async</code> like this. They should \"always\" be in <code>@sync</code>. (Of course, by \"never\", I mean as in \"I never write <code>@goto</code> (except when I do).\" But I do hope we can improve <code>@sync</code>.)</p>\n<p>Anyway, <code>@sync</code> here is useful for finding out what went wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">g</span><span class=\"p\">()</span>\n           <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"kt\">Condition</span><span class=\"p\">()</span>\n           <span class=\"nd\">@sync</span> <span class=\"k\">begin</span>\n               <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n               <span class=\"nd\">@spawn</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n               <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"hello g\"</span><span class=\"p\">)</span>\n               <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n               <span class=\"n\">unlock</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span><span class=\"p\">()</span>\n<span class=\"n\">hello</span> <span class=\"n\">g</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">TaskFailedException</span><span class=\"o\">:</span>\n<span class=\"n\">concurrency</span> <span class=\"n\">violation</span> <span class=\"n\">detected</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">33</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">concurrency_violation</span><span class=\"p\">()</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">condition</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">assert_havelock</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">condition</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">27</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">assert_havelock</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">19</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">assert_havelock</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">condition</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">GenericCondition</span><span class=\"p\">{</span><span class=\"kt\">ReentrantLock</span><span class=\"p\">})</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">condition</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">102</span>\n <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">var</span><span class=\"s\">\"#3#4\"</span><span class=\"p\">{</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">GenericCondition</span><span class=\"p\">{</span><span class=\"kt\">ReentrantLock</span><span class=\"p\">}})()</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">169</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">sync_end</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Channel</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">})</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">314</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">333</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">g</span><span class=\"p\">()</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">3</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>As you can see from</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">GenericCondition</span><span class=\"p\">{</span><span class=\"kt\">ReentrantLock</span><span class=\"p\">})</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">condition</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">102</span>\n <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>the task system doesn't like <code>wait</code> in <code>f</code> and says it is a concurrency violation.</p>\n<p>To actually understand <code>Threads.Condition</code> usage, the documentation <a href=\"https://docs.julialang.org/en/v1/base/multi-threading/#Base.Threads.Condition\">https://docs.julialang.org/en/v1/base/multi-threading/#Base.Threads.Condition</a> is helpful:</p>\n<blockquote>\n<p>Therefore idiomatic use of a Threads.Condition c looks like the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>lock(c)\ntry\n    while !thing_we_are_waiting_for\n        wait(c)\n    end\nfinally\n    unlock(c)\nend\n</code></pre></div>\n\n</blockquote>\n<p>So, you need some object for representing <code>thing_we_are_waiting_for</code>. An MWE is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ulia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">wait_for</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">Condition</span><span class=\"p\">)</span>\n           <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n               <span class=\"k\">while</span> <span class=\"o\">!</span><span class=\"n\">wait_for</span><span class=\"p\">[]</span>\n                   <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"hello f\"</span><span class=\"p\">)</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">g</span><span class=\"p\">()</span>\n           <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"kt\">Condition</span><span class=\"p\">()</span>\n           <span class=\"n\">wait_for</span> <span class=\"o\">=</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span>\n           <span class=\"nd\">@sync</span> <span class=\"k\">begin</span>\n               <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n                   <span class=\"nd\">@spawn</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">wait_for</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n                   <span class=\"n\">wait_for</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n                   <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"hello g\"</span><span class=\"p\">)</span>\n                   <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span><span class=\"p\">();</span>\n<span class=\"n\">hello</span> <span class=\"n\">g</span>\n<span class=\"n\">hello</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>If you want to look at an example, see <a href=\"https://github.com/JuliaFolds/FoldsThreads.jl/blob/6c808a0f7b13fc6d813161602731890c034a38ef/src/utils.jl#L42-L72\">my implementation of <code>Promise</code> in FoldsThreads.jl</a>.</p>",
        "id": 229137749,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1615072875
    },
    {
        "content": "<blockquote>\n<p>what <code>lock</code> is doing</p>\n</blockquote>\n<p>As you can see in the example and the documentation, there is typically a <code>thing_we_are_waiting_for</code> and it is possible that it is not OK to access it concurrently. In this case, a lock is required for avoiding data races.</p>\n<p>Another way to understand <code>lock</code>/<code>unlock</code> around <code>wait</code>/<code>notify</code> is to read them as \"start/stop synchronization region\" (if it makes sense).</p>",
        "id": 229138028,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1615073197
    },
    {
        "content": "<p>(BTW, if I were to be very honest, the best place to ask this is Slack (and then maybe Discourse), since there are more threading gurus out there. I'll do my best here, though.)</p>",
        "id": 229139177,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1615074392
    },
    {
        "content": "<p>You need locks both for <code>notify</code> and for <code>wait</code>. Also they are difficult to compose. For example this works:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"o\">.</span><span class=\"n\">Threads</span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"hello f\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"hello g\"</span><span class=\"p\">)</span>\n        <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">nothing</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>then:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"kt\">Condition</span><span class=\"p\">();</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"kt\">Task</span> <span class=\"p\">(</span><span class=\"n\">runnable</span><span class=\"p\">)</span> <span class=\"err\">@</span><span class=\"mh\">0x0000000167508cd0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"n\">hello</span> <span class=\"n\">g</span>\n<span class=\"n\">hello</span> <span class=\"n\">f</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">t</span>\n<span class=\"kt\">Task</span> <span class=\"p\">(</span><span class=\"n\">done</span><span class=\"p\">)</span> <span class=\"err\">@</span><span class=\"mh\">0x0000000167508cd0</span>\n</code></pre></div>",
        "id": 229171286,
        "sender_full_name": "Paul Bayer",
        "timestamp": 1615107858
    },
    {
        "content": "<p>Ok, thanks all.  I think the main thing that had me confused was that I was getting to notify before the thread was spun up and got to <code>wait</code>.</p>",
        "id": 229205220,
        "sender_full_name": "Expanding Man",
        "timestamp": 1615139672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297129\">@Takafumi Arakaki (tkf)</span> about your comment with no rogue <code>@spawn</code>, what do you do in situations where you just need to continue on with the thread and not wait for a sync?  For example, in a \"producer/consumer\" pattern, suppose you need a long-running \"consumer\" and are e.g. waiting for stuff to come in for the producer?  I can't really imagine wrapping something like that in a <code>@sync</code> because then you'd have to wait for the whole thing</p>",
        "id": 229205326,
        "sender_full_name": "Expanding Man",
        "timestamp": 1615139774
    },
    {
        "content": "<p>These are almost the same questions I've asked in stream:helpdesk+(published) topic:[Tangent]+(Un)Structured+concurrency If I understand correctly in this case there is a big <code>@sync</code> over all server (so it's basically no <code>@sync</code> at all).</p>",
        "id": 229206944,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615141199
    },
    {
        "content": "<p>But (other then infinite producer/consumer scenario) I get a feeling, that such a restriction (wrap everything in <code>@sync</code>) actually can help compiler to infer more from the code, and as a result produce more efficient code. This is worthy tradeoff I think.</p>",
        "id": 229207194,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615141375
    },
    {
        "content": "<p>You can handle producer/consumer style with \"nursery passing style\" as I noted in the last paragraph of <a href=\"#narrow/stream/274208-helpdesk-%28published%29/topic/.5BTangent.5D.20%28Un%29Structured.20concurrency/near/229164272\">https://julialang.zulipchat.com/#narrow/stream/274208-helpdesk-%28published%29/topic/.5BTangent.5D.20%28Un%29Structured.20concurrency/near/229164272</a></p>\n<p>The point is that you <em>need</em> to handle errors at some point if you want to write a correct/debuggable/testable program. Structured concurrency provides a coherent strategy for doing this; i.e., <code>end</code> of <code>@sync</code> enforces this.</p>",
        "id": 229222243,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1615155330
    }
]