[
    {
        "content": "<p>Is there a safe way to check if a (UDP)Socket is open without reaching into internals?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Sockets</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">isopen</span><span class=\"p\">(</span><span class=\"n\">UDPSocket</span><span class=\"p\">())</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">ArgumentError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UDPSocket</span><span class=\"p\">(</span><span class=\"n\">init</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">initialized</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">isopen</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">UDPSocket</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"o\">.\\</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">381</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>I know that the <code>status</code> is accessible as a property, <a href=\"https://github.com/JuliaLang/julia/blob/a5f001600806c6083eb9df55eb73e743b81da33c/base/stream.jl#L129-L137\">but the interpretation</a> of it seem to be internals.</p>\n<p>My current workaround is to wrap the socket in a struct which can only be created in such a way that the socket is bound upon creation and make my functions only accept this struct as input. </p>\n<p>Is this the idiomatic way?</p>",
        "id": 449268257,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1720172291
    },
    {
        "content": "<p>Not sure if there's an idiomatic way, but another option would be to define and use e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">isopen_nothrow</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">try</span>\n<span class=\"w\">        </span><span class=\"n\">isopen</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"n\">ex</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ArgumentError</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"n\">rethrow</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 449275153,
        "sender_full_name": "James Wrigley",
        "timestamp": 1720174372
    },
    {
        "content": "<p>How is the performance of this? </p>\n<p>Would it be ok to have in a readloop like this without it being a source of dropped packets:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">isopen_nothrow</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">processpacket</span><span class=\"p\">(</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Although I guess the while thing there is pretty pointless since it is unlikely that you will hit it rather than getting an <code>EOFError</code> from <code>recv</code>.</p>",
        "id": 449277926,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1720175447
    },
    {
        "content": "<p>There'll probably be some overhead, but you could avoid it by calling <code>isopen_nothrow()</code> once before the loop and using <code>while isopen(sock)</code>. That should work because the status won't be reset to any init/uninit flag after the socket has been opened.</p>",
        "id": 449278794,
        "sender_full_name": "James Wrigley",
        "timestamp": 1720175786
    }
]