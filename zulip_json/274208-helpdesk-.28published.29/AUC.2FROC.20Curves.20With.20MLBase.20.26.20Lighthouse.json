[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269184\">@Eric Hanson</span> Thank you. </p>\n<p>I was caught up in the preprocessing steps. <br>\nThe main ones I encountered that are <br>\nessential for working with Lighthouse are: </p>\n<ol>\n<li>Formatting Floats to Integers using: </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">actual_test</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">test2</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"ss\">:Ninjas</span><span class=\"p\">],</span> <span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"n\">predicted_test</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">ypredicted_test</span><span class=\"p\">,</span> <span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Determining the size of your Vector using: </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">actual_test</span><span class=\"p\">)</span>\n<span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">predicted_test</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This step is also a QA to make sure your <br>\nconfusion matrix is mapped 1:1</p>\n<ol start=\"3\">\n<li>Compute the Confusion Matrix</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">confusmat</span><span class=\"p\">(</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"n\">actual_test</span><span class=\"p\">,</span> <span class=\"n\">predicted_test</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Then as needed, you can apply Lighthouse<br>\nfor items such as: </p>\n<ul>\n<li>Accuracy -- Lighthouse.accuracy(confusion:: AbstractMatrix)</li>\n<li>BinaryStatistics -- Lighthouse.binary_statistics(confusion::AbstractMatrix, class_index)</li>\n</ul>\n<p>Hope this helps someone out there. </p>\n<p><span aria-label=\"koala\" class=\"emoji emoji-1f428\" role=\"img\" title=\"koala\">:koala:</span></p>",
        "id": 246528264,
        "sender_full_name": "QuBit",
        "timestamp": 1626737737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269184\">@Eric Hanson</span> </p>\n<p>Do you know how to apply <br>\nbinary_statistics (C, precision)? <br>\nand reference it in the println()</p>\n<p>I have added the function <a href=\"https://github.com/beacon-biosignals/Lighthouse.jl/blob/779c4b16324d574646e869e928e4eae48ceb5e16/src/metrics.jl#L38-L58\">HERE</a> </p>\n<p>And added the binary_statistics function found right below the function <br>\nfound at the link above.</p>\n<p>Do I need to  convert the matrix to a dataframe: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Bucket</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">binary_statistic</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Then reference the index as: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"The Precision Score is\"</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">Bucket</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"ss\">:precision</span><span class=\"p\">]))</span>\n</code></pre></div>\n<p>Yes, I have imputed the values. Might there be a <br>\nmore elegant approach? </p>\n<p>Thank you,</p>",
        "id": 246666644,
        "sender_full_name": "QuBit",
        "timestamp": 1626827225
    }
]