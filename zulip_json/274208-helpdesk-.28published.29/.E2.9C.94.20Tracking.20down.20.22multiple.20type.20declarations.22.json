[
    {
        "content": "<p>I have some code leading to this error:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">logdensityof</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">multiple</span> <span class=\"n\">type</span> <span class=\"n\">declarations</span> <span class=\"k\">for</span> <span class=\"s\">\"x\"</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">74</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>That's it, pretty useless stack trace. I could see this if you just type garbage at the REPL prompt, but I think what I entered is ok:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">logdensityof</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))))</span>\n<span class=\"kt\">Expr</span>\n  <span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">call</span>\n  <span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">3</span><span class=\"p\">,))</span>\n    <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">logdensityof</span>\n    <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"kt\">Expr</span>\n      <span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">call</span>\n      <span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n        <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">m</span>\n        <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">x</span>\n    <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"kt\">Expr</span>\n      <span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">call</span>\n      <span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n        <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">rand</span>\n        <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"kt\">Expr</span>\n          <span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">call</span>\n          <span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n            <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">m</span>\n            <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"kt\">Symbol</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Has anyone seen this before? Why no real stack trace? How can I even begin to debug this?</p>",
        "id": 279406046,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650373688
    },
    {
        "content": "<p>This seems to come from this line of <code>julia-syntax.scm</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Scheme\"><pre><span></span><code>        <span class=\"p\">((</span><span class=\"nf\">decl</span><span class=\"p\">)</span>\n         <span class=\"c1\">;; handle var::T declaration by storing the type in the var-info</span>\n         <span class=\"c1\">;; record. for non-symbols or globals, emit a type assertion.</span>\n         <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">vi</span> <span class=\"p\">(</span><span class=\"nf\">get</span> <span class=\"nv\">tab</span> <span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"no\">#f</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">vi</span>\n               <span class=\"p\">(</span><span class=\"k\">begin </span><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">equal? </span><span class=\"p\">(</span><span class=\"nf\">vinfo:type</span> <span class=\"nv\">vi</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">core</span> <span class=\"nv\">Any</span><span class=\"p\">)))</span>\n                          <span class=\"p\">(</span><span class=\"nf\">error</span> <span class=\"p\">(</span><span class=\"nb\">string </span><span class=\"s\">\"multiple type declarations for \\\"\"</span>\n                                         <span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"s\">\"\\\"\"</span><span class=\"p\">)))</span>\n                      <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">assq </span><span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"nv\">captvars</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nf\">error</span> <span class=\"p\">(</span><span class=\"nb\">string </span><span class=\"s\">\"type of \\\"\"</span> <span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"nv\">e</span><span class=\"p\">)</span>\n                                         <span class=\"s\">\"\\\" declared in inner scope\"</span><span class=\"p\">)))</span>\n                      <span class=\"p\">(</span><span class=\"nf\">vinfo:set-type!</span> <span class=\"nv\">vi</span> <span class=\"p\">(</span><span class=\"nb\">caddr </span><span class=\"nv\">e</span><span class=\"p\">))))))</span>\n</code></pre></div>\n<p>But it's still not clear why the stack trace is so broken</p>",
        "id": 279409088,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650375125
    },
    {
        "content": "<p>Is this a revise issue? The line you pasted isn't related to the error at all, no?</p>",
        "id": 279409266,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1650375224
    },
    {
        "content": "<p>Revise seems happy, as far as I can tell</p>",
        "id": 279409435,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650375295
    },
    {
        "content": "<p>Maybe a parser bug? I mean, I may well have an error, but it's getting the stack trace wrong</p>",
        "id": 279409532,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650375350
    },
    {
        "content": "<p>can you repro this in a fresh session?</p>",
        "id": 279409663,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1650375411
    },
    {
        "content": "<p>Yes</p>",
        "id": 279409799,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650375481
    },
    {
        "content": "<p>You can check that the code typed in the REPL is syntactically fine</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">logdensityof</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">rand</span> <span class=\"o\">=</span> <span class=\"n\">Returns</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">logdensityof</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"mi\">123</span>\n</code></pre></div>\n<p>I agree that the stacktrace is not informative though</p>",
        "id": 279418442,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1650379461
    },
    {
        "content": "<p>Can you reproduce it in a session started as <code>julia --startup=no</code>?</p>",
        "id": 279418793,
        "sender_full_name": "Mason Protter",
        "timestamp": 1650379651
    },
    {
        "content": "<p>Just as yet another sanity check, did you try renaming the variable <code>x</code> to something else? Does the syntax error still report the variable name <code>x</code>? (Otherwise, maybe it's from some dynamically-generated code?)</p>\n<p>Also, did you try evaluating the sub-expressions one by one?</p>\n<p>(I know that these are kind of stupid things to ask but the error in the OP is very mind-boggling...)</p>",
        "id": 279419222,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1650379850
    },
    {
        "content": "<p>It's tricky, because the problem is in a generated function. I've just tricked it into printing what's generated instead of executing it, having a look at that now</p>",
        "id": 279419370,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650379912
    },
    {
        "content": "<p>It comes down to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n    <span class=\"k\">begin</span>\n        <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:meta</span><span class=\"p\">,</span> <span class=\"ss\">:inline</span><span class=\"p\">))</span>\n        <span class=\"k\">local</span> <span class=\"n\">_retn</span>\n        <span class=\"n\">_args</span> <span class=\"o\">=</span> <span class=\"n\">argvals</span><span class=\"p\">(</span><span class=\"n\">_mc</span><span class=\"p\">)</span>\n        <span class=\"n\">_obs</span> <span class=\"o\">=</span> <span class=\"n\">observations</span><span class=\"p\">(</span><span class=\"n\">_mc</span><span class=\"p\">)</span>\n        <span class=\"n\">_cfg</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">_cfg</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">_args</span><span class=\"p\">,</span> <span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">_obs</span><span class=\"p\">,</span> <span class=\"n\">pars</span> <span class=\"o\">=</span> <span class=\"n\">_pars</span><span class=\"p\">))</span>\n        <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">_args</span><span class=\"o\">.</span><span class=\"n\">x</span>\n        <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">_pars</span><span class=\"o\">.</span><span class=\"n\">x</span>\n        <span class=\"cm\">#= /home/chad/git/Tilde.jl/src/primitives/interpret.jl:52 =#</span>\n        <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">_ctx</span><span class=\"p\">,</span> <span class=\"n\">_retn</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">tilde</span><span class=\"p\">(</span><span class=\"n\">unsafe_logdensityof</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Accessors</span><span class=\"o\">.</span><span class=\"n\">opticcompose</span><span class=\"p\">)((</span><span class=\"n\">Accessors</span><span class=\"o\">.</span><span class=\"n\">IndexLens</span><span class=\"p\">)((</span><span class=\"mi\">1</span><span class=\"p\">,))),</span> <span class=\"n\">static</span><span class=\"p\">(</span><span class=\"ss\">:x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Normal</span><span class=\"p\">(),</span> <span class=\"n\">_cfg</span><span class=\"p\">,</span> <span class=\"n\">_ctx</span><span class=\"p\">)</span>\n        <span class=\"cm\">#= /home/chad/git/Tilde.jl/src/primitives/interpret.jl:53 =#</span>\n        <span class=\"k\">isa</span><span class=\"p\">(</span><span class=\"n\">_retn</span><span class=\"p\">,</span> <span class=\"n\">ReturnNow</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">return</span> <span class=\"n\">_retn</span><span class=\"o\">.</span><span class=\"n\">value</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">)(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n            <span class=\"k\">begin</span>\n                <span class=\"cm\">#= /home/chad/git/Tilde.jl/src/primitives/interpret.jl:52 =#</span>\n                <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">_ctx</span><span class=\"p\">,</span> <span class=\"n\">_retn</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">tilde</span><span class=\"p\">(</span><span class=\"n\">unsafe_logdensityof</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Accessors</span><span class=\"o\">.</span><span class=\"n\">opticcompose</span><span class=\"p\">)((</span><span class=\"n\">Accessors</span><span class=\"o\">.</span><span class=\"n\">IndexLens</span><span class=\"p\">)((</span><span class=\"n\">j</span><span class=\"p\">,))),</span> <span class=\"n\">static</span><span class=\"p\">(</span><span class=\"ss\">:x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">μ</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"o\">:-</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]),</span> <span class=\"n\">_cfg</span><span class=\"p\">,</span> <span class=\"n\">_ctx</span><span class=\"p\">)</span>\n                <span class=\"cm\">#= /home/chad/git/Tilde.jl/src/primitives/interpret.jl:53 =#</span>\n                <span class=\"k\">isa</span><span class=\"p\">(</span><span class=\"n\">_retn</span><span class=\"p\">,</span> <span class=\"n\">ReturnNow</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">return</span> <span class=\"n\">_retn</span><span class=\"o\">.</span><span class=\"n\">value</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">_retn</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>This could use a little cleaning up, but I wouldn't think it would lead to the error I'm getting</p>",
        "id": 279419856,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650380101
    },
    {
        "content": "<blockquote>\n<p>Can you reproduce it in a session started as <code>julia --startup=no</code>?</p>\n</blockquote>\n<p>I'll try that soon. FWIW my <code>startup.jl</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">atreplinit</span><span class=\"p\">()</span> <span class=\"k\">do</span> <span class=\"n\">repl</span>\n    <span class=\"n\">repl</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">iocontext</span><span class=\"p\">[</span><span class=\"ss\">:compact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 279420175,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650380263
    },
    {
        "content": "<p>It works for some models:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"nd\">@model</span> <span class=\"k\">begin</span>\n           <span class=\"n\">a</span> <span class=\"o\">~</span> <span class=\"n\">Uniform</span><span class=\"p\">()</span>\n           <span class=\"n\">b</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n       <span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">())</span>\n<span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mf\">0.652999</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mf\">3.04375</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">logdensityof</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">(),</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"mf\">2.32655</span>\n</code></pre></div>\n<p>But then</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"nd\">@model</span> <span class=\"n\">x</span> <span class=\"k\">begin</span>\n           <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">()</span>\n           <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n               <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">μ</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.333947</span><span class=\"p\">,</span> <span class=\"mf\">1.06483</span><span class=\"p\">,</span> <span class=\"mf\">2.35892</span><span class=\"p\">,</span> <span class=\"mf\">1.45661</span><span class=\"p\">],)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">logdensityof</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">r2</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">multiple</span> <span class=\"n\">type</span> <span class=\"n\">declarations</span> <span class=\"k\">for</span> <span class=\"s\">\"x\"</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">160</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>It's not specific to <code>x</code></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"nd\">@model</span> <span class=\"n\">y</span> <span class=\"k\">begin</span>\n           <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">()</span>\n           <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n               <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">μ</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0852394</span><span class=\"p\">,</span> <span class=\"mf\">0.492802</span><span class=\"p\">,</span> <span class=\"mf\">0.68513</span><span class=\"p\">,</span> <span class=\"mf\">0.760316</span><span class=\"p\">],)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">logdensityof</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">r2</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">multiple</span> <span class=\"n\">type</span> <span class=\"n\">declarations</span> <span class=\"k\">for</span> <span class=\"s\">\"y\"</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">164</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 279422432,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650381115
    },
    {
        "content": "<p>I think I got it. I pass in named tuples for arguments, observations, and parameters. Then in the generated function, I  push some lines like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">k</span><span class=\"o\">::$</span><span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">_pars</span><span class=\"o\">.$</span><span class=\"n\">k</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I thought maybe I needed to get rid of the type annotation, but I think it might work out better to make sure the variable is treated as local. So I added</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">∪</span> <span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">pars</span><span class=\"p\">)</span> <span class=\"o\">∪</span> <span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"o\">$</span><span class=\"n\">k</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span>\n</code></pre></div>\n<p>and I think that fixes things. Thanks all for the helpful discussion <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 279431312,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650384640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286004\">Chad Scherrer</span> has marked this topic as resolved.</p>",
        "id": 279431349,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650384657
    }
]