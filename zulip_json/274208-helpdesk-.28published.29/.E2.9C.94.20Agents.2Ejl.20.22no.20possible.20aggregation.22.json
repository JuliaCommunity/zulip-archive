[
    {
        "content": "<p>I have an agent based model from which I'm attempting to aggregate data. If each of my agents has an <code>energy</code> field, I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">energy</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">energy</span><span class=\"w\"></span>\n<span class=\"n\">adata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">energy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"n\">fig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">abmexploration</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">model</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">agent_step!</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">model_step!</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">adata</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and all works well. However, I would like to exclude some agents from the aggregation (it's a mixed agent model, and for some types the <code>energy</code> field should not even be there). To do so, I thought I could use <code>NaN</code> to my advantage:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">energy</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"n\">MyAgentType1</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">energy</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nb\">NaN</span><span class=\"w\"></span>\n<span class=\"n\">nanmean</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isnan</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"n\">collection</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"n\">adata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">energy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nanmean</span><span class=\"p\">)]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, this produces a rather cryptic error:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">possible</span><span class=\"w\"> </span><span class=\"n\">aggregation</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">energy</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">nanmean</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">multi_agent_agg_types!</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DataType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">DataType</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Agents</span><span class=\"o\">.</span><span class=\"kt\">AgentBasedModel</span><span class=\"p\">{</span><span class=\"kt\">Agents</span><span class=\"o\">.</span><span class=\"kt\">ContinuousSpace</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Agents</span><span class=\"o\">.</span><span class=\"kt\">defvel</span><span class=\"p\">)},</span><span class=\"w\"> </span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Main</span><span class=\"o\">.</span><span class=\"kt\">workspace</span><span class=\"c\">#3.Blob, Main.workspace#3.Food}, Agents.Schedulers.Randomly, Dict{Symbol, Int64}, Random.TaskLocalRNG}, ::Vector{Tuple{typeof(Main.workspace#3.energy), typeof(Main.workspace#5.nanmean)}})@collect.jl:381</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">init_agent_dataframe</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Agents</span><span class=\"o\">.</span><span class=\"kt\">AgentBasedModel</span><span class=\"p\">{</span><span class=\"kt\">Agents</span><span class=\"o\">.</span><span class=\"kt\">ContinuousSpace</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Agents</span><span class=\"o\">.</span><span class=\"kt\">defvel</span><span class=\"p\">)},</span><span class=\"w\"> </span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Main</span><span class=\"o\">.</span><span class=\"kt\">workspace</span><span class=\"c\">#3.Blob, Main.workspace#3.Food}, Agents.Schedulers.Randomly, Dict{Symbol, Int64}, Random.TaskLocalRNG}, ::Vector{Tuple{typeof(Main.workspace#3.energy), typeof(Main.workspace#5.nanmean)}})@collect.jl:317</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"s\">\"#ABMObservable#27\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Main</span><span class=\"o\">.</span><span class=\"kt\">workspace</span><span class=\"c\">#3.energy), typeof(Main.workspace#5.nanmean)}}, ::Nothing, ::Bool, ::Type{InteractiveDynamics.ABMObservable}, ::Agents.AgentBasedModel{Agents.ContinuousSpace{2, true, Float64, typeof(Agents.defvel)}, Union{Main.workspace#3.Blob, Main.workspace#3.Food}, Agents.Schedulers.Randomly, Dict{Symbol, Int64}, Random.TaskLocalRNG})@model_observable.jl:40</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"s\">\"#abmplot!#30\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Main</span><span class=\"o\">.</span><span class=\"kt\">workspace</span><span class=\"c\">#3.energy), typeof(Main.workspace#5.nanmean)}}, ::Nothing, ::Bool, ::Bool, ::Bool, ::Bool, ::Base.Pairs{Symbol, typeof(Main.workspace#3.agent_color), Tuple{Symbol}, NamedTuple{(:ac,), Tuple{typeof(Main.workspace#3.agent_color)}}}, ::typeof(InteractiveDynamics.abmplot!), ::Makie.MakieLayout.Axis, ::Agents.AgentBasedModel{Agents.ContinuousSpace{2, true, Float64, typeof(Agents.defvel)}, Union{Main.workspace#3.Blob, Main.workspace#3.Food}, Agents.Schedulers.Randomly, Dict{Symbol, Int64}, Random.TaskLocalRNG})@abmplot.jl:131</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c\">#abmplot#29@abmplot.jl:112[inlined]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"s\">\"#abmexploration#81\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">{}},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Any</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:agent_step!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:model_step!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:ac</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:adata</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Main</span><span class=\"o\">.</span><span class=\"kt\">workspace</span><span class=\"c\">#3.agent_step!), typeof(Main.workspace#3.model_step!), typeof(Main.workspace#3.agent_color), Vector{Tuple{typeof(Main.workspace#3.energy), typeof(Main.workspace#5.nanmean)}}}}}, ::typeof(InteractiveDynamics.abmexploration), ::Agents.AgentBasedModel{Agents.ContinuousSpace{2, true, Float64, typeof(Agents.defvel)}, Union{Main.workspace#3.Blob, Main.workspace#3.Food}, Agents.Schedulers.Randomly, Dict{Symbol, Int64}, Random.TaskLocalRNG})@convenience.jl:39</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I didn't manage to find anything with google... and the <code>nanmean</code> method works as intended, if I call it myself. Suggestions?</p>",
        "id": 288204514,
        "sender_full_name": "Lorenzo Gaifas",
        "timestamp": 1656697857
    },
    {
        "content": "<p>I am clueless here but what about <code>missing</code>?</p>",
        "id": 288204648,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656697923
    },
    {
        "content": "<p>unfortunately no, because <code>mean([1, missing])</code> is  <code>missing</code>.</p>",
        "id": 288205585,
        "sender_full_name": "Lorenzo Gaifas",
        "timestamp": 1656698426
    },
    {
        "content": "<p>Found out how to solve the issue: use <code>collect(collection)</code> first, because whatever was being passed could not be filtered... gotta learn how to check types more easily :/</p>",
        "id": 288212872,
        "sender_full_name": "Lorenzo Gaifas",
        "timestamp": 1656702650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504808\">Lorenzo Gaifas</span> has marked this topic as resolved.</p>",
        "id": 288212877,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656702654
    }
]