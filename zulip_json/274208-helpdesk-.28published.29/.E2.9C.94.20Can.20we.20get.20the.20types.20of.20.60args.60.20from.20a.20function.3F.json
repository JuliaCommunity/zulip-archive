[
    {
        "content": "<p>Suppose I have a function such as:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Real</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">^</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there a way to get the domain type from this function (and possibly the \"codomain\", which in this case was ::Real)? I'm supposing that this function has only one method. And in case there are many, one can just take the first method as<code>first(methods(f))</code>.</p>\n<p>I wish to get something like <code>Tuple{Int,Float64}</code> for the domain type, and <code>Real</code> for the codomain.</p>\n<p>P.S: I already have  a macro that can do this during the function declaration, but I was wondering if one can do it after the function is already declared.</p>",
        "id": 294001465,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1660785470
    },
    {
        "content": "<p>Are you talking about looking things up in the method table?</p>",
        "id": 294009633,
        "sender_full_name": "Zachary P Christensen",
        "timestamp": 1660794485
    },
    {
        "content": "<p>methods(f).sig not sure about annotated return type</p>",
        "id": 294013251,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1660798583
    },
    {
        "content": "<p>annotated return types just insert a <code>convert</code> at return points, it doesn't show up in the method signature (that's inference' domain)</p>",
        "id": 294015120,
        "sender_full_name": "Sukera",
        "timestamp": 1660800487
    },
    {
        "content": "<p>in general, you'll need to know the input types to your method to get the output type(s) (there may be multiple for type unstable functions)</p>",
        "id": 294015145,
        "sender_full_name": "Sukera",
        "timestamp": 1660800522
    },
    {
        "content": "<p>It also inserts a typeassert, right? But yeah okay</p>",
        "id": 294015267,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1660800613
    },
    {
        "content": "<p>yes</p>",
        "id": 294015300,
        "sender_full_name": "Sukera",
        "timestamp": 1660800654
    },
    {
        "content": "<p>After the convert, yeah</p>",
        "id": 294015482,
        "sender_full_name": "Mason Protter",
        "timestamp": 1660800781
    },
    {
        "content": "<p>Thanks for the replies! Here is the solution I came up with. Feel free to tell me how to improve it:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">getfunctiontype</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">methodindex</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">))[</span><span class=\"n\">methodindex</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dom</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">([</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">]</span><span class=\"o\">...</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">codom</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">code_typed</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dom</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">second</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">dom</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dom</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dom</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">dom</span><span class=\"p\">,</span><span class=\"n\">codom</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This <code>if length(dom) == 1</code> is ugly, but I don't know how to avoid it.</p>",
        "id": 294070670,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1660827043
    },
    {
        "content": "<p>Do you need it? Isn't it better to return a <code>Tuple</code> in all cases, do you need a special check for the one argument case?</p>",
        "id": 294078617,
        "sender_full_name": "Sundar R",
        "timestamp": 1660829890
    },
    {
        "content": "<p>Just for curiosity, why are you willing to get these signatures? That feels like a XY problem, unless you are doing something very low level.</p>",
        "id": 294100655,
        "sender_full_name": "Leandro Mart√≠nez",
        "timestamp": 1660833663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423970\">Sundar R</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Can.20we.20get.20the.20types.20of.20.60args.60.20from.20a.20function.3F/near/294078617\">said</a>:</p>\n<blockquote>\n<p>Do you need it? Isn't it better to return a <code>Tuple</code> in all cases, do you need a special check for the one argument case?</p>\n</blockquote>\n<p>I wrote a composition that is restricted on types, so <code>Tuple{Int} == Int</code> fails. Hence, I either fix this here or in the composition implementation.<br>\nI thought fixing here would be better cause it then returns the actual types.</p>",
        "id": 294180671,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1660862343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> has marked this topic as resolved.</p>",
        "id": 294434611,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660998279
    }
]