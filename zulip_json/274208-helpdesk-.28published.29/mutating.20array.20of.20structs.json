[
    {
        "content": "<p>Suppose I have the struct</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">M</span>\n    <span class=\"n\">a</span>\n    <span class=\"n\">b</span>\n    <span class=\"n\">c</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>Now I wish to loop over each element of <code>x</code> and for each element adjust some fields. For example, if </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ind</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ss\">:a</span><span class=\"p\">,</span> <span class=\"ss\">:b</span><span class=\"p\">]</span>\n<span class=\"n\">vals</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>the desired output would be </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">300</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">300</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">300</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>The following does the job, but I wonder if this is the righ tway to go...</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">Setfield</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">xi</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"nd\">@set!</span> <span class=\"n\">xi</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">10</span>\n    <span class=\"nd\">@set!</span> <span class=\"n\">xi</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">300</span>\n    <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xi</span>\n<span class=\"k\">end</span>\n<span class=\"n\">x</span>\n</code></pre></div>\n<p>Any suggestions?</p>",
        "id": 268585021,
        "sender_full_name": "Frank van der Meulen",
        "timestamp": 1642617818
    },
    {
        "content": "<p>That's how I'd do it, yeah.</p>",
        "id": 268586210,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642618326
    },
    {
        "content": "<p>I assume you did it for ease of example, but just in case you don't know, leaving the fields of your struct untyped can carry a hefty performance price.</p>",
        "id": 268586715,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642618554
    },
    {
        "content": "<p>Yes, that was for each of example indeed. Ok, good to hear.</p>\n<p>Now in this code I explicitly wrote like <code>xi.a=10</code>,  and similarly <code>xi.b=100</code>, but I would rather loop over <code>ind</code>. I don't know how to do that.</p>",
        "id": 268587224,
        "sender_full_name": "Frank van der Meulen",
        "timestamp": 1642618746
    },
    {
        "content": "<p>I wonder, maybe it's possible to use <code>map!</code>?</p>",
        "id": 268587403,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1642618807
    },
    {
        "content": "<p>yeah,</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">map!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"n\">xi</span>\n    <span class=\"nd\">@set!</span> <span class=\"n\">xi</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">10</span>\n    <span class=\"nd\">@set!</span> <span class=\"n\">xi</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">300</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 268587568,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642618861
    },
    {
        "content": "<p>I think you're looking for</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"n\">ind</span><span class=\"p\">)</span>\n        <span class=\"n\">setproperty!</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n</code></pre></div>",
        "id": 268587783,
        "sender_full_name": "Expanding Man",
        "timestamp": 1642618944
    },
    {
        "content": "<p>Setproperty won't work for immutable structs</p>",
        "id": 268587826,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642618965
    },
    {
        "content": "<p>Sorry, I just noticed that this was immutable, yeah you need to use whatever is the equivalent from <code>Setfield</code></p>",
        "id": 268587873,
        "sender_full_name": "Expanding Man",
        "timestamp": 1642618987
    },
    {
        "content": "<p>or do it by explicitly creating new structs</p>",
        "id": 268587891,
        "sender_full_name": "Expanding Man",
        "timestamp": 1642618994
    },
    {
        "content": "<p>Here is what <code>@set!</code> does:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@macroexpand</span> <span class=\"nd\">@set!</span> <span class=\"n\">xi</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">quote</span>\n    <span class=\"cm\">#= /home/mason/.julia/packages/Setfield/NshXm/src/sugar.jl:191 =#</span>\n    <span class=\"sa\">var</span><span class=\"s\">\"#54###lens#274\"</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">)((</span><span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"n\">compose</span><span class=\"p\">)((</span><span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"n\">PropertyLens</span><span class=\"p\">){</span><span class=\"ss\">:a</span><span class=\"p\">}()))</span>\n    <span class=\"cm\">#= /home/mason/.julia/packages/Setfield/NshXm/src/sugar.jl:192 =#</span>\n    <span class=\"n\">xi</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">)(</span><span class=\"n\">xi</span><span class=\"p\">,</span> <span class=\"sa\">var</span><span class=\"s\">\"#54###lens#274\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>so you can just copy and adapt that</p>",
        "id": 268587975,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642619035
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">map!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"n\">xi</span>\n           <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"p\">(</span><span class=\"ss\">:a</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"ss\">:b</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n               <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"kt\">PropertyLens</span><span class=\"p\">{</span><span class=\"kt\">prop</span><span class=\"p\">}()</span>\n               <span class=\"n\">xi</span> <span class=\"o\">=</span> <span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">xi</span>\n       <span class=\"k\">end</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">M</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 268588120,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642619075
    },
    {
        "content": "<p>If I were doing this I would probably structure it as a <code>map!</code> over a function that takes an <code>M</code> and returns another <code>M</code>.</p>",
        "id": 268588178,
        "sender_full_name": "Expanding Man",
        "timestamp": 1642619097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/mutating.20array.20of.20structs/near/268588120\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">map!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"n\">xi</span>\n           <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"p\">(</span><span class=\"ss\">:a</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"ss\">:b</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n               <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"kt\">PropertyLens</span><span class=\"p\">{</span><span class=\"kt\">prop</span><span class=\"p\">}()</span>\n               <span class=\"n\">xi</span> <span class=\"o\">=</span> <span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">xi</span>\n       <span class=\"k\">end</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">M</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n <span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, that looks like what I need.</p>",
        "id": 268588732,
        "sender_full_name": "Frank van der Meulen",
        "timestamp": 1642619308
    },
    {
        "content": "<p>One thing I'll also note is that if the property being modified isn't known as a compile time constant, this will also incur some hefty performance penalties.</p>",
        "id": 268588816,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642619354
    },
    {
        "content": "<p>So you really want your <code>ind</code> to not be a vector, but a <code>Tuple</code> and you ideally want it to be constant propagated into the function.</p>",
        "id": 268588888,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642619393
    },
    {
        "content": "<p>There's <code>ConstructionBase.setproperties</code> if you want to update multiple fields in a <code>struct</code> at once <a href=\"https://juliaobjects.github.io/ConstructionBase.jl/dev/#ConstructionBase.setproperties\">https://juliaobjects.github.io/ConstructionBase.jl/dev/#ConstructionBase.setproperties</a></p>\n<p><a href=\"https://github.com/search?q=Setfields.jl&amp;type=Repositories\">Setfields.jl</a> and <a href=\"https://github.com/search?q=Accessors.jl&amp;type=Repositories\">Accessors.jl</a> both use <code>setproperties</code> internally</p>",
        "id": 268589336,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1642619588
    },
    {
        "content": "<p>Also, if you don't have any GC-managed objects in the struct (= it's <code>Base.datatype_pointerfree</code>), you can also do an evil pointer hack to mutate the field directly... :) Ref: <a href=\"https://github.com/tkf/RecordArrays.jl\">https://github.com/tkf/RecordArrays.jl</a></p>",
        "id": 268589415,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1642619636
    },
    {
        "content": "<p>One other thing: If <code>M</code> is an <code>isbits</code> struct, then you have another that might interest you. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"kt\">N</span>\n           <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n           <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n           <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n       <span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)];</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"n\">reshape</span><span class=\"p\">,</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"n\">reshape</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">})</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Int64</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>  <span class=\"mi\">4</span>  <span class=\"mi\">7</span>\n <span class=\"mi\">2</span>  <span class=\"mi\">5</span>  <span class=\"mi\">8</span>\n <span class=\"mi\">3</span>  <span class=\"mi\">6</span>  <span class=\"mi\">9</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Y</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Y</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"mi\">300</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Y</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"n\">reshape</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">})</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Int64</span><span class=\"o\">:</span>\n  <span class=\"mi\">10</span>   <span class=\"mi\">10</span>   <span class=\"mi\">10</span>\n <span class=\"mi\">300</span>  <span class=\"mi\">300</span>  <span class=\"mi\">300</span>\n   <span class=\"mi\">3</span>    <span class=\"mi\">6</span>    <span class=\"mi\">9</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">y</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 268589647,
        "sender_full_name": "Mason Protter",
        "timestamp": 1642619738
    },
    {
        "content": "<p>No problem to make it a tuple. I simplified the actual problem a bit. So not sure about the <code>isbits</code> solution.</p>",
        "id": 268589807,
        "sender_full_name": "Frank van der Meulen",
        "timestamp": 1642619798
    },
    {
        "content": "<p>The actual problem where I wish to use this is slightly more complicated, and there the solution using <code>ConstructionBase</code> does not seem to work, I tried to adapt <span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> code snippet using <code>Setfield.PropertyLens</code>, but failed. </p>\n<p>So what is the more complicated problem? The structs <code>M</code> are in fact a field of another struct, say <code>Q</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">ConstructionBase</span>\n<span class=\"k\">struct</span> <span class=\"kt\">Q</span>\n    <span class=\"n\">z</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The following fails</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)),</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)),</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">))]</span><span class=\"o\">.</span> <span class=\"c\"># wish to adjust fields a and b of M in all elements of the vector x</span>\n<span class=\"n\">tup</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n   <span class=\"n\">xi</span> <span class=\"o\">=</span>  <span class=\"n\">setproperties</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">tup</span><span class=\"p\">)</span>\n   <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span><span class=\"n\">xi</span>\n<span class=\"k\">end</span>\n<span class=\"n\">x</span>\n\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">Cannot</span> <span class=\"sb\">`convert`</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">M</span> <span class=\"n\">to</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">Q</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">RObject</span><span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">S</span><span class=\"o\">&lt;:</span><span class=\"kt\">Sxp</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">RCall</span><span class=\"o\">/</span><span class=\"n\">iMDW2</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">convert</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n  <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">T</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.7</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"o\">/</span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">218</span>\n  <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">Bffg_sde</span><span class=\"o\">/</span><span class=\"n\">srcold</span><span class=\"o\">/</span><span class=\"n\">testscript</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">217</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">setindex!</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Q</span><span class=\"p\">},</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">M</span><span class=\"p\">,</span> <span class=\"n\">i1</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">903</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">Bffg_sde</span><span class=\"o\">/</span><span class=\"n\">srcold</span><span class=\"o\">/</span><span class=\"n\">testscript</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">223</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">frankvandermeulen</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">Bffg_sde</span><span class=\"o\">/</span><span class=\"n\">srcold</span><span class=\"o\">/</span><span class=\"n\">testscript</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">221</span>\n</code></pre></div>",
        "id": 268658606,
        "sender_full_name": "Frank van der Meulen",
        "timestamp": 1642667898
    },
    {
        "content": "<p>Nevermind, should have done</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">setproperties</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">tup</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 268665603,
        "sender_full_name": "Frank van der Meulen",
        "timestamp": 1642671561
    },
    {
        "content": "<p>That's a little bit weird for me. How is it possible to mutate an unmutable struct ? Does this <code>@set!</code> macro instantiates a whole new struct which replaces the old one ?</p>",
        "id": 276739361,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1648319696
    },
    {
        "content": "<p>Yes, that's correct.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">Setfield</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"n\">nt</span> <span class=\"o\">=</span> <span class=\"p\">(;</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n           <span class=\"nd\">@macroexpand</span> <span class=\"nd\">@set!</span> <span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n       <span class=\"k\">end</span>\n<span class=\"k\">quote</span>\n    <span class=\"cm\">#= /Users/mason/.julia/packages/Setfield/AS2xF/src/sugar.jl:196 =#</span>\n    <span class=\"sa\">var</span><span class=\"s\">\"#62###lens#291\"</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">)((</span><span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"n\">compose</span><span class=\"p\">)((</span><span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"n\">PropertyLens</span><span class=\"p\">){</span><span class=\"ss\">:b</span><span class=\"p\">}()))</span>\n    <span class=\"cm\">#= /Users/mason/.julia/packages/Setfield/AS2xF/src/sugar.jl:197 =#</span>\n    <span class=\"n\">nt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Setfield</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">)(</span><span class=\"n\">nt</span><span class=\"p\">,</span> <span class=\"sa\">var</span><span class=\"s\">\"#62###lens#291\"</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 276913198,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648491941
    },
    {
        "content": "<p>So it's basically just making a copy of the struct with one field changed and all others the same, and then rebinding the old variable name to that. It's a quite elegant trick</p>",
        "id": 276913365,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648492014
    }
]