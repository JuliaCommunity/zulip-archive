[
    {
        "content": "<p>I'm trying to run julia on a tpu-vm v3-8 using the tpu-vm-pt-1.10 image. It crashes on various operations with \"free(): invalid pointer.\" This happens with both the latest release and the LTS. (crossposting from slack)</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">(</span>@v1.6<span class=\"o\">)</span> pkg&gt; generate Demo\n  Generating  project Demo:\nfree<span class=\"o\">()</span>: invalid pointer\n\nsignal <span class=\"o\">(</span><span class=\"m\">6</span><span class=\"o\">)</span>: Aborted\n<span class=\"k\">in</span> expression starting at none:0\ngsignal at /lib/x86_64-linux-gnu/libc.so.6 <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\nabort at /lib/x86_64-linux-gnu/libc.so.6 <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\nunknown <span class=\"k\">function</span> <span class=\"o\">(</span>ip: 0x7f5bc79ef3ed<span class=\"o\">)</span>\nunknown <span class=\"k\">function</span> <span class=\"o\">(</span>ip: 0x7f5bc79f747b<span class=\"o\">)</span>\nunknown <span class=\"k\">function</span> <span class=\"o\">(</span>ip: 0x7f5bc79f8cab<span class=\"o\">)</span>\ngit_mbedtls_stream_global_init at /home/rs/tools/julia-1.6.5/bin/../lib/julia/libgit2.so <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\ninit_once at /home/rs/tools/julia-1.6.5/bin/../lib/julia/libgit2.so <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\n__pthread_once_slow at /lib/x86_64-linux-gnu/libpthread.so.0 <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\ngit_libgit2_init at /home/rs/tools/julia-1.6.5/bin/../lib/julia/libgit2.so <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\nmacro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LibGit2/src/error.jl:108 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\ninitialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LibGit2/src/LibGit2.jl:986\n<span class=\"c1\">#164 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LibGit2/src/LibGit2.jl:971</span>\nlock at ./lock.jl:187\nensure_initialized at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LibGit2/src/LibGit2.jl:967 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\nGitConfig at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LibGit2/src/config.jl:50\nGitConfig at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LibGit2/src/config.jl:50 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\nwith at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LibGit2/src/types.jl:1156 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\ngetconfig at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LibGit2/src/config.jl:160 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\nproject at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/generate.jl:30\n<span class=\"c1\">#generate#3 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/generate.jl:15</span>\ngenerate at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/generate.jl:10 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\n<span class=\"c1\">#generate#2 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/generate.jl:8 [inlined]</span>\ngenerate at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/generate.jl:8 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\n<span class=\"c1\">#generate_deprecated#1 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/generate.jl:5 [inlined]</span>\ngenerate_deprecated at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/generate.jl:4\n_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2237 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\njl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2419\njl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1703 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\ndo_apply at /buildworker/worker/package_linux64/build/src/builtins.c:670\ndo_cmd! at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:405\n<span class=\"c1\">#do_cmd#21 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:386</span>\ndo_cmd at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:377 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\n<span class=\"c1\">#24 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:550</span>\njfptr_YY.24_45436.clone_1 at /home/rs/tools/julia-1.6.5/lib/julia/sys.so <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\n_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2237 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\njl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2419\njl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1703 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\njl_f__call_latest at /buildworker/worker/package_linux64/build/src/builtins.c:714\n<span class=\"c1\">#invokelatest#2 at ./essentials.jl:708 [inlined]</span>\ninvokelatest at ./essentials.jl:706 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\nrun_interface at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/REPL/src/LineEdit.jl:2441\njfptr_run_interface_54737.clone_1 at /home/rs/tools/julia-1.6.5/lib/julia/sys.so <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\n_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2237 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\njl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2419\nrun_frontend at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/REPL/src/REPL.jl:1126\n<span class=\"c1\">#44 at ./task.jl:411</span>\njfptr_YY.44_53285.clone_1 at /home/rs/tools/julia-1.6.5/lib/julia/sys.so <span class=\"o\">(</span>unknown line<span class=\"o\">)</span>\n_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2237 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\njl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2419\njl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1703 <span class=\"o\">[</span>inlined<span class=\"o\">]</span>\nstart_task at /buildworker/worker/package_linux64/build/src/task.c:834\nAllocations: <span class=\"m\">2654</span> <span class=\"o\">(</span>Pool: <span class=\"m\">2639</span><span class=\"p\">;</span> Big: <span class=\"m\">15</span><span class=\"o\">)</span><span class=\"p\">;</span> GC: <span class=\"m\">0</span>\nAborted <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>\n</code></pre></div>\n<p>I found a very similar issue in discourse, but it had no replies. Github issues did not seem to have anything relevant.<br>\n<a href=\"https://discourse.julialang.org/t/issues-with-julia-installation-on-google-tpu-vm/65783\">https://discourse.julialang.org/t/issues-with-julia-installation-on-google-tpu-vm/65783</a></p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ uname -a\nLinux *********** <span class=\"m\">5</span>.11.0-1021-gcp <span class=\"c1\">#23~20.04.1-Ubuntu SMP Fri Oct 1 19:04:32 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span>\n</code></pre></div>\n<p>I did notice that trying to check the libc.so.6 info segfaulted, which makes me suspicious google is doing something strange with their glibc. </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ /lib/x86_64-linux-gnu/libc.so.6\nSegmentation fault <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>\n</code></pre></div>\n<p>Anyone had success running julia on tpu-vms? Thanks!</p>",
        "id": 272347905,
        "sender_full_name": "Reid",
        "timestamp": 1645147114
    },
    {
        "content": "<p>Hm, yeah I'm not sure how much attention Julia's TPU stuff has gotten in a while. It seemed to be an exciting hotness for a little while and then I suddenly stopped hearing about it</p>",
        "id": 272715299,
        "sender_full_name": "Mason Protter",
        "timestamp": 1645463802
    },
    {
        "content": "<p>Yeah.. I wonder how hard it would be to target with StaticCompiler?</p>",
        "id": 272728100,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1645472352
    },
    {
        "content": "<p>To be fair, I have seen these often enough with using jax via PyCall that it's likely some interaction between XLA's LLVM and Julia's LLVM.</p>",
        "id": 272880146,
        "sender_full_name": "Jayesh K. Gupta",
        "timestamp": 1645571587
    },
    {
        "content": "<p>AFAIK <span class=\"user-mention\" data-user-id=\"461744\">@Reid</span> is using the official binaries, so there should only be one LLVM (Julia's own) in play? No other libraries.</p>",
        "id": 272881993,
        "sender_full_name": "Brian Chen",
        "timestamp": 1645572942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278065\">Brian Chen</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/on.20tpu-vm.20crashes.20with.20invalid.20pointer/near/272881993\">said</a>:</p>\n<blockquote>\n<p>AFAIK <span class=\"user-mention silent\" data-user-id=\"461744\">Reid</span> is using the official binaries, so there should only be one LLVM (Julia's own) in play? No other libraries.</p>\n</blockquote>\n<p>I am using the  official binaries. I also tried installing with conda forge and building from source. <br>\nAlso here's the GitHub issue I opened.<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/44242\">https://github.com/JuliaLang/julia/issues/44242</a></p>",
        "id": 272887754,
        "sender_full_name": "Reid",
        "timestamp": 1645576970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269190\">Jayesh K. Gupta</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/on.20tpu-vm.20crashes.20with.20invalid.20pointer/near/272880146\">said</a>:</p>\n<blockquote>\n<p>To be fair, I have seen these often enough with using jax via PyCall that it's likely some interaction between XLA's LLVM and Julia's LLVM.</p>\n</blockquote>\n<p>Yes, I understand <a href=\"https://github.com/search?q=XLA.jl&amp;type=Repositories\">XLA.jl</a> is languishing, but I thought calling out to jax, maybe with a simple wrapper would be usable. Sadly I can't even get to the point of trying to use the tpu cores. Do you have a working setup on a tpu vm (aka you can use julia even just on the cpu)?</p>",
        "id": 272965788,
        "sender_full_name": "Reid",
        "timestamp": 1645630846
    },
    {
        "content": "<p>What confuses me is that Julia <em>does</em> run on Colab VMs, which shouldn't be that different than the TPU VM you're using (they're all on GCP after all). Perhaps there's some (mis)configuration with the TPU VM image that is wreaking havok?</p>",
        "id": 272971140,
        "sender_full_name": "Brian Chen",
        "timestamp": 1645632984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278065\">Brian Chen</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/on.20tpu-vm.20crashes.20with.20invalid.20pointer/near/272971140\">said</a>:</p>\n<blockquote>\n<p>What confuses me is that Julia <em>does</em> run on Colab VMs, which shouldn't be that different than the TPU VM you're using (they're all on GCP after all). Perhaps there's some (mis)configuration with the TPU VM image that is wreaking havok?</p>\n</blockquote>\n<p>Yeah, I tested it on a regular vm and it worked. I have tried v2-alpha, tpu-vm-pt-1.10, and tpu-vm-tf-2.8.0 images and it failed.</p>",
        "id": 273000385,
        "sender_full_name": "Reid",
        "timestamp": 1645644958
    }
]