[
    {
        "content": "<p>I have a basic for-loop that is looping over a vector, and I would like to check if the loop iteration is at the end of vector. Are there any recommended ways of doing this idiomatically? Right now I have a basic <code>enumerate</code> and <code>if index != length(my_vector)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">my_vector</span><span class=\"p\">)</span>\n    <span class=\"n\">do_stuff</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">!=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">my_vector</span><span class=\"p\">)</span>\n       <span class=\"n\">do_more_stuff</span><span class=\"p\">()</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 251826082,
        "sender_full_name": "Kim Paolo Laberinto",
        "timestamp": 1630648156
    },
    {
        "content": "<p>you could iterate on a view of that vector , <code>@view(vector[begin:end-1])</code></p>",
        "id": 251826204,
        "sender_full_name": "Andrés Riedemann",
        "timestamp": 1630648279
    },
    {
        "content": "<p>Isn't it preferable in terms of performance to treat <em>your_vector [1: end-1]</em> and <em>your_vector [end</em>] separately?</p>\n<div class=\"codehilite\"><pre><span></span><code>for (index, element) in enumerate(my_vector[1:end-1])\n    do_stuff(element)\nend\ndo_more_stuff(my_vector[end])\n</code></pre></div>",
        "id": 251832138,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1630653074
    },
    {
        "content": "<p>You better use <code>pairs</code> instead of <code>enumerate</code>.</p>",
        "id": 251841077,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1630657739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Check.20if.20loop.20is.20at.20end.20of.20vector.20idiomatically/near/251841077\">said</a>:</p>\n<blockquote>\n<p>You better use <code>pairs</code> instead of <code>enumerate</code>.</p>\n</blockquote>\n<p>Could you elaborate more on any reasons in particular (e.g. performance, readability, etc.)? I just tried it and I did not know that <code>pairs(my_vector)</code> gives a nice indexing similar to <code>enumerate</code>. So thank you for that!</p>",
        "id": 251921568,
        "sender_full_name": "Kim Paolo Laberinto",
        "timestamp": 1630692799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359035\">rocco sprmnt21</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Check.20if.20loop.20is.20at.20end.20of.20vector.20idiomatically/near/251832138\">said</a>:</p>\n<blockquote>\n<p>Isn't it preferable in terms of performance to treat <em>your_vector [1: end-1]</em> and <em>your_vector [end</em>] separately?</p>\n<div class=\"codehilite\"><pre><span></span><code>for (index, element) in enumerate(my_vector[1:end-1])\n    do_stuff(element)\nend\ndo_more_stuff(my_vector[end])\n</code></pre></div>\n\n</blockquote>\n<p>I'm actually really not sure! Do you know why that might be the case?</p>",
        "id": 251921688,
        "sender_full_name": "Kim Paolo Laberinto",
        "timestamp": 1630692852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284959\">Andrés Riedemann</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Check.20if.20loop.20is.20at.20end.20of.20vector.20idiomatically/near/251826204\">said</a>:</p>\n<blockquote>\n<p>you could iterate on a view of that vector , <code>@view(vector[begin:end-1])</code></p>\n</blockquote>\n<p>Oh interesting! Thank you. What's the advantage of iterating on a view?</p>",
        "id": 251921847,
        "sender_full_name": "Kim Paolo Laberinto",
        "timestamp": 1630692944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297159\">Kim Paolo Laberinto</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Check.20if.20loop.20is.20at.20end.20of.20vector.20idiomatically/near/251921568\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Check.20if.20loop.20is.20at.20end.20of.20vector.20idiomatically/near/251841077\">said</a>:</p>\n<blockquote>\n<p>You better use <code>pairs</code> instead of <code>enumerate</code>.</p>\n</blockquote>\n<p>Could you elaborate more on any reasons in particular (e.g. performance, readability, etc.)? I just tried it and I did not know that <code>pairs(my_vector)</code> gives a nice indexing similar to <code>enumerate</code>. So thank you for that!</p>\n</blockquote>\n<p><code>enumerate</code> always counts from <code>1</code>. It doesn't care about special index styles which can lead to bugs</p>",
        "id": 251922237,
        "sender_full_name": "Mason Protter",
        "timestamp": 1630693105
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">OffsetArrays</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">OffsetArray</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span> <span class=\"n\">with</span> <span class=\"n\">indices</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">OffsetArray</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Pair</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}},</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Pair</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}</span> <span class=\"n\">with</span> <span class=\"n\">indices</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n <span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span>\n <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"mi\">0</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"mi\">1</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"mi\">2</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 251922495,
        "sender_full_name": "Mason Protter",
        "timestamp": 1630693217
    },
    {
        "content": "<p>Or more clearly:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">vi</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n           <span class=\"nd\">@show</span> <span class=\"n\">vi</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">vi</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n<span class=\"n\">vi</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">BoundsError</span><span class=\"o\">:</span> <span class=\"n\">attempt</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">OffsetArray</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Int64</span> <span class=\"n\">with</span> <span class=\"n\">indices</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">index</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">throw_boundserror</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">OffsetVector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}},</span> <span class=\"n\">I</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">691</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">checkbounds</span>\n   <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">656</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">OffsetVector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}},</span> <span class=\"n\">i</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">OffsetArrays</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">OffsetArrays</span><span class=\"o\">/</span><span class=\"n\">TKbp1</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">OffsetArrays</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">424</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n   <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">show</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1040</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 251922598,
        "sender_full_name": "Mason Protter",
        "timestamp": 1630693271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> Thank you!! This really helps my understanding. Then it seems like the method of using <code>enumerate(my_vector)</code> with <code>if index != length(my_vector)</code> is a good enough way of doing things and using <code>pairs</code> might give me something I didn't expect. TIL that <code>enumerate</code> always counts from <code>1</code>, and should be resilient against OffsetArrays. Thank you!!</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">OffsetArray</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"o\">:</span><span class=\"mi\">105</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">101</span><span class=\"o\">:</span><span class=\"mi\">105</span> <span class=\"n\">with</span> <span class=\"n\">indices</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n           <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s\">\" \"</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n           <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\" not yet at the end\"</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"mi\">1</span> <span class=\"mi\">101</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">2</span> <span class=\"mi\">102</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">3</span> <span class=\"mi\">103</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">4</span> <span class=\"mi\">104</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">5</span> <span class=\"mi\">105</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">pairs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n           <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s\">\" \"</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n           <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\" not yet at the end\"</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"mi\">101</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mi\">102</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">0</span> <span class=\"mi\">103</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">1</span> <span class=\"mi\">104</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">2</span> <span class=\"mi\">105</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n</code></pre></div>",
        "id": 251924076,
        "sender_full_name": "Kim Paolo Laberinto",
        "timestamp": 1630694028
    },
    {
        "content": "<p>You could also use the <code>lastindex</code> function with <code>pairs</code>. i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">pairs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n           <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s\">\" \"</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n           <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">lastindex</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n               <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\" not yet at the end\"</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"mi\">101</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mi\">102</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">0</span> <span class=\"mi\">103</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">1</span> <span class=\"mi\">104</span> <span class=\"n\">not</span> <span class=\"n\">yet</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"k\">end</span>\n<span class=\"mi\">2</span> <span class=\"mi\">105</span>\n</code></pre></div>",
        "id": 251927137,
        "sender_full_name": "Mason Protter",
        "timestamp": 1630695523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297159\">Kim Paolo Laberinto</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Check.20if.20loop.20is.20at.20end.20of.20vector.20idiomatically/near/251921688\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"359035\">rocco sprmnt21</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Check.20if.20loop.20is.20at.20end.20of.20vector.20idiomatically/near/251832138\">said</a>:</p>\n<blockquote>\n<p>Isn't it preferable in terms of performance to treat <em>your_vector [1: end-1]</em> and <em>your_vector [end</em>] separately?</p>\n<div class=\"codehilite\"><pre><span></span><code>for (index, element) in enumerate(my_vector[1:end-1])\n    do_stuff(element)\nend\ndo_more_stuff(my_vector[end])\n</code></pre></div>\n\n</blockquote>\n<p>I'm actually really not sure! Do you know why that might be the case?</p>\n</blockquote>\n<p>Because as I suggest, you avoid checking each iteration if you have reached the last index in order to apply the specific function of the case.<br>\nIf you are not convinced run the following tests, perhaps adapting them to your specific case and let us know. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">my_vector</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">6</span>\n<span class=\"n\">do_stuff</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">e</span>\n<span class=\"n\">do_more_stuff</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"o\">*</span><span class=\"mi\">10</span>\n\n<span class=\"k\">function</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">do_stuff</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n    <span class=\"n\">do_more_stuff</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">])</span>\n\n<span class=\"k\">end</span>\n\n\n<span class=\"k\">function</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">pairs</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n    <span class=\"n\">do_stuff</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">lastindex</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">do_more_stuff</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">my_vector</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">my_vector</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">using</span> <span class=\"n\">BenchmarkTools</span>\n<span class=\"nd\">@btime</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">my_vector</span><span class=\"p\">)</span>\n<span class=\"nd\">@btime</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">my_vector</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 251932386,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1630698165
    },
    {
        "content": "<p>Oh I see what you mean now <span class=\"user-mention\" data-user-id=\"359035\">@rocco sprmnt21</span> ! That makes sense to me intuitively: instead of doing a conditional check during the for loop for every single element, just do the unique behavior at the end so that the checks don't need to happen. Thank you!</p>",
        "id": 251933042,
        "sender_full_name": "Kim Paolo Laberinto",
        "timestamp": 1630698520
    }
]