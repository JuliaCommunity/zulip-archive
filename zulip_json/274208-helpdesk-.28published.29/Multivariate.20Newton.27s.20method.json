[
    {
        "content": "<p>Is there a package that implements root-finding like Newton's method for multivariate functions? <a href=\"https://github.com/search?q=Roots.jl&amp;type=Repositories\">Roots.jl</a> seems to only support scalar functions.</p>",
        "id": 236737289,
        "sender_full_name": "Aditya Sengupta",
        "timestamp": 1619727034
    },
    {
        "content": "<p>Bonus if it includes SPICE-style limiting but that's a bit more obscure so I could add that</p>",
        "id": 236737954,
        "sender_full_name": "Aditya Sengupta",
        "timestamp": 1619727310
    },
    {
        "content": "<p>I think you can use one of the many: <a href=\"https://github.com/search?q=NLsolve.jl&amp;type=Repositories\">NLsolve.jl</a>, <a href=\"https://github.com/search?q=NLSolvers.jl&amp;type=Repositories\">NLSolvers.jl</a>, <a href=\"https://github.com/search?q=Sundials.jl&amp;type=Repositories\">Sundials.jl</a> (look for KINSOL inside I think), <a href=\"https://github.com/search?q=SIAMFANLEquations.jl&amp;type=Repositories\">SIAMFANLEquations.jl</a>, and then there's <a href=\"https://github.com/search?q=NonlinearSolve.jl&amp;type=Repositories\">NonlinearSolve.jl</a> that should eventually \"wrap them all\".</p>",
        "id": 236772766,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1619746362
    },
    {
        "content": "<p>I would start with <a href=\"https://github.com/search?q=NLsolve.jl&amp;type=Repositories\">NLsolve.jl</a> as I believe it's the most polished one at this stage, and if you want more then try the others.</p>",
        "id": 236772957,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1619746497
    }
]