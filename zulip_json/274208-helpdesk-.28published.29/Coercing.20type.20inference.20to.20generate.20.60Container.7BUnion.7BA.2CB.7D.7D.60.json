[
    {
        "content": "<p>...instead of <code>Union{Container{A}, Container{B}}</code>. Or in other words, getting discount parametric sum types without specifying the type parameters <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> </p>\n<p>To avoid the X-Y problem, here are the precise lines of code I'm thinking about with this question: <a href=\"https://github.com/FluxML/Flux.jl/pull/2005/files#diff-344cb9517a6c67cbcc6d110732e3f12cc908b8f4b5eeee46571218f5175d7e32R48-R66\">https://github.com/FluxML/Flux.jl/pull/2005/files#diff-344cb9517a6c67cbcc6d110732e3f12cc908b8f4b5eeee46571218f5175d7e32R48-R66</a>. After poking around I have not found a way to avoid <code>return_type</code>, so my hope is to nerd-snipe someone here into helping.</p>",
        "id": 294396022,
        "sender_full_name": "Brian Chen",
        "timestamp": 1660974430
    },
    {
        "content": "<p>I wonder if you could get away with a return type assertion here?</p>",
        "id": 294396780,
        "sender_full_name": "Mason Protter",
        "timestamp": 1660975177
    },
    {
        "content": "<p>have you tried that?</p>",
        "id": 294396786,
        "sender_full_name": "Mason Protter",
        "timestamp": 1660975184
    },
    {
        "content": "<p>You mean in lieu of the <code>return_type</code> call? Unfortunately I don't have a type to assert with if I drop that.</p>",
        "id": 294397485,
        "sender_full_name": "Brian Chen",
        "timestamp": 1660975836
    },
    {
        "content": "<p>not sure that transform is legal</p>",
        "id": 294400204,
        "sender_full_name": "Sukera",
        "timestamp": 1660978167
    },
    {
        "content": "<p>the outer Union may have a different memory layout than the inner union</p>",
        "id": 294400235,
        "sender_full_name": "Sukera",
        "timestamp": 1660978191
    },
    {
        "content": "<p>e.g. think of the layout of <code>Union{Container{Int}, Container{Float64}}</code> vs. <code>Container{Union{Int, Float64}}</code></p>",
        "id": 294400355,
        "sender_full_name": "Sukera",
        "timestamp": 1660978238
    },
    {
        "content": "<p>those are two (three) totally different objects</p>",
        "id": 294400403,
        "sender_full_name": "Sukera",
        "timestamp": 1660978254
    },
    {
        "content": "<p>Yes, I'm aware of that. My point is that I can't even ask for the different Union coalescing behavior if I wanted to</p>",
        "id": 294446301,
        "sender_full_name": "Brian Chen",
        "timestamp": 1661004542
    },
    {
        "content": "<p>Not being able to reify unions generated by diverging -&gt; converging control flow like this means that a lot of otherwise type stable functions are doomed to be type unstable once they're run through AD.</p>",
        "id": 294446545,
        "sender_full_name": "Brian Chen",
        "timestamp": 1661004673
    },
    {
        "content": "<p>Yeah, this is an interesting case. Looking with fresh eyes I see the problem. I think this is a case where I’d feel pretty shameless about using <code>return_type</code></p>",
        "id": 294470215,
        "sender_full_name": "Mason Protter",
        "timestamp": 1661019454
    },
    {
        "content": "<p>I think this is a legitimate use case because so far as I can tell, you’re not modifying the behaviour based on the inference result, you’re <em>just</em> providing a more efficient smart container. If inference changes to give <code>Any</code> or any other wider type, this would still be correct, just slower</p>",
        "id": 294470449,
        "sender_full_name": "Mason Protter",
        "timestamp": 1661019605
    }
]