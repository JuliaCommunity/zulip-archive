[
    {
        "content": "<p>If I have a vector of sorted vectors, do we have an efficient way to combine those into one sorted vector? i.e. basically mergesort them? cc <span class=\"user-mention\" data-user-id=\"669432\">@Lilith Hafner</span></p>",
        "id": 426762021,
        "sender_full_name": "Mason Protter",
        "timestamp": 1710514984
    },
    {
        "content": "<p>Or alternatively if it makes things easier, I could provide a <code>v::Vector{T}</code>, as well as a <code>rs::Vector{&lt;:UnitRange}</code> such that for each <code>r</code> in <code>rs</code>, <code>then </code>v[r]` would already be sorted</p>",
        "id": 426770030,
        "sender_full_name": "Mason Protter",
        "timestamp": 1710517218
    },
    {
        "content": "<p>I know this isn't really a helpful answer, but shouldn't it be fairly straightforward to implement a linear merge? like maintain a pointer to the current index in each subvector, and iterate calling <code>findmin</code> and push the value and incr appropriate pointer</p>",
        "id": 426779773,
        "sender_full_name": "Andy Dienes",
        "timestamp": 1710520166
    },
    {
        "content": "<p>Sure. It just would surprise me a lot if there wasn't something already out there that was usable for this</p>",
        "id": 426781561,
        "sender_full_name": "Mason Protter",
        "timestamp": 1710520705
    },
    {
        "content": "<p>the top answer here seems nice <a href=\"https://stackoverflow.com/questions/76577386/julia-merging-multiple-streams-in-sorted-order-using-iterators\">https://stackoverflow.com/questions/76577386/julia-merging-multiple-streams-in-sorted-order-using-iterators</a></p>",
        "id": 426791767,
        "sender_full_name": "Andy Dienes",
        "timestamp": 1710523976
    },
    {
        "content": "<blockquote>\n<p>Or alternatively if it makes things easier, I could provide a <code>v::Vector{T}</code>, as well as...</p>\n</blockquote>\n<p>I mean... is <code>sort!(v)</code> fast enough for you? If <code>T</code> is Float64, Int, or some other radixable type and <code>length(rs)</code> is greater than 5-10, then I'd guess there's not too much room for improvement over <code>sort!</code>. If you need every drop of perf, or <code>length(v)</code> is very long, <code>length(rs)</code> is short, and/or comparisons are more expensive, then you may have to DIY. The fastest approach I can think of is PagedMergeSort with a custom base case for in place, or a merge sort  with scratch space if sorting repeatedly. Make sure to merge the shorter runs with eachother first.</p>\n<p>Theoretically, this is exactly the sort of input that TimSort is best at. You could try <code>sort!(v; alg=SortingAlgorithms.TimSort)</code>, or even dig into the timsort internals and provide <code>rs</code> to skip the initial run-detection phase.</p>",
        "id": 427746239,
        "sender_full_name": "Lilith Hafner",
        "timestamp": 1710861236
    },
    {
        "content": "<p>I would have thought <code>Base.Sort.MergeSort</code> contains an implementation of <code>merge_sorted</code>, no?</p>",
        "id": 427788938,
        "sender_full_name": "jar",
        "timestamp": 1710873369
    },
    {
        "content": "<p>No, it's all inlined into the function body</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@less</span><span class=\"w\"> </span><span class=\"n\">sort!</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">MergeSort</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Forward</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">sort!</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">AbstractVector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">lo</span><span class=\"o\">::</span><span class=\"kt\">Integer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hi</span><span class=\"o\">::</span><span class=\"kt\">Integer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">MergeSortAlg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"o\">::</span><span class=\"kt\">Ordering</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">t0</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">AbstractVector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">}</span><span class=\"o\">=</span><span class=\"nb\">nothing</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span>\n<span class=\"w\">    </span><span class=\"nd\">@inbounds</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">lo</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">hi</span>\n<span class=\"w\">        </span><span class=\"n\">hi</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">SMALL_THRESHOLD</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">sort!</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SMALL_ALGORITHM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">midpoint</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hi</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t0</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"nb\">nothing</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">t0</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">resize!</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">require_one_based_indexing</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"n\">sort!</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lo</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">sort!</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lo</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">            </span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lo</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">hi</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">lt</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n<span class=\"w\">                </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n<span class=\"w\">                </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"w\">                </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">            </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">j</span>\n<span class=\"w\">            </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n</code></pre></div>",
        "id": 427795996,
        "sender_full_name": "Lilith Hafner",
        "timestamp": 1710876047
    },
    {
        "content": "<p>Could be useful to pull it out, similar to <a href=\"https://github.com/JuliaCollections/SortingAlgorithms.jl/issues/81\">https://github.com/JuliaCollections/SortingAlgorithms.jl/issues/81</a> for the analogous issue for quicksort</p>",
        "id": 427807284,
        "sender_full_name": "jar",
        "timestamp": 1710880595
    }
]