[
    {
        "content": "<p>Friends, I'm trying to adapt some code I have in order to work using <a href=\"https://juliahub.com/ui/Packages/General/Tables\">Tables.jl</a>. I'm having some trouble figuring out how one can add columns to a table in <a href=\"https://juliahub.com/ui/Packages/General/Tables\">Tables.jl</a>. I couldn't find it in the documentation...</p>",
        "id": 419885602,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707152039
    },
    {
        "content": "<p>Don't think there is general mechanism to do that.<br>\nThe <a href=\"https://juliahub.com/ui/Packages/General/Tables\">Tables.jl</a> interface is great for IO and interop/conversions, but actual data manipulations are often most convenient when focusing on specific types.</p>",
        "id": 419896338,
        "sender_full_name": "aplavin",
        "timestamp": 1707155517
    },
    {
        "content": "<p>Would be nice if more tables supported <code>@insert tbl.col = ...</code>, this mechanism is perfectly extensible. For now, columntable (namedtuple-of-vectors), StructArrays, and DictArrays do that.<br>\nAnd to be perfectly general for tables without property access to columns, <code>@insert Tables.columns(tbl).col = ...</code> could be added as well.</p>",
        "id": 419896822,
        "sender_full_name": "aplavin",
        "timestamp": 1707155679
    },
    {
        "content": "<blockquote>\n<p>if more tables supported</p>\n</blockquote>\n<p>This just goes in Accessors extensions, we don't need to bother Bogumil about it, right?</p>",
        "id": 419920713,
        "sender_full_name": "jar",
        "timestamp": 1707164163
    },
    {
        "content": "<p>I don't think the Tables package itself should (or could) be involved in <code>@insert tbl.col = ...</code> interface implementation. So, we don't need to bother Bogumil or other maintainers of <a href=\"https://juliahub.com/ui/Packages/General/Table\">Tablesjl</a> in general :)</p>\n<p>Implementation for adding columns is fundamentally different for different table types. It should live either in Accessors extensions, or in the package defining the table type. The latter is more natural, the glue code is more likely to change due to changes in the table type than due to changes in Accessors.<br>\nStructArrays support lives in Accessors: I added it, and put there just because review responses are much faster for Accessors – so it was faster and easier than to put into StructArrays. DictArrays support Accessors natively, without any extensions.</p>",
        "id": 419938517,
        "sender_full_name": "aplavin",
        "timestamp": 1707171620
    },
    {
        "content": "<p>I found this direction interesting to experiment with, and added more Tables support to AccessorsExtra. It can modify <code>Tables.columns(tbl)</code> for supported types efficiently, and can modify <code>rowtable(tbl)</code> and <code>columntable(tbl)</code> for any table type (that supports <code>Table.materializer</code>). The latter is as efficient as the manual sequence of <code>columntable + add namedtuple entry + materialize back</code>, which is basically free for typical columnar tables.</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Tables</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AccessorsExtra</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StructArrays</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TypedTables</span>\n\n<span class=\"c\"># create a few tables of different types;</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tbl_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"nd\">@NamedTuple</span><span class=\"p\">{</span><span class=\"kt\">a</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">b</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tbl_sa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">StructArray</span><span class=\"p\">(</span><span class=\"n\">tbl_r</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">StructArray</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">eltype</span><span class=\"w\"> </span><span class=\"nd\">@NamedTuple</span><span class=\"p\">{</span><span class=\"kt\">a</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">b</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tbl_tt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">tbl_r</span><span class=\"p\">)</span>\n<span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">columns</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"o\">:</span>\n<span class=\"w\">     </span><span class=\"n\">a</span><span class=\"w\">  </span><span class=\"n\">b</span>\n<span class=\"w\">   </span><span class=\"n\">┌─────</span>\n<span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mi\">2</span>\n<span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mi\">4</span>\n\n<span class=\"c\"># explicitly supported types: add a new column by modifying columns()</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">Tables</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">(</span><span class=\"n\">tbl_r</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"6\"</span><span class=\"p\">]</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"nd\">@NamedTuple</span><span class=\"p\">{</span><span class=\"kt\">a</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">b</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">c</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"5\"</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"6\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">Tables</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">(</span><span class=\"n\">tbl_sa</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"6\"</span><span class=\"p\">]</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">StructArray</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">eltype</span><span class=\"w\"> </span><span class=\"nd\">@NamedTuple</span><span class=\"p\">{</span><span class=\"kt\">a</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">b</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">c</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"5\"</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"6\"</span><span class=\"p\">)</span>\n\n<span class=\"c\"># any type, no special support needed: add column by modifying columntable()</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">Tables</span><span class=\"o\">.</span><span class=\"n\">columntable</span><span class=\"p\">(</span><span class=\"n\">tbl_tt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"6\"</span><span class=\"p\">]</span>\n<span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">columns</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"o\">:</span>\n<span class=\"w\">     </span><span class=\"n\">a</span><span class=\"w\">  </span><span class=\"n\">b</span><span class=\"w\">  </span><span class=\"n\">c</span>\n<span class=\"w\">   </span><span class=\"n\">┌────────</span>\n<span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mi\">5</span>\n<span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mi\">6</span>\n\n<span class=\"c\"># or add a row by modifying rowtable()</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">Tables</span><span class=\"o\">.</span><span class=\"n\">rowtable</span><span class=\"p\">(</span><span class=\"n\">tbl_tt</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">columns</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"o\">:</span>\n<span class=\"w\">     </span><span class=\"n\">a</span><span class=\"w\">  </span><span class=\"n\">b</span>\n<span class=\"w\">   </span><span class=\"n\">┌─────</span>\n<span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mi\">2</span>\n<span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mi\">4</span>\n<span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mi\">6</span>\n\n<span class=\"c\"># deletion also works, of course:</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@delete</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">Tables</span><span class=\"o\">.</span><span class=\"n\">rowtable</span><span class=\"p\">(</span><span class=\"n\">tbl_tt</span><span class=\"p\">))</span>\n<span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">columns</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"o\">:</span>\n<span class=\"w\">     </span><span class=\"n\">a</span><span class=\"w\">  </span><span class=\"n\">b</span>\n<span class=\"w\">   </span><span class=\"n\">┌─────</span>\n<span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 422490079,
        "sender_full_name": "aplavin",
        "timestamp": 1708458365
    },
    {
        "content": "<p>If this happens to be actually useful, can be upstreamed to Accessors directly. And specific table types can add more efficient overloads for <code>modify(rowtable)</code>.<br>\nI personally just use StructArrays almost all the time, but it was fun to make these generalizations :)</p>",
        "id": 422490391,
        "sender_full_name": "aplavin",
        "timestamp": 1708458505
    },
    {
        "content": "<p>This looks good. It supports DataFrames too, right?</p>",
        "id": 422492786,
        "sender_full_name": "jar",
        "timestamp": 1708459532
    },
    {
        "content": "<p>Seems like that, yeah:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tbl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">tbl</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span><span class=\"o\">×</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span>\n<span class=\"w\"> </span><span class=\"n\">Row</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\">      </span><span class=\"n\">b</span>\n<span class=\"w\">     </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"w\">  </span><span class=\"kt\">Int64</span>\n<span class=\"n\">─────┼──────────────</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"w\">      </span><span class=\"mi\">2</span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\">     </span><span class=\"mi\">3</span><span class=\"w\">      </span><span class=\"mi\">4</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@delete</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">rowtable</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">))</span>\n<span class=\"mi\">1</span><span class=\"o\">×</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span>\n<span class=\"w\"> </span><span class=\"n\">Row</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\">      </span><span class=\"n\">b</span>\n<span class=\"w\">     </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"w\">  </span><span class=\"kt\">Int64</span>\n<span class=\"n\">─────┼──────────────</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"w\">      </span><span class=\"mi\">2</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">columntable</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"6\"</span><span class=\"p\">]</span>\n<span class=\"mi\">2</span><span class=\"o\">×</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span>\n<span class=\"w\"> </span><span class=\"n\">Row</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\">      </span><span class=\"n\">b</span><span class=\"w\">      </span><span class=\"n\">c</span>\n<span class=\"w\">     </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"w\">  </span><span class=\"kt\">Int64</span><span class=\"w\">  </span><span class=\"kt\">String</span>\n<span class=\"n\">─────┼──────────────────────</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mi\">5</span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\">     </span><span class=\"mi\">3</span><span class=\"w\">      </span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mi\">6</span>\n</code></pre></div>\n<p>As I said, any table that supports <code>Tables.materializer</code>.</p>",
        "id": 422496742,
        "sender_full_name": "aplavin",
        "timestamp": 1708461302
    },
    {
        "content": "<p>I wrote a lightweight package here: <a href=\"https://github.com/pdeffebach/ColumnFrames.jl\">https://github.com/pdeffebach/ColumnFrames.jl</a></p>\n<p>which defines a table type and implements the Tables interface along with the Named Tuple interface (the two overlap, I overloaded some tables stuff for convenience). It adds a few functions related to mutability though. Its essentially a mutable named tuple where all the columns are vectors of the same length. I never finished writing tests or publishing it, though</p>",
        "id": 469140389,
        "sender_full_name": "Peter Deffebach",
        "timestamp": 1725984241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284809\">Peter Deffebach</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Inserting.20columns.20in.20Tables.2Ejl/near/469140389\">said</a>:</p>\n<blockquote>\n<p>which defines a table type and implements the Tables interface along with the Named Tuple interface (the two overlap, I overloaded some tables stuff for convenience). It adds a few functions related to mutability though. Its essentially a mutable named tuple where all the columns are vectors of the same length. I never finished writing tests or publishing it, though</p>\n</blockquote>\n<p>For what it's worth, this sounds like basically what <a href=\"https://juliahub.com/ui/Packages/General/TypedTables\">TypedTables.jl</a> already does except that it has an interface pretending the <code>Table</code> is a vector of named tuples rather than the other way around.</p>",
        "id": 469154524,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1725987309
    },
    {
        "content": "<p>Oh yeah, the other important thing is that the column types aren't encoded in the type. That's like the key feature lol. So this way you can have 1000s of columns and not worry about compilation issues.</p>",
        "id": 469160755,
        "sender_full_name": "Peter Deffebach",
        "timestamp": 1725988856
    },
    {
        "content": "<p>Ah. That's equivalent to the <code>FlexTable</code> type from TypedTables I believe.</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">ft</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FlexTable</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Charlie\"</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"p\">])</span>\n<span class=\"go\">FlexTable with 2 columns and 3 rows:</span>\n<span class=\"go\">     name     age</span>\n<span class=\"go\">   ┌─────────────</span>\n<span class=\"go\"> 1 │ Alice    25</span>\n<span class=\"go\"> 2 │ Bob      42</span>\n<span class=\"go\"> 3 │ Charlie  37</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">sex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"ss\">:F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:M</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:M</span><span class=\"p\">];</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">ft</span>\n<span class=\"go\">FlexTable with 3 columns and 3 rows:</span>\n<span class=\"go\">     name     age  sex</span>\n<span class=\"go\">   ┌──────────────────</span>\n<span class=\"go\"> 1 │ Alice    25   F</span>\n<span class=\"go\"> 2 │ Bob      42   M</span>\n<span class=\"go\"> 3 │ Charlie  37   M</span>\n</code></pre></div>",
        "id": 469208265,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1726000882
    },
    {
        "content": "<p>Hmmm, it looks like FlexTable still has a NamedTuple on the inside,  so you could still potentially create a named tuple with 10,000 elements. Whereas my version was backed by a plain vector of vectors.</p>",
        "id": 469212813,
        "sender_full_name": "Peter Deffebach",
        "timestamp": 1726002108
    },
    {
        "content": "<p>I made <a href=\"https://juliahub.com/ui/Packages/General/DictArrays\">DictArrays.jl</a> some time ago, think \"like structarrays, but with dictionaries instead of namedtuples\". Supports Tables and collection interface, fast both for very wide tables and for functions like map and filter.<br>\nI ended up barely using them – never encounter tables with more than 100-200 columns, and for them it's still fine to wait for StructArrays compilation.</p>\n<p>Still, it's a direct demonstration that Tables + collection operations + Accessors for column modification are possible at once, and without sacrificing performance.</p>",
        "id": 469220960,
        "sender_full_name": "aplavin",
        "timestamp": 1726005130
    },
    {
        "content": "<p>I'm currently working with  10,000 column dataset in Stata. The Julia toolchain just isn't there to do all the stuff I want. But yeah it's hard to see how something like these packages fits in. If you have 10,000 columns, you probably don't want something quick with a lightweight API. Just use dataframes</p>",
        "id": 469225637,
        "sender_full_name": "Peter Deffebach",
        "timestamp": 1726007317
    }
]