[
    {
        "content": "<p>Is there something like <code>all(pred, collection)</code> but that requires one <code>false</code> value? I'm thinking that <code>all</code> is like chaining <code>and</code>, <code>any</code> is chaining or, and I want something that's (sort of) chaining <code>xor</code>. A non-short circuiting version would just be something like </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">collection</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">collection</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"n\">allbutone</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">true</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">false</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">false</span>\n</code></pre></div>",
        "id": 239652033,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1621541497
    },
    {
        "content": "<p>I suppose the <code>xor</code> thing doesn't make sense, since another interpretation would be <code>onlyone</code> or something...</p>",
        "id": 239652257,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1621541599
    },
    {
        "content": "<p>I'm relatively confident you'll need to just write the short-circuiting version yourself; this seems like a really special-purpose function. The short-circuiting version is only a few lines of code anyway.</p>",
        "id": 239662950,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1621546474
    },
    {
        "content": "<p>The inverse (finding exactly 1 <code>true</code>) is slightly easier to write, and you can just pass<br>\n<code>!f</code> anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">exactly_n</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">itr</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">itr</span>\n        <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">return</span> <span class=\"nb\">false</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"n\">n</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Note that depending on your input data, the version without short-circuiting might be much<br>\nfaster.</p>",
        "id": 239664008,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1621547006
    },
    {
        "content": "<p>For best performance you probably would want to check <code>count &gt; n</code> after several iterations rather than every iteration (assuming <code>f</code> is relatively inexpensive).</p>",
        "id": 239664230,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1621547120
    },
    {
        "content": "<p>(I wonder if <code>Base</code> should have some sort of generic short-circuiting reduction implementation <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>",
        "id": 239666112,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1621548151
    },
    {
        "content": "<p><a href=\"https://github.com/search?q=Transducers.jl&amp;type=Repositories\">Transducers.jl</a> supports early termination through <code>reduced</code>, which is basically just short circuiting but more general. </p>\n<p>If you want something that's not too 'transducery' though, you could write</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">short_circuit_reduce</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">itr</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"n\">flag</span><span class=\"p\">)</span>\n           <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">init</span>\n           <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">itr</span>\n               <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n               <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">flag</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">return</span> <span class=\"n\">state</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">state</span>\n       <span class=\"k\">end</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Then, we just make version of <code>&amp;</code> which will \"forgive\" us if we give it <code>false</code> input <code>n</code> times:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">mutable struct</span> <span class=\"kt\">ForgivingAnd</span>\n           <span class=\"n\">n</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n       <span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">fga</span><span class=\"o\">::</span><span class=\"kt\">ForgivingAnd</span><span class=\"p\">)(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">p</span> <span class=\"o\">&amp;</span> <span class=\"n\">q</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">fga</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Now, <code>allbutone</code> just needs to stick a <code>ForgivingAnd(1)</code> into <code>short_circuit_reduce</code> and check that it forgave exactly <code>1</code> <code>false</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">itr</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ForgivingAnd</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n           <span class=\"n\">short_circuit_reduce</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">itr</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n       <span class=\"k\">end</span>\n</code></pre></div>\n<p>Then, we can check if it's working correctly:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">true</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">false</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">false</span>\n</code></pre></div>",
        "id": 239683824,
        "sender_full_name": "Mason Protter",
        "timestamp": 1621560407
    },
    {
        "content": "<p>If you want to short circuit out every <code>n</code> iterations, you could do something like </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">itr</span><span class=\"p\">;</span> <span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ForgivingAnd</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n           <span class=\"n\">short_circuit_reduce</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">itr</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"n\">chunk_size</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n       <span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">short_circuit_reduce</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">itr</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"n\">flag</span><span class=\"p\">,</span> <span class=\"n\">chunk_size</span><span class=\"o\">::</span><span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">64</span><span class=\"p\">)</span>\n           <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">init</span>\n           <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"k\">in</span> <span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span> <span class=\"n\">chunk_size</span><span class=\"p\">)</span>\n               <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">chunk</span>\n                   <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n               <span class=\"k\">end</span>\n               <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">flag</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">return</span> <span class=\"n\">state</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">state</span>\n       <span class=\"k\">end</span>\n</code></pre></div>\n<p>Then we can look at the performance implications on that for functions which have tight-loops like the one <span class=\"user-mention\" data-user-id=\"217836\">@Kevin Bonham</span>  was interested in, in the case where it never actually short circuits:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"n\">N</span> <span class=\"k\">in</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10_000</span><span class=\"p\">)</span>\n           <span class=\"n\">itr</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n           <span class=\"nd\">@show</span> <span class=\"n\">N</span>\n           <span class=\"k\">for</span> <span class=\"n\">chunk_size</span> <span class=\"k\">in</span> <span class=\"mi\">2</span> <span class=\"o\">.^</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n               <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"  \"</span><span class=\"p\">);</span> <span class=\"nd\">@show</span> <span class=\"n\">chunk_size</span>\n               <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"  \"</span><span class=\"p\">);</span> <span class=\"nd\">@btime</span> <span class=\"n\">allbutone</span><span class=\"p\">(</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"o\">$</span><span class=\"n\">itr</span><span class=\"p\">;</span> <span class=\"n\">chunk_size</span><span class=\"o\">=$</span><span class=\"n\">chunk_size</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">println</span><span class=\"p\">()</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"mf\">30.130</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n    <span class=\"mf\">22.942</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n    <span class=\"mf\">20.972</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n    <span class=\"mf\">20.993</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>\n    <span class=\"mf\">20.963</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"mf\">212.223</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n    <span class=\"mf\">132.495</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n    <span class=\"mf\">135.200</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n    <span class=\"mf\">109.536</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>\n    <span class=\"mf\">109.535</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"mf\">1.976</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n    <span class=\"mf\">1.168</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n    <span class=\"mf\">1.263</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n    <span class=\"mf\">1.004</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>\n    <span class=\"mf\">943.423</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"mf\">19.669</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n    <span class=\"mf\">11.559</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n    <span class=\"mf\">12.510</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n    <span class=\"mf\">9.859</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n  <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>\n    <span class=\"mf\">9.330</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"n\">allocation</span><span class=\"o\">:</span> <span class=\"mi\">16</span> <span class=\"n\">bytes</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 239688570,
        "sender_full_name": "Mason Protter",
        "timestamp": 1621564746
    },
    {
        "content": "<p>So there's real gains to be had here, likely because SIMD is being enabled.</p>",
        "id": 239688645,
        "sender_full_name": "Mason Protter",
        "timestamp": 1621564807
    },
    {
        "content": "<p>For a less generic version, you could make something screaming fast with <a href=\"https://github.com/search?q=LoopVectorization.jl&amp;type=Repositories\">LoopVectorization.jl</a> of course.</p>",
        "id": 239688676,
        "sender_full_name": "Mason Protter",
        "timestamp": 1621564837
    },
    {
        "content": "<p>Thanks for the thorough explanations! It actually hadn't occurred to me that writing the naive short-circuit version might end up slower.</p>\n<p><span class=\"user-mention\" data-user-id=\"296263\">@Adam non-jedi Beckmeyer</span> my first thought was basically your <code>exactly_n</code>, but counting falses instead of trues <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>.</p>\n<p><span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> I think I'm going to have to sit down and study your implementations with a cup of coffee <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>. I understand how to <em>use</em> iterators, but the writing of them is still not intuitive.</p>",
        "id": 239731216,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1621594596
    }
]