[
    {
        "content": "<p>Suppose I have a struct <code>Line</code> that takes two values. I want to write a function <code>p(x)</code> that tkes <code> [x_1,...,x_n]</code> and returns a vector of <br>\n<code>[Line(x_1,x_2), Line(x_2,x_3)...]</code>.</p>\n<p>I know I can simply write <code>p(x) = map(Line, x[1:end-1], x[2:end])</code>, but I was looking for a functional programming way of doing this... Something in the lines of <code>map((x,y)-&gt;Line(x,y) zip(head(x), tail(x))</code>... But this <code>head</code> and <code>tail</code> functions do not seem to be shipped on Julia. Also, it would be neat to have a general function for iterating over such pairs, triples, and so on.</p>\n<p>I thought of using a foldl, but this does not work properly, as it returns something like Line(1,Line (2, Line(3,4))).</p>\n<p>Another point is that the functiion should work for any Vector type, hence, it should not use stuff like [2:end], where one assumes that the vector has at least two values...</p>\n<p>I imagine that p(x) should be something similar to a fold in the sense of having an init. For a singleton vector could perhaps return Line(init, x[1]), and for an empty vector it could return Line(init,init).</p>\n<p>Any ideas?</p>",
        "id": 366908253,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686937734
    },
    {
        "content": "<p>It sounds like you just want to define a couple methods with that linear function to implement the iteration interface?</p>",
        "id": 366909825,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686938151
    },
    {
        "content": "<p><code>Base.iterate</code> and its 2 methods for your type, that is.</p>",
        "id": 366909972,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686938178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Iterating.20over.20pairs.20in.20a.20functional.20programming.20way/near/366908253\">said</a>:</p>\n<blockquote>\n<p>Suppose I have a struct <code>Line</code> that takes two values. I want to write a function <code>p(x)</code> that tkes <code> [x_1,...,x_n]</code> and returns a vector of <br>\n<code>[Line(x_1,x_2), Line(x_2,x_3)...]</code>.</p>\n<p>I know I can simply write <code>p(x) = map(Line, x[1:end-1], x[2:end])</code>, but I was looking for a functional programming way of doing this... </p>\n</blockquote>\n<p>What about that is not functional?</p>",
        "id": 366910332,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686938281
    },
    {
        "content": "<p>I took it to mean lazily compute the values, and then I immediately thought iteration interface. <span class=\"user-mention\" data-user-id=\"358317\">@Davi Sales Barreira</span> if you check out the Interfaces section of the Manual, it lays out the iteration interface, and proceeds with an example similar (lazily computing the squares of a scalar) to what (I believe) you are looking for.</p>",
        "id": 366911509,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686938537
    },
    {
        "content": "<p>Doing this with iterators instead of slicing could work, but it sounds hard to do it in a way that wouldn't be silently incorrect with stateful iterators</p>",
        "id": 366911715,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686938585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Iterating.20over.20pairs.20in.20a.20functional.20programming.20way/near/366910332\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Iterating.20over.20pairs.20in.20a.20functional.20programming.20way/near/366908253\">said</a>:</p>\n<blockquote>\n<p>Suppose I have a struct <code>Line</code> that takes two values. I want to write a function <code>p(x)</code> that tkes <code> [x_1,...,x_n]</code> and returns a vector of <br>\n<code>[Line(x_1,x_2), Line(x_2,x_3)...]</code>.</p>\n<p>I know I can simply write <code>p(x) = map(Line, x[1:end-1], x[2:end])</code>, but I was looking for a functional programming way of doing this... </p>\n</blockquote>\n<p>What about that is not functional?</p>\n</blockquote>\n<p>I mean, it assumes the vector to be at least of size 2, hence it fails for the other cases.</p>",
        "id": 366911749,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686938593
    },
    {
        "content": "<p>I guess I don't understand what that has to do with functional programming</p>",
        "id": 366911825,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686938613
    },
    {
        "content": "<p>Neither do I</p>",
        "id": 366911860,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686938625
    },
    {
        "content": "<p>Here is what I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">getlast</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">nothing</span>\n<span class=\"n\">getlast</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">]</span>\n\n<span class=\"n\">safecollect</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">nothing</span>\n<span class=\"n\">safecollect</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">safecollect</span><span class=\"p\">(</span><span class=\"n\">getlast</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">peel</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">safecollect</span><span class=\"p\">(</span><span class=\"n\">getlast</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">peel</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))))</span>\n<span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-&gt;</span><span class=\"n\">Line</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "id": 366912101,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686938680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Iterating.20over.20pairs.20in.20a.20functional.20programming.20way/near/366911825\">said</a>:</p>\n<blockquote>\n<p>I guess I don't understand what that has to do with functional programming</p>\n</blockquote>\n<p>Sorry, I'm not very proficience on functional programming... When I say this, I mostly mean something that would be directly implementable in Haskell.</p>",
        "id": 366912320,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686938731
    },
    {
        "content": "<p>Makes sense?</p>",
        "id": 366912844,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686938873
    },
    {
        "content": "<p>Ok, so do you mean that you want state to be hidden away with monads?</p>",
        "id": 366913093,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686938930
    },
    {
        "content": "<p>Iterators may mutate the state, and it is explicitly passed as an argument.</p>",
        "id": 366913198,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686938959
    },
    {
        "content": "<p>I'm not sure how to program like haskell in Julia though, sorry.</p>",
        "id": 366913263,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686938983
    },
    {
        "content": "<p>Also, take a look at <code>Base.front</code> and <code>Base.tail</code> (not exported for some reason)</p>",
        "id": 366914889,
        "sender_full_name": "mbaz",
        "timestamp": 1686939473
    },
    {
        "content": "<p>Is returning an empty list an acceptable fallback instead of some <code>init</code> value?</p>",
        "id": 366915305,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686939607
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Transducers</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"kt\">Line</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"w\">           </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"ss\">:x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:x3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Consecutive</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">MapSplat</span><span class=\"p\">(</span><span class=\"n\">Line</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span>\n<span class=\"go\">2-element Vector{Line{Symbol}}:</span>\n<span class=\"go\"> Line{Symbol}(:x1, :x2)</span>\n<span class=\"go\"> Line{Symbol}(:x2, :x3)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"ss\">:x1</span><span class=\"p\">,]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Consecutive</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">MapSplat</span><span class=\"p\">(</span><span class=\"n\">Line</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span>\n<span class=\"go\">Any[]</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Consecutive</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">MapSplat</span><span class=\"p\">(</span><span class=\"n\">Line</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span>\n<span class=\"go\">Any[]</span>\n</code></pre></div>",
        "id": 366915346,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686939621
    },
    {
        "content": "<p>Very interesting. I've been trying to understand how transduscers work. I'll take a look at the package again. Thanks</p>",
        "id": 366915863,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686939777
    },
    {
        "content": "<p>If you feel a need for a haskell version of everything I guess you could look at <a href=\"https://github.com/hypirion/haskell-transducers\">https://github.com/hypirion/haskell-transducers</a></p>",
        "id": 366916615,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686940014
    },
    {
        "content": "<p>No idea if this thing is well implemented or not though</p>",
        "id": 366916727,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686940053
    },
    {
        "content": "<p>Personally, I think Transducers are a much more elegant and natural functional programming approach to data traversal than anything I've seen come out of Haskell land</p>",
        "id": 366917251,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686940197
    },
    {
        "content": "<p>Ok, I'm reading <a href=\"https://github.com/search?q=Transducers.jl&amp;type=Repositories\">Transducers.jl</a> documentation, and it's amazing. I was wondering if fthere is a formalization of it in terms of category theory,</p>",
        "id": 366939092,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686946907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"358317\">@Davi Sales Barreira</span> I am not sure, but also check out libraries that work with transducers, like <a href=\"https://github.com/search?q=Folds.jl&amp;type=Repositories\">Folds.jl</a> and <a href=\"https://github.com/search?q=FLoops.jl&amp;type=Repositories\">FLoops.jl</a></p>\n<p>(also note that these projects live in the JuliaFolds organization, but the original maintainer went missing. Upgraded versions are forming in the JuliaFolds2 organization)</p>",
        "id": 366940246,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686947259
    },
    {
        "content": "<blockquote>\n<p>I was wondering if fthere is a formalization of it in terms of category theory</p>\n</blockquote>\n<p>The core idea is not new, it's just the concept of lenses which are described in category theoretic terms here: <a href=\"https://ncatlab.org/nlab/show/lens+%28in+computer+science%29\">https://ncatlab.org/nlab/show/lens+%28in+computer+science%29</a></p>",
        "id": 366942711,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686948152
    },
    {
        "content": "<p>but the details of various things are important, such as how transducers handle early termination, state, initialization, etc.</p>",
        "id": 366942833,
        "sender_full_name": "Mason Protter",
        "timestamp": 1686948205
    },
    {
        "content": "<p><a href=\"https://hypirion.com/musings/haskell-transducers\">https://hypirion.com/musings/haskell-transducers</a><br>\n<a href=\"https://hypirion.com/musings/transducers-to-conduits-and-back\">https://hypirion.com/musings/transducers-to-conduits-and-back</a></p>",
        "id": 366942977,
        "sender_full_name": "jar",
        "timestamp": 1686948244
    },
    {
        "content": "<p>You mean <span class=\"user-mention\" data-user-id=\"297129\">@Takafumi Arakaki (tkf)</span> is not contributing anymore??? I've followed lots of his sutff. Any idea on what happened?</p>",
        "id": 367148410,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1687002792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Iterating.20over.20pairs.20in.20a.20functional.20programming.20way/near/367148410\">said</a>:</p>\n<blockquote>\n<p>You mean <span class=\"user-mention silent\" data-user-id=\"297129\">Takafumi Arakaki (tkf)</span> is not contributing anymore??? I've followed lots of his sutff. Any idea on what happened?</p>\n</blockquote>\n<p>Since October, and unfortunately, nobody knows why.</p>",
        "id": 367150843,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1687003338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374994\">Michael Fiano</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Iterating.20over.20pairs.20in.20a.20functional.20programming.20way/near/367150843\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Iterating.20over.20pairs.20in.20a.20functional.20programming.20way/near/367148410\">said</a>:</p>\n<blockquote>\n<p>You mean <span class=\"user-mention silent\" data-user-id=\"297129\">Takafumi Arakaki (tkf)</span> is not contributing anymore??? I've followed lots of his sutff. Any idea on what happened?</p>\n</blockquote>\n<p>Since October, and unfortunately, nobody knows why.</p>\n</blockquote>\n<p>That is truly unfortunate.</p>",
        "id": 367154025,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1687004087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> has marked this topic as resolved.</p>",
        "id": 425285777,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709812136
    }
]