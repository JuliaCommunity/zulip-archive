[
    {
        "content": "<p>It was asked on <a class=\"stream\" data-stream-id=\"225542\" href=\"/#narrow/stream/225542-helpdesk\">#helpdesk</a> earlier why one can do things like <code>Symbol(Base) == :Base</code>, and if it's appropriate to use this in metaprogramming.</p>",
        "id": 224124379,
        "sender_full_name": "Mason Protter",
        "timestamp": 1611707167
    },
    {
        "content": "<p>My answer was<br>\n<span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/225542-helpdesk/topic/.60Symbol(.3A.3AType).60.20and.20.60Symbol(.3A.3AModule).60/near/224123797\">said</a>:</p>\n<blockquote>\n<p>There's a method defined in <code>base/strings/basic.jl</code> which is </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Hence, this should work for any  values:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>  <span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n  <span class=\"n\">Create</span> <span class=\"n\">a</span> <span class=\"n\">string</span> <span class=\"n\">from</span> <span class=\"n\">any</span> <span class=\"n\">values</span> <span class=\"k\">using</span> <span class=\"n\">the</span> <span class=\"n\">print</span> <span class=\"k\">function</span><span class=\"o\">.</span>\n\n  <span class=\"n\">string</span> <span class=\"n\">should</span> <span class=\"n\">usually</span> <span class=\"n\">not</span> <span class=\"n\">be</span> <span class=\"n\">defined</span> <span class=\"n\">directly</span><span class=\"o\">.</span> <span class=\"n\">Instead</span><span class=\"p\">,</span> <span class=\"n\">define</span> <span class=\"n\">a</span> <span class=\"n\">method</span> <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">::</span><span class=\"kt\">IO</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">MyType</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"n\">If</span> <span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"n\">certain</span>\n  <span class=\"k\">type</span> <span class=\"n\">needs</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">highly</span> <span class=\"n\">efficient</span><span class=\"p\">,</span> <span class=\"n\">then</span> <span class=\"n\">it</span> <span class=\"n\">may</span> <span class=\"n\">make</span> <span class=\"n\">sense</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">method</span> <span class=\"n\">to</span> <span class=\"n\">string</span> <span class=\"n\">and</span> <span class=\"n\">define</span> <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">::</span><span class=\"kt\">IO</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">MyType</span><span class=\"p\">)</span> <span class=\"o\">=</span>\n  <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"n\">to</span> <span class=\"n\">ensure</span> <span class=\"n\">the</span> <span class=\"n\">functions</span> <span class=\"n\">are</span> <span class=\"n\">consistent</span><span class=\"o\">.</span>\n\n  <span class=\"n\">Examples</span>\n  <span class=\"o\">≡≡≡≡≡≡≡≡≡≡</span>\n\n  <span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n  <span class=\"s\">\"a1true\"</span>\n</code></pre></div>\n<p>It's documented in the manual that <code>Symbol</code> does this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@doc</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span>\n  <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Symbol</span>\n\n  <span class=\"n\">Create</span> <span class=\"n\">a</span> <span class=\"kt\">Symbol</span> <span class=\"n\">by</span> <span class=\"n\">concatenating</span> <span class=\"n\">the</span> <span class=\"n\">string</span> <span class=\"n\">representations</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">arguments</span> <span class=\"n\">together</span><span class=\"o\">.</span>\n\n  <span class=\"n\">Examples</span>\n  <span class=\"o\">≡≡≡≡≡≡≡≡≡≡</span>\n\n  <span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"my\"</span><span class=\"p\">,</span> <span class=\"s\">\"name\"</span><span class=\"p\">)</span>\n  <span class=\"o\">:</span><span class=\"n\">myname</span>\n\n  <span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"day\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n  <span class=\"o\">:</span><span class=\"n\">day4</span>\n</code></pre></div>\n<p>so,  yes it is appropriate, safe and robust to use this.</p>\n<p>I think however this was an error in earlier versions of Julia for <code>nothing</code>, so maybe be careful with that.</p>\n</blockquote>",
        "id": 224124420,
        "sender_full_name": "Mason Protter",
        "timestamp": 1611707191
    }
]