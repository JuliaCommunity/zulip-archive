[
    {
        "content": "<p><a href=\"https://github.com/JuliaLang/julia/issues/35872\">#35872</a> changed <code>uuid4()</code> to not use the global RNG anymore which means <code>seed!</code> will no longer affect it.</p>\n<p>I have a function that generates a UUID and writes it to a file. The tests should check that the file contains that UUID, therefore it needs to be reproducible somehow. Real example: <a href=\"https://github.com/julia-actions/GitHubActions.jl/issues/26\">julia-actions/GitHubActions.jl#26</a></p>\n<p>Is there a good way to accomplish this without creating a custom RNG in the library code that can then be seeded in the test code? The latter would work but it seems like a bad practice</p>",
        "id": 308112921,
        "sender_full_name": "Sascha Mann",
        "timestamp": 1667642531
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 308113464,
        "sender_full_name": "Sukera",
        "timestamp": 1667642792
    },
    {
        "content": "<p>well I should read PRs before commenting</p>",
        "id": 308113533,
        "sender_full_name": "Sukera",
        "timestamp": 1667642830
    },
    {
        "content": "<p>in any case, having a dedicated RNG for your usecase is perfectly fine</p>",
        "id": 308113568,
        "sender_full_name": "Sukera",
        "timestamp": 1667642851
    },
    {
        "content": "<p>another option would be to see if there's a need to check for the exact UUID at all, or if it's sufficient that _a_ UUID is there</p>",
        "id": 308113710,
        "sender_full_name": "Sukera",
        "timestamp": 1667642903
    },
    {
        "content": "<p>Thanks, I'll use a dedicated RNG then</p>",
        "id": 308115094,
        "sender_full_name": "Sascha Mann",
        "timestamp": 1667643574
    },
    {
        "content": "<p>Checking if it contains some UUID in the right places would work for all but one edge case, otherwise I like that idea</p>",
        "id": 308115214,
        "sender_full_name": "Sascha Mann",
        "timestamp": 1667643620
    },
    {
        "content": "<p>I think I found an even better way in the upstream code that I'm reimplementing in Julia: Instead of seeding the RNG, mock <code>uuid4()</code> to return a specific UUID4. That addresses the edge case and doesn't require changes to the library code itself</p>",
        "id": 308117140,
        "sender_full_name": "Sascha Mann",
        "timestamp": 1667644618
    }
]