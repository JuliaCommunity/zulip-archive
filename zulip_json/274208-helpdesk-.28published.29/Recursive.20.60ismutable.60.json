[
    {
        "content": "<p>Does there already exist functionality for detecting whether a variable has any mutable data? So something like <code>ismutable(x)</code> except that it checks the mutability of the fields of <code>x</code> recursively.</p>",
        "id": 249049769,
        "sender_full_name": "Kyle Daruwalla",
        "timestamp": 1628636921
    },
    {
        "content": "<p>Not exactly that, but <code>isbits(x)</code>, although unions can yield false negatives.<br>\nAlso <code>Base.allocatedinline(typeof(x))</code> can avoid these:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"k\">struct</span> <span class=\"kt\">MaybeMissing</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n           <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Missing</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n       <span class=\"k\">end</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MaybeMissing</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">)</span>\n<span class=\"go\">MaybeMissing{Float64}(1.2)</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isbits</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">false</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">allocatedinline</span><span class=\"p\">(</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">true</span>\n</code></pre></div>",
        "id": 249057453,
        "sender_full_name": "chriselrod",
        "timestamp": 1628643227
    }
]