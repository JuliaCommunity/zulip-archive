[
    {
        "content": "<p>I am trying to create a Bit type - I'm not interested in efficiency - I'm playing with a proof of bitstrings with XOR as an Abelian Group.</p>\n<p>Why are \\ttone and \\ttzero invalid characters? I'm getting them from <a href=\"https://docs.julialang.org/en/v1/manual/unicode-input/\">https://docs.julialang.org/en/v1/manual/unicode-input/</a></p>\n<p>fails:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@enum</span> <span class=\"n\">𝔹</span> <span class=\"n\">𝟶</span> <span class=\"n\">𝟷</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">character</span> <span class=\"s\">\"𝟶\"</span> <span class=\"n\">near</span> <span class=\"n\">column</span> <span class=\"mi\">9</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">none</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">𝟷</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">character</span> <span class=\"s\">\"𝟷\"</span> <span class=\"n\">near</span> <span class=\"n\">column</span> <span class=\"mi\">8</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">none</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>works:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@enum</span> <span class=\"n\">𝔹</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 261583222,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637023572
    },
    {
        "content": "<p>I can't find any contradiction in <a href=\"https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\">Julia - Allowed Variable Names</a></p>\n<p><code>\\ttzero =  U+1D7F6</code></p>",
        "id": 261595636,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637035741
    },
    {
        "content": "<p>seems like a parsing error</p>",
        "id": 261608539,
        "sender_full_name": "Sukera",
        "timestamp": 1637050099
    },
    {
        "content": "<p>number-like chars are usually not allowed to start an identifier</p>",
        "id": 261612231,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1637052969
    },
    {
        "content": "<p>so <code>a𝟶</code> parses fine</p>",
        "id": 261612248,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1637052987
    },
    {
        "content": "<p>right, <code>\\ttone</code> is not a letter</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"sc\">'𝟷'</span>\n<span class=\"sc\">'𝟷'</span><span class=\"o\">:</span> <span class=\"n\">Unicode</span> <span class=\"n\">U</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"n\">D7F7</span> <span class=\"p\">(</span><span class=\"n\">category</span> <span class=\"n\">Nd</span><span class=\"o\">:</span> <span class=\"kt\">Number</span><span class=\"p\">,</span> <span class=\"n\">decimal</span> <span class=\"n\">digit</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 261612555,
        "sender_full_name": "Sukera",
        "timestamp": 1637053173
    },
    {
        "content": "<p>maybe a string macro for creating your \"bitstrings\" is better suited?</p>",
        "id": 261612741,
        "sender_full_name": "Sukera",
        "timestamp": 1637053235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"208845\">@Sebastian Pfitzner</span>  That looks like what the parser was complaining about, but the documentation says:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Allowed</span> <span class=\"n\">Variable</span> <span class=\"n\">Names</span>\n<span class=\"n\">Variable</span> <span class=\"n\">names</span> <span class=\"n\">must</span> <span class=\"k\">begin</span> <span class=\"n\">with</span> <span class=\"n\">a</span> <span class=\"n\">letter</span> <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Z</span> <span class=\"n\">or</span> <span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">underscore</span><span class=\"p\">,</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">subset</span> <span class=\"n\">of</span> <span class=\"n\">Unicode</span> <span class=\"n\">code</span> <span class=\"n\">points</span> <span class=\"n\">greater</span> <span class=\"n\">than</span> <span class=\"mi\">00</span><span class=\"n\">A0</span>\n</code></pre></div>\n<p>And then (IMHO) it mumbles a bit...</p>",
        "id": 261685966,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637087641
    },
    {
        "content": "<p>It does say \"Subsequent characters may also include ! and digits (0-9 and other characters in categories Nd/No)\", which kinda implies that those are not allowed at the start</p>",
        "id": 261686128,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1637087690
    },
    {
        "content": "<p>My lack of unicode experience is showing...  <em>Unicode Categories</em> are now decrypted for me.<br>\n<a href=\"https://www.compart.com/en/unicode/category/Nd\">List of Unicode Characters of Category “Decimal Number”</a></p>",
        "id": 261686566,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637087880
    },
    {
        "content": "<p>Sort of happy with this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"o\">&gt;</span> <span class=\"nd\">@enum</span> <span class=\"n\">𝔹</span> <span class=\"n\">zero</span> <span class=\"n\">one</span>\n\n<span class=\"o\">&gt;</span> <span class=\"o\">⊻</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">𝔹</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">𝔹</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">one</span>\n<span class=\"o\">⊻</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;</span> <span class=\"nd\">@show</span> <span class=\"p\">(</span><span class=\"n\">zero</span> <span class=\"o\">⊻</span> <span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">one</span> <span class=\"o\">⊻</span> <span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">zero</span> <span class=\"o\">⊻</span> <span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">one</span> <span class=\"o\">⊻</span> <span class=\"n\">one</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">zero</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 261687267,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637088158
    },
    {
        "content": "<p>you're kind of punning the functions <code>zero</code> and <code>one</code> though</p>",
        "id": 261688887,
        "sender_full_name": "Sukera",
        "timestamp": 1637088858
    },
    {
        "content": "<p>julia is very unicode aware</p>",
        "id": 261688995,
        "sender_full_name": "Sukera",
        "timestamp": 1637088905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306754\">@Sukera</span> </p>\n<blockquote>\n<p>you're kind of punning the functions <code>zero</code> and <code>one</code> though</p>\n</blockquote>\n<p>I'm not sure what you mean by functions. I thought I was defining a data-type with two elements <code>zero</code> and <code>one</code>,  which I am giving behavior by defining the function <code>⊻</code>. </p>\n<p>Cheers...</p>",
        "id": 261695846,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637091771
    },
    {
        "content": "<p>that will locally shadow the <code>one</code>/<code>zero</code> functions that Base exports</p>",
        "id": 261696497,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1637092046
    },
    {
        "content": "<p>which isn't necessarily bad though</p>",
        "id": 261696570,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1637092078
    },
    {
        "content": "<p>If do:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">)</span>\n<span class=\"kt\">Enum</span> <span class=\"n\">𝔹</span><span class=\"o\">:</span>\n<span class=\"n\">zero</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>The enumeration, to my mind - coincidentally, assigns them integers corresponding to their 'emotional' value. <br>\nThis works as well:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"o\">&gt;</span> <span class=\"nd\">@enum</span> <span class=\"n\">𝔹</span> <span class=\"n\">zero</span><span class=\"o\">=</span><span class=\"mi\">3</span> <span class=\"n\">one</span><span class=\"o\">=</span><span class=\"mi\">7</span>\n\n<span class=\"o\">&gt;</span> <span class=\"o\">⊻</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">𝔹</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">𝔹</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">one</span>\n\n<span class=\"o\">&gt;</span> <span class=\"nd\">@show</span> <span class=\"p\">(</span><span class=\"n\">zero</span> <span class=\"o\">⊻</span> <span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">one</span> <span class=\"o\">⊻</span> <span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">zero</span> <span class=\"o\">⊻</span> <span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">one</span> <span class=\"o\">⊻</span> <span class=\"n\">one</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">zero</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I could have given them boolean values - which I might like to do?</p>",
        "id": 261696709,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637092131
    },
    {
        "content": "<p>oh boy...</p>",
        "id": 261697280,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637092325
    },
    {
        "content": "<p>Not sure what to say other than to re-iterate what Sebastian said. <code>one</code> and <code>zero</code> are functions exported by <code>Base</code></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">zero</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n<span class=\"mf\">0.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">one</span><span class=\"p\">(</span><span class=\"kt\">Complex</span><span class=\"p\">{</span><span class=\"kt\">Rational</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">}})</span>\n<span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"o\">//</span><span class=\"mi\">1</span><span class=\"o\">*</span><span class=\"nb\">im</span>\n</code></pre></div>\n<p>When you do </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@enum</span> <span class=\"n\">𝔹</span> <span class=\"n\">zero</span> <span class=\"n\">one</span>\n</code></pre></div>\n<p>you're locally changing the meaning of those identifiers to be what your <code>Enum</code> defines</p>",
        "id": 261697487,
        "sender_full_name": "Mason Protter",
        "timestamp": 1637092409
    },
    {
        "content": "<p>Which is fine</p>",
        "id": 261697505,
        "sender_full_name": "Mason Protter",
        "timestamp": 1637092416
    },
    {
        "content": "<p>And you can still access <code>Base.one</code> and <code>Base.zero</code> by qualifying the names</p>",
        "id": 261697541,
        "sender_full_name": "Mason Protter",
        "timestamp": 1637092436
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@enum</span> <span class=\"n\">𝔹</span> <span class=\"n\">zero</span> <span class=\"n\">one</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">zero</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">objects</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">𝔹</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"n\">callable</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n<span class=\"mf\">0.0</span>\n</code></pre></div>",
        "id": 261697654,
        "sender_full_name": "Mason Protter",
        "timestamp": 1637092478
    },
    {
        "content": "<p>I made a joke - which I couldn't see :-))</p>",
        "id": 261697760,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637092529
    },
    {
        "content": "<p>Is there a way of creating a type in Julia, which has a set of elements, without using @enum? <br>\nThough now all you kind people have shown me what I was really doing, I think for the purposes of this exercise, I have something that works.</p>",
        "id": 261697953,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637092594
    },
    {
        "content": "<p>You could use an inner constructor to reject invalid data</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"kt\">𝔹²</span>\n           <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n           <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n           <span class=\"n\">𝔹²</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n               <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span>\n           <span class=\"k\">else</span>\n               <span class=\"n\">throw</span><span class=\"p\">(</span><span class=\"s\">\"Invalid booleans </span><span class=\"si\">$</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">))</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">𝔹²</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">𝔹²</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">𝔹²</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">𝔹²</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">𝔹²</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"s\">\"Invalid booleans (0, 2)\"</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">𝔹²</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">7</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 261698753,
        "sender_full_name": "Mason Protter",
        "timestamp": 1637092918
    },
    {
        "content": "<p>I found this: <a href=\"https://discourse.julialang.org/t/style-recommendation-for-enum-as-type/46078\">Style recommendation for enum as type</a>, which has discussion on the difference between enumerated types, and types that can be dispatched apon.</p>",
        "id": 261719992,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637103558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373536\">Alexander</span> has marked this topic as unresolved.</p>",
        "id": 261767775,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637145893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373536\">Alexander</span> has marked this topic as resolved.</p>",
        "id": 261767807,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637145912
    },
    {
        "content": "<p>from an out-of-the-box REPL:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">zero</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n<span class=\"nb\">false</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">zero</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"nb\">false</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">one</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"nb\">true</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">one</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n<span class=\"nb\">true</span>\n</code></pre></div>\n<p><em>Learning by Breaking</em></p>",
        "id": 261849044,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1637183117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"208845\">Sebastian Pfitzner</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.E2.9C.94.20help.20with.20Unicode.20.20variables.20.20defining.20a.20Bit.20type.20with.20.2E.2E.2E/near/261686128\">said</a>:</p>\n<blockquote>\n<p>It does say \"Subsequent characters may also include ! and digits (0-9 and other characters in categories Nd/No)\", which kinda implies that those are not allowed at the start</p>\n</blockquote>\n<p>\"Subsequen t characters may also include ! and digits (0-9 and other characters in categories Nd/No)\", implies that characters other than a-z, _, A-Z,!, 0-9, \"subset of Unicode code points greater than 00A0\"  and so on,  are not allowed either at the beginning or as subsequent characters, in my opinion. <br>\nIn any case, the definition seems to me not \"clean\" as it speaks as allowed characters of UN SUBSET unspecified of Unicode code points greater than 00A0 <br>\nIt is not clear whether all code points greater than 00A0 or only some (which?) of them are intended.</p>",
        "id": 261851511,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1637184273
    },
    {
        "content": "<p>yes, <code>Bool</code> is a <code>Integer</code> in julia</p>",
        "id": 261854217,
        "sender_full_name": "Sukera",
        "timestamp": 1637185606
    },
    {
        "content": "<p>which IMO is <strong>much</strong> more sensible than the reverse where a lot of languages treat integers as booleans</p>",
        "id": 261992884,
        "sender_full_name": "Mason Protter",
        "timestamp": 1637270623
    },
    {
        "content": "<p>yes, but only if you error when trying to index with a boolean</p>",
        "id": 261993367,
        "sender_full_name": "Sukera",
        "timestamp": 1637270846
    },
    {
        "content": "<p>else writing <code>x &gt; 4</code> instead of <code>x &gt;&gt; 4</code> in an indexing expression by accident is horrible to debug</p>",
        "id": 261993408,
        "sender_full_name": "Sukera",
        "timestamp": 1637270872
    }
]