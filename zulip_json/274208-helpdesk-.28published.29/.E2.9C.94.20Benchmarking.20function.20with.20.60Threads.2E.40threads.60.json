[
    {
        "content": "<p>I have been working on a parallelized function that uses <code>Threads.@threads</code>. The function works perfectly fine on its own, but when I try to benchmark the function I get this error. Is there anything I need to take into account when using <a href=\"https://github.com/search?q=BenchmarkTools.jl&amp;type=Repositories\">BenchmarkTools.jl</a> for threaded functions? I also implement a <code>@views</code> macro which might be important to mention?</p>\n<p>Normal:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">sedt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">nthreads</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"mi\">5</span><span class=\"o\">Ã—</span><span class=\"mi\">4</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">1.0</span>  <span class=\"mf\">5.0</span>  <span class=\"mf\">10.0</span>\n <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">2.0</span>   <span class=\"mf\">5.0</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">1.0</span>  <span class=\"mf\">1.0</span>   <span class=\"mf\">2.0</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">4.0</span>  <span class=\"mf\">2.0</span>   <span class=\"mf\">1.0</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">9.0</span>  <span class=\"mf\">5.0</span>   <span class=\"mf\">2.0</span>\n</code></pre></div>\n<p>Timing:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@benchmark</span> <span class=\"n\">sedt</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">nthreads</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">TaskFailedException</span>\n\n    <span class=\"n\">nested</span> <span class=\"n\">task</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"kt\">BoundsError</span><span class=\"o\">:</span> <span class=\"n\">attempt</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">view</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">)</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Int64</span> <span class=\"n\">at</span> <span class=\"n\">index</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n     <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">throw_boundserror</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"n\">I</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span>\n       <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">651</span>\n     <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">checkbounds</span>\n       <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">616</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">getindex</span>\n       <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">subarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">302</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">squared_euclidean_distance_transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">})</span>\n       <span class=\"err\">@</span> <span class=\"n\">DistanceTransforms</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DistanceTransforms</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"n\">wk55</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">squared_euclidean_distance_transform</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">36</span>\n     <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n       <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">121</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">7</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#1138#threadsfor_fun#47\"</span><span class=\"p\">{</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}})(</span><span class=\"n\">onethread</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">)</span>\n       <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">81</span>\n     <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#1138#threadsfor_fun#47\"</span><span class=\"p\">{</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}})()</span>\n       <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">48</span>\n\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">wait</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">322</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">threading_run</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Threads</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">34</span>\n  <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">93</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">sedt</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"n\">nthreads</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">121</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">6</span>\n  <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"sa\">var</span><span class=\"s\">\"##core#576\"</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"c\">#571::Matrix{Int64}, dt#572::Matrix{Float32}, v#573::Matrix{Int64}, z#574::Matrix{Float32}, nthreads#575::Int64)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">479</span>\n  <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"sa\">var</span><span class=\"s\">\"##sample#577\"</span><span class=\"p\">(</span><span class=\"n\">__params</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Parameters</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">485</span>\n  <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">_run</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Benchmark</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Parameters</span><span class=\"p\">;</span> <span class=\"n\">verbose</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"n\">pad</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Integer</span><span class=\"p\">,</span> <span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:samples</span><span class=\"p\">,</span> <span class=\"ss\">:evals</span><span class=\"p\">,</span> <span class=\"ss\">:gctrial</span><span class=\"p\">,</span> <span class=\"ss\">:gcsample</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">}}})</span>\n    <span class=\"err\">@</span> <span class=\"n\">BenchmarkTools</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">98</span>\n  <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"c\">#invokelatest#2</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">710</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"c\">#run_result#45</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">33</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Benchmark</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Parameters</span><span class=\"p\">;</span> <span class=\"n\">progressid</span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">nleaves</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">ndone</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Integer</span><span class=\"p\">,</span> <span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:verbose</span><span class=\"p\">,</span> <span class=\"ss\">:samples</span><span class=\"p\">,</span> <span class=\"ss\">:evals</span><span class=\"p\">,</span> <span class=\"ss\">:gctrial</span><span class=\"p\">,</span> <span class=\"ss\">:gcsample</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">}}})</span>\n    <span class=\"err\">@</span> <span class=\"n\">BenchmarkTools</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">116</span>\n <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span> <span class=\"c\">#warmup#54</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">168</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span> <span class=\"n\">warmup</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Benchmark</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">BenchmarkTools</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">168</span>\n <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">387</span>\n <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span> <span class=\"n\">eval</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">360</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]</span> <span class=\"n\">include_string</span><span class=\"p\">(</span><span class=\"n\">mapexpr</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">softscope</span><span class=\"p\">),</span> <span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1094</span>\n</code></pre></div>",
        "id": 246354082,
        "sender_full_name": "Dale Black",
        "timestamp": 1626572896
    },
    {
        "content": "<p>Do you have a minimal example?</p>",
        "id": 246362472,
        "sender_full_name": "chriselrod",
        "timestamp": 1626588947
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">squared_euclidean_distance_transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.0f12</span>\n    <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0f12</span>\n\n    <span class=\"c\"># Lower envelope operation</span>\n    <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"k\">in</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span>\n        <span class=\"k\">while</span> <span class=\"nb\">true</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">q</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">â‰¤</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n                <span class=\"n\">k</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">q</span>\n                <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n                <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0f12</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c\"># Distance transform operation</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span>\n        <span class=\"k\">while</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">q</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">dt</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">q</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]]</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">dt</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">sedt</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">nthreads</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"n\">nthreads</span> <span class=\"o\">â‰¤</span> <span class=\"mi\">1</span>\n        <span class=\"n\">squared_euclidean_distance_transform</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@threads</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">rows</span>\n            <span class=\"nd\">@views</span> <span class=\"n\">squared_euclidean_distance_transform</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">],</span> <span class=\"n\">dt</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">],</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">])</span>\n        <span class=\"k\">end</span>\n\n        <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@threads</span> <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">columns</span>\n            <span class=\"nd\">@views</span> <span class=\"n\">squared_euclidean_distance_transform</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">dt</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">])</span>\n        <span class=\"k\">end</span>\n        <span class=\"k\">return</span> <span class=\"n\">dt</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">([</span>\n    <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n    <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n    <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n    <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n    <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n<span class=\"p\">])</span>\n<span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">nthreads</span> <span class=\"o\">=</span> <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"n\">nthreads</span><span class=\"p\">();</span>\n\n<span class=\"n\">sedt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">nthreads</span><span class=\"p\">)</span>\n\n<span class=\"c\"># Returns</span>\n<span class=\"mi\">5</span><span class=\"o\">Ã—</span><span class=\"mi\">4</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">1.0</span>  <span class=\"mf\">5.0</span>  <span class=\"mf\">10.0</span>\n <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">2.0</span>   <span class=\"mf\">5.0</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">1.0</span>  <span class=\"mf\">1.0</span>   <span class=\"mf\">2.0</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">4.0</span>  <span class=\"mf\">2.0</span>   <span class=\"mf\">1.0</span>\n <span class=\"mf\">1.0</span>  <span class=\"mf\">9.0</span>  <span class=\"mf\">5.0</span>   <span class=\"mf\">2.0</span>\n\n<span class=\"nd\">@benchmark</span> <span class=\"n\">sedt</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">nthreads</span><span class=\"p\">)</span>\n\n<span class=\"c\"># Returns</span>\n<span class=\"kt\">TaskFailedException</span>\n\n    <span class=\"n\">nested</span> <span class=\"n\">task</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"kt\">BoundsError</span><span class=\"o\">:</span> <span class=\"n\">attempt</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">view</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">)</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Int64</span> <span class=\"n\">at</span> <span class=\"n\">index</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n     <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">throw_boundserror</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"n\">I</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span>\n       <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">651</span>\n     <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">checkbounds</span>\n       <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">616</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">getindex</span>\n       <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">subarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">302</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">squared_euclidean_distance_transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Slice</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">OneTo</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}},</span> <span class=\"kt\">true</span><span class=\"p\">})</span>\n       <span class=\"err\">@</span> <span class=\"n\">DistanceTransforms</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DistanceTransforms</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"n\">wk55</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">squared_euclidean_distance_transform</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">36</span>\n     <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n       <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">121</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">7</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#1138#threadsfor_fun#47\"</span><span class=\"p\">{</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}})(</span><span class=\"n\">onethread</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">)</span>\n       <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">81</span>\n     <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#1138#threadsfor_fun#47\"</span><span class=\"p\">{</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}})()</span>\n       <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">48</span>\n\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">wait</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">322</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">threading_run</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Threads</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">34</span>\n  <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">threadingconstructs</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">93</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">sedt</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"n\">nthreads</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">121</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">6</span>\n  <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"sa\">var</span><span class=\"s\">\"##core#576\"</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"c\">#571::Matrix{Int64}, dt#572::Matrix{Float32}, v#573::Matrix{Int64}, z#574::Matrix{Float32}, nthreads#575::Int64)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">479</span>\n  <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"sa\">var</span><span class=\"s\">\"##sample#577\"</span><span class=\"p\">(</span><span class=\"n\">__params</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Parameters</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">485</span>\n  <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">_run</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Benchmark</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Parameters</span><span class=\"p\">;</span> <span class=\"n\">verbose</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"n\">pad</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Integer</span><span class=\"p\">,</span> <span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:samples</span><span class=\"p\">,</span> <span class=\"ss\">:evals</span><span class=\"p\">,</span> <span class=\"ss\">:gctrial</span><span class=\"p\">,</span> <span class=\"ss\">:gcsample</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">}}})</span>\n    <span class=\"err\">@</span> <span class=\"n\">BenchmarkTools</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">98</span>\n  <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"c\">#invokelatest#2</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">710</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"c\">#run_result#45</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">33</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Benchmark</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Parameters</span><span class=\"p\">;</span> <span class=\"n\">progressid</span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">nleaves</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">ndone</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Integer</span><span class=\"p\">,</span> <span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:verbose</span><span class=\"p\">,</span> <span class=\"ss\">:samples</span><span class=\"p\">,</span> <span class=\"ss\">:evals</span><span class=\"p\">,</span> <span class=\"ss\">:gctrial</span><span class=\"p\">,</span> <span class=\"ss\">:gcsample</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">}}})</span>\n    <span class=\"err\">@</span> <span class=\"n\">BenchmarkTools</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">116</span>\n <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span> <span class=\"c\">#warmup#54</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">168</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span> <span class=\"n\">warmup</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">::</span><span class=\"kt\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Benchmark</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">BenchmarkTools</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">168</span>\n <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">BenchmarkTools</span><span class=\"o\">/</span><span class=\"n\">tGTCy</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">execution</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">387</span>\n <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span> <span class=\"n\">eval</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">360</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]</span> <span class=\"n\">include_string</span><span class=\"p\">(</span><span class=\"n\">mapexpr</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">softscope</span><span class=\"p\">),</span> <span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1094</span>\n</code></pre></div>",
        "id": 246380877,
        "sender_full_name": "Dale Black",
        "timestamp": 1626617586
    },
    {
        "content": "<p>You probably have race conditions on <code>z</code></p>",
        "id": 246381211,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1626618048
    },
    {
        "content": "<p>At least it should be reset between calculations, shouldn't it?</p>",
        "id": 246381313,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1626618186
    },
    {
        "content": "<p>Ah, maybe not.</p>",
        "id": 246381440,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1626618372
    },
    {
        "content": "<p>Did you swap rows and columns?</p>",
        "id": 246670778,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1626831751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369728\">Jameson Nash</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Benchmarking.20function.20with.20.60Threads.2E.40threads.60/near/246670778\">said</a>:</p>\n<blockquote>\n<p>Did you swap rows and columns?</p>\n</blockquote>\n<p>Can you explain that a little more? The <code>squared_euclidean_distance_transform</code> function that is 1D works on either rows or columns and then the 2D threaded <code>sedt</code>calls to the 1D function on both the rows and the columns of a given 2D <code>dt</code> array. Is that at all what you are referring to or am I missing something?</p>",
        "id": 246773581,
        "sender_full_name": "Dale Black",
        "timestamp": 1626899102
    },
    {
        "content": "<p>Is it specific to <code>Threads.@threads</code>? Did you try it without <code>Threads.@threads</code>?</p>\n<p>Also, since you have the initializations</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I think you might need it to do before each call to <code>sedt</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@benchmark</span> <span class=\"n\">sedt</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">fill!</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">fill!</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"o\">$</span><span class=\"n\">nthreads</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 246803213,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1626921439
    },
    {
        "content": "<p>Yes it works without using threads. Iâ€™m on mobile and I wonâ€™t be near my laptop for a couple days but I will give your suggestion a try soon. That might be the problem!</p>",
        "id": 246932610,
        "sender_full_name": "Dale Black",
        "timestamp": 1627012402
    },
    {
        "content": "<p>Okay, it looked like your threads loop was using column indexes to slice the rows and the opposite</p>",
        "id": 247337273,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1627394616
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"225542\" href=\"/#narrow/stream/225542-helpdesk/topic/.E2.9C.94.20How.20to.20rewrite.20for.20loops.20for.20GPU\">#helpdesk &gt; âœ” How to rewrite for loops for GPU</a> solved the benchmarking problem!</p>",
        "id": 249191915,
        "sender_full_name": "Dale Black",
        "timestamp": 1628735448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352971\">Dale Black</span> has marked this topic as resolved.</p>",
        "id": 249191918,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628735453
    }
]