[
    {
        "content": "<p>Is there any abstract type that is a catch-all for GPU arrays? I want to use multiple dispatch on some function that works on Metal or CUDA or AMDGPU and on the CPU works slightly differently. E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">.+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">GPUArray</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">.+</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I could rewrite the functions for all of the GPU backends but that seems like a pain if it's not needed</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">MtlArray</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">.+</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">CuArray</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">.+</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"k\">end</span>\n\n<span class=\"o\">...</span>\n</code></pre></div>",
        "id": 399820015,
        "sender_full_name": "Dale Black",
        "timestamp": 1698882348
    },
    {
        "content": "<p>I think you want <a href=\"https://docs.juliahub.com/GPUArraysCore/qiYUe/0.1.2/autodocs/#GPUArraysCore.AbstractGPUArray\">https://docs.juliahub.com/GPUArraysCore/qiYUe/0.1.2/autodocs/#GPUArraysCore.AbstractGPUArray</a></p>",
        "id": 399828915,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1698886477
    },
    {
        "content": "<p>I’m away from my computer right now but that looks like it’s exactly what I want</p>",
        "id": 399831458,
        "sender_full_name": "Dale Black",
        "timestamp": 1698887899
    }
]