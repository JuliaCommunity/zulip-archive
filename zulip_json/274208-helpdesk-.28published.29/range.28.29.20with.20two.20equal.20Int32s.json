[
    {
        "content": "<p>Why does the <code>range</code> function not like to construct a range with two equal <code>Int32</code>s as inputs? It seems to work when one of the inputs is an <code>Int32</code> but not both.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"kt\">Int64</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mf\">1.0</span><span class=\"o\">:</span><span class=\"mf\">0.0</span><span class=\"o\">:</span><span class=\"mf\">1.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mf\">1.0</span><span class=\"o\">:</span><span class=\"mf\">0.0</span><span class=\"o\">:</span><span class=\"mf\">1.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">Cannot</span> <span class=\"sb\">`convert`</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"k\">type</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int32</span><span class=\"p\">,</span><span class=\"kt\">Int64</span><span class=\"p\">}</span> <span class=\"n\">to</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"k\">type</span> <span class=\"kt\">Float64</span>\n</code></pre></div>\n<p>I think there's just something I don't understand about the <code>range</code> function :/ Thanks!</p>",
        "id": 227406208,
        "sender_full_name": "Hannes",
        "timestamp": 1614074551
    },
    {
        "content": "<p>That has to be a bug. I'd create an issue.</p>",
        "id": 227416638,
        "sender_full_name": "Zachary P Christensen",
        "timestamp": 1614080261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269192\">@Zachary P Christensen</span> Thanks, I was wondering if it was a bug. If I don't hear any more on this thread I'll open an issue.</p>",
        "id": 227417180,
        "sender_full_name": "Hannes",
        "timestamp": 1614080577
    },
    {
        "content": "<p>it's kind of a bug, but you're basically asking for a non existing range?</p>",
        "id": 227421260,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1614082758
    },
    {
        "content": "<p>True, but the behavior should be consistent for both integer types</p>",
        "id": 227421506,
        "sender_full_name": "Zachary P Christensen",
        "timestamp": 1614082876
    },
    {
        "content": "<p>The output of that is just 10 values of 1.0, could you just use <code>ones(Int32, 10)</code> ? (Or whatever output type you need)</p>",
        "id": 227421512,
        "sender_full_name": "Michael Alexander",
        "timestamp": 1614082878
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mf\">1.0</span><span class=\"o\">:</span><span class=\"mf\">1.0</span><span class=\"o\">:</span><span class=\"mf\">10.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">);</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mf\">1.0</span><span class=\"o\">:</span><span class=\"mf\">0.8888888888888888</span><span class=\"o\">:</span><span class=\"mf\">9.0</span>\n</code></pre></div>\n<p>work as expected</p>",
        "id": 227421554,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1614082912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269192\">Zachary P Christensen</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/range().20with.20two.20equal.20Int32s/near/227421506\">said</a>:</p>\n<blockquote>\n<p>True, but the behavior should be consistent for both integer types</p>\n</blockquote>\n<p>it's certainly inconsistent, but I find more surprising that <code>range(1, 1; length=10)</code> doesn't error out</p>",
        "id": 227421679,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1614082964
    },
    {
        "content": "<p>Agreed</p>",
        "id": 227421789,
        "sender_full_name": "Zachary P Christensen",
        "timestamp": 1614083033
    },
    {
        "content": "<p>Mixing types also works for unequal values. <code> range(Int32(1), Int64(10); length=10)</code></p>",
        "id": 227421909,
        "sender_full_name": "Michael Alexander",
        "timestamp": 1614083086
    },
    {
        "content": "<p>I find this more incosistent:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"mf\">1.0</span><span class=\"o\">:</span><span class=\"mf\">0.0</span><span class=\"o\">:</span><span class=\"mf\">1.0</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">ArgumentError</span><span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">step</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">zero</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Colon</span><span class=\"p\">)(</span><span class=\"n\">start</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">twiceprecision</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">387</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mf\">1.0</span><span class=\"o\">:</span><span class=\"mf\">0.0</span><span class=\"o\">:</span><span class=\"mf\">1.0</span>\n</code></pre></div>",
        "id": 227422101,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1614083179
    },
    {
        "content": "<p>Yeah, I'd think it would be the other way around <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 227448342,
        "sender_full_name": "Simeon Schaub",
        "timestamp": 1614094097
    },
    {
        "content": "<p>Thanks everyone for your help, I've opened an issue <a href=\"https://github.com/JuliaLang/julia/issues/39798\">here</a>.</p>",
        "id": 227484191,
        "sender_full_name": "Hannes",
        "timestamp": 1614106576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284912\">Michael Alexander</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/range().20with.20two.20equal.20Int32s/near/227421512\">said</a>:</p>\n<blockquote>\n<p>The output of that is just 10 values of 1.0, could you just use <code>ones(Int32, 10)</code> ? (Or whatever output type you need)</p>\n</blockquote>\n<p>Normally I would, in this case I want to get <code>n</code> evenly spaced values from the minimum to the maximum of an array. I'll just add an explicit check for when <code>minimum(x) == maximum(x)</code>. :)</p>",
        "id": 227484539,
        "sender_full_name": "Hannes",
        "timestamp": 1614106697
    },
    {
        "content": "<p>I have a fix for this in <a href=\"https://github.com/JuliaLang/julia/pull/39808\">https://github.com/JuliaLang/julia/pull/39808</a> . <code>one</code> might be better than <code>oneunit</code> here though. I need to think about this with more sleep.</p>",
        "id": 227569249,
        "sender_full_name": "Mark Kittisopikul",
        "timestamp": 1614158213
    },
    {
        "content": "<p>You might be interested in just using <code>LinRange</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">LinRange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">LinRange</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.11111</span><span class=\"p\">,</span><span class=\"mf\">1.22222</span><span class=\"p\">,</span><span class=\"mf\">1.33333</span><span class=\"p\">,</span><span class=\"mf\">1.44444</span><span class=\"p\">,</span><span class=\"mf\">1.55556</span><span class=\"p\">,</span><span class=\"mf\">1.66667</span><span class=\"p\">,</span><span class=\"mf\">1.77778</span><span class=\"p\">,</span><span class=\"mf\">1.88889</span><span class=\"p\">,</span><span class=\"mf\">2.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">LinRange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"mi\">9</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">LinRange</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.125</span><span class=\"p\">,</span><span class=\"mf\">1.25</span><span class=\"p\">,</span><span class=\"mf\">1.375</span><span class=\"p\">,</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"mf\">1.625</span><span class=\"p\">,</span><span class=\"mf\">1.75</span><span class=\"p\">,</span><span class=\"mf\">1.875</span><span class=\"p\">,</span><span class=\"mf\">2.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">LinRange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"mi\">11</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">LinRange</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.1</span><span class=\"p\">,</span><span class=\"mf\">1.2</span><span class=\"p\">,</span><span class=\"mf\">1.3</span><span class=\"p\">,</span><span class=\"mf\">1.4</span><span class=\"p\">,</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"mf\">1.6</span><span class=\"p\">,</span><span class=\"mf\">1.7</span><span class=\"p\">,</span><span class=\"mf\">1.8</span><span class=\"p\">,</span><span class=\"mf\">1.9</span><span class=\"p\">,</span><span class=\"mf\">2.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">LinRange</span><span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"kt\">Int32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">LinRange</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span>\n</code></pre></div>",
        "id": 227572020,
        "sender_full_name": "Mark Kittisopikul",
        "timestamp": 1614159713
    }
]