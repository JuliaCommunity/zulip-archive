[
    {
        "content": "<p>Neither <a href=\"https://github.com/search?q=SpecialFunctions.jl&amp;type=Repositories\">SpecialFunctions.jl</a> or <a href=\"https://github.com/search?q=Bessels.jl&amp;type=Repositories\">Bessels.jl</a> support complex order parameters. For my specific problem I need something like <code>hankelh1(-im,1.0)</code> to work. (oops, could an admin move this to the published helpdesk stream? Thanks)</p>",
        "id": 394016148,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1696028649
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"225542\" href=\"/#narrow/stream/225542-helpdesk/topic/Is.20there.20a.20package.20with.20complex.20bessel.20functions.3F\">#helpdesk &gt; Is there a package with complex bessel functions?</a> by <span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span>.</p>",
        "id": 394055555,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696056037
    },
    {
        "content": "<p>Since I only need a few values of the order, I ended up just tabulating these with Mathematica. I'd love a native Julia solution, if I get enough free time to research implementations maybe I'll submit a PR to <a href=\"https://github.com/search?q=Bessels.jl&amp;type=Repositories\">Bessels.jl</a> . These complex-order Bessel functions seem fairly obscure, even <code>gsl</code> seems also to only support real orders. Apparently <code>mpmath</code> in Python does have them, so you could also use <code>PyCall</code></p>\n<p>Anyway, for posterity, here is the Mathematica code I used:</p>\n<div class=\"codehilite\" data-code-language=\"Mathematica\"><pre><span></span><code><span class=\"n\">tab</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">HankelH1</span><span class=\"p\">[</span><span class=\"n\">Sqrt</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Exp</span><span class=\"o\">@</span><span class=\"n\">x</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">-6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"p\">}];</span>\n<span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"[\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span>\n<span class=\"w\">   </span><span class=\"n\">Map</span><span class=\"p\">[</span><span class=\"n\">ToString</span><span class=\"p\">[</span><span class=\"n\">Re</span><span class=\"o\">@</span><span class=\"nv\">#</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"s\">\" + im*\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">ToString</span><span class=\"p\">[</span><span class=\"n\">Im</span><span class=\"o\">@</span><span class=\"nv\">#</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"s\">\",\\n\"</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tab</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span>\n<span class=\"w\">    </span><span class=\"s\">\"]\"</span><span class=\"p\">;</span>\n<span class=\"n\">Export</span><span class=\"p\">[</span><span class=\"s\">\"hankel_table.jl\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Text\"</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"n\">CharacterEncoding</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Unicode\"</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 394901275,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1696446468
    },
    {
        "content": "<p>A not particularly fast implementation (but faster than calling Python) is also possible through identities with <a href=\"https://juliahub.com/ui/Packages/General/HypergeometricFunctions\">HypergeometricFunctions.jl</a> (I think I'll use this one in practice, to avoid needing to tabulate and interpolate). I'm sure this is not as numerically accurate as it could be.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">import</span><span class=\"w\"> </span><span class=\"n\">SpecialFunctions</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">gamma</span>\n<span class=\"k\">import</span><span class=\"w\"> </span><span class=\"n\">HypergeometricFunctions</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">pFq</span>\n<span class=\"n\">besselj</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"n\">nu</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">pFq</span><span class=\"p\">((),(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">nu</span><span class=\"p\">,),</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">bessely</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">besselj</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"o\">*</span><span class=\"nb\">π</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">besselj</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">/</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"o\">*</span><span class=\"nb\">π</span><span class=\"p\">)</span>\n<span class=\"n\">hankelh1</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">besselj</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">im</span><span class=\"o\">*</span><span class=\"n\">bessely</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">hankelh2</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">besselj</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nb\">im</span><span class=\"o\">*</span><span class=\"n\">bessely</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 395339791,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1696633833
    },
    {
        "content": "<p>Thanks for sharing your solutions !<br>\nFor the <code>bessely</code> line, you might be interested in <a href=\"https://docs.julialang.org/en/v1/base/math/#Base.Math.sincospi\"><code>sincospi</code></a> ?</p>",
        "id": 395387287,
        "sender_full_name": "ederag",
        "timestamp": 1696665274
    },
    {
        "content": "<p>Oh thanks! Yes that looks very relevant, I didn't know about that function. It's in Base too</p>",
        "id": 395758443,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1696882847
    }
]