[
    {
        "content": "<p>I am wondering if this is a bug or just an irrational request:</p>\n<p>I want to use <code>@nospecialize</code> on a <code>Pair</code> (or a <code>Tuple</code>, does not matter) and Julia normally allows you to unpack the pair directly in the function definition:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Pair</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">...</span>\n</code></pre></div>\n<p>However, I would like to <code>@nospecialize</code> the <code>Pair</code> but </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"nd\">@nospecialize</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Pair</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">...</span>\n</code></pre></div>\n<p>does not seem to be valid syntax, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(a, b)\"</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">around</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Any idea if it's expected behaviour?</p>",
        "id": 400701683,
        "sender_full_name": "Théo Galy-Fajou",
        "timestamp": 1699350262
    },
    {
        "content": "<p>interesting, it's probably jsut that the implementation of <code>@nospecialize</code> was never updated when we added argument destructuring</p>",
        "id": 400706127,
        "sender_full_name": "Mason Protter",
        "timestamp": 1699351422
    },
    {
        "content": "<p>I'd open an issue, that's not expected behaviour</p>",
        "id": 400706164,
        "sender_full_name": "Mason Protter",
        "timestamp": 1699351433
    },
    {
        "content": "<p>Cool thanks I will open one.</p>",
        "id": 400708677,
        "sender_full_name": "Théo Galy-Fajou",
        "timestamp": 1699352303
    },
    {
        "content": "<p><a href=\"https://github.com/JuliaLang/julia/issues/52060\">https://github.com/JuliaLang/julia/issues/52060</a></p>",
        "id": 400708957,
        "sender_full_name": "Théo Galy-Fajou",
        "timestamp": 1699352412
    },
    {
        "content": "<p>This half reminds me of <a href=\"https://github.com/JuliaLang/julia/issues/49914\">https://github.com/JuliaLang/julia/issues/49914</a></p>",
        "id": 400719642,
        "sender_full_name": "Timothy",
        "timestamp": 1699356303
    }
]