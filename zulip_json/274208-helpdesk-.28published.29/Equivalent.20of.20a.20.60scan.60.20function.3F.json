[
    {
        "content": "<p>Copied from Slack and hoping for some more expert opinions here :)</p>\n<p>Do we have an equivalent to <a href=\"https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.scan.html\">https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.scan.html</a>? <code>accumulate</code> is the closest stdlib I know of, but it doesn't allow for carrying of non-output intermediate states. <a href=\"https://juliafolds.github.io/Transducers.jl/dev/reference/manual/#Transducers.ScanEmit\">https://juliafolds.github.io/Transducers.jl/dev/reference/manual/#Transducers.ScanEmit</a> was the best example I could find in the broader ecosystem, but I'm not sure if there's a way to extract uₙ from it.</p>",
        "id": 284237838,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653756890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"278065\">@Brian Chen</span> yeah, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>u</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">u_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> should be available at least depending on what you're planning to do with them</p>",
        "id": 284246550,
        "sender_full_name": "Mason Protter",
        "timestamp": 1653768932
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ScanEmit</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"nd\">@show</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"w\"></span>\n<span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 284246702,
        "sender_full_name": "Mason Protter",
        "timestamp": 1653769172
    },
    {
        "content": "<p>The jax readme was not very enlightening to me, maybe you could give a julian pseudoexample of what you want?</p>",
        "id": 284246814,
        "sender_full_name": "Mason Protter",
        "timestamp": 1653769327
    },
    {
        "content": "<p>It's available but not returned, unfortunately. For comparison JAX's scan would return <code>(-3, [2, 3, 4])</code>.</p>",
        "id": 284247220,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653770013
    },
    {
        "content": "<p>I could try a local var, but closure boxing makes that difficult. A Ref or other mutable struct is a no-go to because Zygote</p>",
        "id": 284247268,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653770087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Equivalent.20of.20a.20.60scan.60.20function.3F/near/284246814\">said</a>:</p>\n<blockquote>\n<p>maybe you could give a julian pseudoexample of what you want?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">ys</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 284247405,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653770287
    },
    {
        "content": "<p>This is the minimal version. JAX does a bunch of extra stuff with dim handling and SoA inputs, but all I want for Flux/Lux is <code>new_rnn_state, output_seq = scan(rnn_forward, rnn_state, input_seq)</code>.</p>",
        "id": 284247586,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653770641
    },
    {
        "content": "<p>Hm, maybe the <code>onlast</code> option can do that?</p>",
        "id": 284251856,
        "sender_full_name": "Mason Protter",
        "timestamp": 1653777469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297129\">@Takafumi Arakaki (tkf)</span> any ideas?</p>",
        "id": 284259553,
        "sender_full_name": "Mason Protter",
        "timestamp": 1653790465
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">rf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ScanEmit</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"nd\">@show</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"n\">push!!</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Completing</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"p\">[])</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">foldl_nocomplete</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c\"># (u, ys)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\"></span>\n</code></pre></div>\n<p>although <code>Transducers.foldl_nocomplete</code> is not documented</p>\n<p>Edit: s/append!!/push!!/</p>",
        "id": 284262923,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1653795969
    },
    {
        "content": "<p>That works! Now I need to figure out how to make it Zygote-friendly...</p>",
        "id": 284263940,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653797661
    },
    {
        "content": "<p>I'd guess that this is not very Zygote friendly, unfortunately...  As this is a very generic concept, why not actually write it by hand and also define the chain rule (i.e., make it effectively a \"builtin\")?</p>\n<p>(The foldl part can be optimized by <a href=\"https://github.com/JuliaFolds/FoldsChainRules.jl\">https://github.com/JuliaFolds/FoldsChainRules.jl</a> but we still have <code>push!!</code>)</p>",
        "id": 284265268,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1653800105
    },
    {
        "content": "<p>Was thinking of how to write one :) a function like <code>push!!</code> would make the rule itself trivial (well, trivial for <code>Vector</code>s at least), but nested differentiation makes my head hurt</p>",
        "id": 284265385,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653800257
    },
    {
        "content": "<p>Any chance you think for something like this to be in Base?</p>",
        "id": 284265387,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653800272
    },
    {
        "content": "<p>One advantage jax has is that they enforce inputs/outputs to be scalar numbers, arrays or structures of arrays. That allows for tricks like pre-allocating an output buffer for scanning over the first dimension of a multi-dimensional array.</p>",
        "id": 284265596,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653800512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278065\">Brian Chen</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Equivalent.20of.20a.20.60scan.60.20function.3F/near/284265596\">said</a>:</p>\n<blockquote>\n<p>One advantage jax has is that they enforce inputs/outputs to be scalar numbers, arrays or structures of arrays.</p>\n</blockquote>\n<p>Yes, I agree it is an advantage for the compiler/library authors. But it sounds like a flip side of a disadvantage (= limit the kind of program written easily) on the user side to me. In Julia, I think it'd be more natural to let the users express the constraints (output is an array, output shape is known, output element type, etc.) through an API function call. I think it'd be some extension of the \"into\" PR I opened in <code>julia</code>.</p>",
        "id": 284276589,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1653817922
    },
    {
        "content": "<p>I agree 100%, but the perfect is also kind of the enemy of the good here. Given very limited time as a library author, I'm more likely to leave the status quo of bad performance than to try rolling my own little subsystem for this.</p>",
        "id": 284287303,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653832378
    },
    {
        "content": "<p>Also double-checked that I am indeed subscribed to that into PR <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 284289799,
        "sender_full_name": "Brian Chen",
        "timestamp": 1653835951
    }
]