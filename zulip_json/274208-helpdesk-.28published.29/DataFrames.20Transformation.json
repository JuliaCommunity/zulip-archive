[
    {
        "content": "<p><span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> but there is no iloc or iat function in DataFrames...</p>",
        "id": 226542994,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1613495156
    },
    {
        "content": "<p>Hmmm.,.</p>\n<p>Can you start from the beginning and explain what you have and what you are trying to achieve?</p>\n<p>May be small example of the csv file that you are trying to parse? How should result look like after all transformations? Is usage of Pandas is mandatory or it is ok to use only vanilla DataFrames?</p>",
        "id": 226543516,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1613495350
    },
    {
        "content": "<p>I'm not at all sure what you are trying to do here, but it sounds to me a bit like you are looking for <a href=\"https://github.com/JuliaData/IndexedTables.jl\">IndexedTables.jl</a>.  DataFrames are essentially a named tuples of like sized vectors, column values and indices are deliberately kept separate, although the library does have <code>stack</code> and <code>unstack</code> functions</p>",
        "id": 226545156,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613495960
    },
    {
        "content": "<p>You may also want to read <a href=\"https://dataframes.juliadata.org/stable/man/reshaping_and_pivoting/\">here</a></p>",
        "id": 226545405,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613496052
    },
    {
        "content": "<p>well, so does dataframes, so I think the first thing you should do is read the above documentation section.  However, if using column values as indices is something you want to do very often, then yes, <a href=\"https://github.com/search?q=IndexedTables.jl&amp;type=Repositories\">IndexedTables.jl</a> may be a better choice.</p>",
        "id": 226545500,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613496094
    },
    {
        "content": "<p>only if the thing you want to stack or unstack is an ID column</p>",
        "id": 226547956,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613497139
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226548913,
        "sender_full_name": "QuBit",
        "timestamp": 1613497521
    },
    {
        "content": "<p>Is this what you're trying to do?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">Time1</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">Second</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"p\">],</span>\n               <span class=\"n\">Time2</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">Hour</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"p\">],</span>\n               <span class=\"n\">Time3</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">Day</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">∈</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n              <span class=\"p\">)</span>\n\n<span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">:</span><span class=\"n\">Time1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">Time2</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">Time3</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>which gives</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"mi\">15</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">variable</span>  <span class=\"n\">value</span>\n     <span class=\"n\">│</span> <span class=\"n\">String</span>    <span class=\"kt\">DateTime</span>\n<span class=\"n\">─────┼───────────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">57.435</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">58.435</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">59.435</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span><span class=\"mf\">00.435</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span><span class=\"mf\">01.435</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span> <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.458</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span> <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T14</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.458</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span> <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T15</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.458</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span> <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T16</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.458</span>\n  <span class=\"mi\">10</span> <span class=\"n\">│</span> <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T17</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.458</span>\n  <span class=\"mi\">11</span> <span class=\"n\">│</span> <span class=\"n\">Time3</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">17</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.483</span>\n  <span class=\"mi\">12</span> <span class=\"n\">│</span> <span class=\"n\">Time3</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">18</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.483</span>\n  <span class=\"mi\">13</span> <span class=\"n\">│</span> <span class=\"n\">Time3</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.483</span>\n  <span class=\"mi\">14</span> <span class=\"n\">│</span> <span class=\"n\">Time3</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.483</span>\n  <span class=\"mi\">15</span> <span class=\"n\">│</span> <span class=\"n\">Time3</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">21</span><span class=\"n\">T12</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mf\">56.483</span>\n</code></pre></div>",
        "id": 226549787,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613497895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269446\">Expanding Man</span> <br>\nSorry for the confusion. I was listing Time1 and Time2 as labels. I was not <br>\nattempting to have them represent timestamps, but this is useful in other<br>\ncases for sure.</p>",
        "id": 226551846,
        "sender_full_name": "QuBit",
        "timestamp": 1613498755
    },
    {
        "content": "<p>Regardless, was a complete stacking aggregation what you were trying to do?  Otherwise you can leave some columns unstacked as an extra column, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">:</span><span class=\"n\">Time1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">Time2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">:</span><span class=\"n\">Time3</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>which gives</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"mi\">10</span><span class=\"n\">×3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">Time3</span>                    <span class=\"n\">variable</span>  <span class=\"n\">value</span>\n     <span class=\"n\">│</span> <span class=\"kt\">DateTime</span>                 <span class=\"n\">String</span>    <span class=\"kt\">DateTime</span>\n<span class=\"n\">─────┼────────────────────────────────────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">17</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">04.561</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">18</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">05.561</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">06.561</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">07.561</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">21</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time1</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">08.561</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">17</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T14</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.585</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">18</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T15</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.585</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T16</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.585</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T17</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.585</span>\n  <span class=\"mi\">10</span> <span class=\"n\">│</span> <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">21</span><span class=\"n\">T13</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.609</span>  <span class=\"n\">Time2</span>     <span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"n\">T18</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"o\">:</span><span class=\"mf\">03.585</span>\n</code></pre></div>\n<p>That just about covers the <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> stacking functionality.  If that doesn't cover your use case, than I'm afraid I just don't know what you mean by stacking.</p>\n<p>As for <a href=\"https://github.com/search?q=IndexedTables.jl&amp;type=Repositories\">IndexedTables.jl</a>, this doesn't offer any benefit in terms of stacking, but on the other hand, <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> is really not designed to be indexed by value, so, if for example you wanted to index the above by <code>:Time3</code> value, <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> doesn't really give you any nice ways of doing that, though you can of course just do <code>Dict(df.Time3 .=&gt; 1:size(df,1))</code> to create a lookup table (at least in teh case of unique keys).  <a href=\"https://github.com/search?q=IndexedTables.jl&amp;type=Repositories\">IndexedTables.jl</a> on the other hand is designed with this type of indexing in mind.  <a href=\"https://github.com/search?q=IndexedTables.jl&amp;type=Repositories\">IndexedTables.jl</a> doesn't see nearly as much development or use as <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a>, so you probably want to stick with DataFrames, but again, if what you're really interested in is indexing it may not be the best choice.</p>",
        "id": 226552581,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613499100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269446\">Expanding Man</span> <br>\nAs for <a href=\"https://github.com/search?q=IndexedTables.jl&amp;type=Repositories\">IndexedTables.jl</a>, this doesn't offer any benefit in terms of stacking, but on the other hand, <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> is really not designed to be indexed by value, so, if for example you wanted to index the above by <code>:Time3</code> value, <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> doesn't really give you any nice ways of doing that, though you can of course just do <code>Dict(df.Time3 .=&gt; 1:size(df,1))</code> to create a lookup table (at least in the case of unique keys).  <a href=\"https://github.com/search?q=IndexedTables.jl&amp;type=Repositories\">IndexedTables.jl</a> on the other hand is designed with this type of indexing in mind.  <a href=\"https://github.com/search?q=IndexedTables.jl&amp;type=Repositories\">IndexedTables.jl</a> doesn't see nearly as much development or use as <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a>, so you probably want to stick with DataFrames, but again, if what you're really interested in is indexing it may not be the best choice.</p>\n<p>I appreciate this. I will experiment a little more with the stack method. I also know of a LAJuliaUtils unregistered library that has an explicit 'pivot' function that could perhaps help me simply flip columns for row values. I had trouble implementing it before however.</p>",
        "id": 226553013,
        "sender_full_name": "QuBit",
        "timestamp": 1613499284
    },
    {
        "content": "<p>One way or another, <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> should cover all of the standard relational database operations such as stacking and pivots.  As a rule of thumb, you probably want to use <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> for all tables <em>except</em></p>\n<ul>\n<li>If you are mostly interested in looking up rows by value (e.g. the use cases of <a href=\"https://github.com/search?q=IndexedTables.jl&amp;type=Repositories\">IndexedTables.jl</a>)</li>\n<li>If good row-wise performance is crucial.  That is, <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> is very inefficient at iterating over a DataFrame by row, because it does not hold any type information.  Usually it is quite easy to replace row-wise operations with column-wise operations, so the situations in which this is prohibitive are likely few, but it can happen.</li>\n<li>You  need huge distributed tables.  Unfortunately, I don't think there's any mature, well-maintained package in the ecosystem for this right now.</li>\n</ul>",
        "id": 226553875,
        "sender_full_name": "Expanding Man",
        "timestamp": 1613499551
    },
    {
        "content": "<p>Thank you for providing this explanation. </p>\n<p>The original transformation method I provided was <br>\nable to switch the header and row 1 positions.  However, <br>\nthe issue is that the entire dataframe is shifted down one<br>\nunit. If there was a way to configure the code so that the <br>\ntransformed R1 values were the headers and the rest of <br>\nthe dataframe was shifted up one unit it would be the pivot<br>\nI was attempting to create.</p>",
        "id": 226556119,
        "sender_full_name": "QuBit",
        "timestamp": 1613500521
    },
    {
        "content": "<p>It would be slightly easier if you can give example of the dataframe or at least part of csv file.</p>\n<p>So, I am unsure, whether it is the structure that you have, but maybe you want something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">col</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"s\">\"S1\"</span><span class=\"p\">,</span> <span class=\"s\">\"S2\"</span><span class=\"p\">,</span> <span class=\"s\">\"S3\"</span><span class=\"p\">],</span> <span class=\"o\">:</span><span class=\"n\">T1</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"o\">:</span><span class=\"n\">T2</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"o\">:</span><span class=\"n\">T3</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span>\n <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"mi\">3</span><span class=\"n\">×4</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">col</span>     <span class=\"n\">T1</span>     <span class=\"n\">T2</span>     <span class=\"n\">T3</span>\n     <span class=\"n\">│</span> <span class=\"n\">String</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Int64</span>\n<span class=\"n\">─────┼─────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">S1</span>          <span class=\"mi\">1</span>      <span class=\"mi\">4</span>      <span class=\"mi\">7</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">S2</span>          <span class=\"mi\">2</span>      <span class=\"mi\">5</span>      <span class=\"mi\">8</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">S3</span>          <span class=\"mi\">3</span>      <span class=\"mi\">6</span>      <span class=\"mi\">9</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">unstack</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"n\">×4</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">variable</span>  <span class=\"n\">S1</span>      <span class=\"n\">S2</span>      <span class=\"n\">S3</span>\n     <span class=\"n\">│</span> <span class=\"n\">String</span>    <span class=\"kt\">Int64</span><span class=\"o\">?</span>  <span class=\"kt\">Int64</span><span class=\"o\">?</span>  <span class=\"kt\">Int64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼──────────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">T1</span>             <span class=\"mi\">1</span>       <span class=\"mi\">2</span>       <span class=\"mi\">3</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">T2</span>             <span class=\"mi\">4</span>       <span class=\"mi\">5</span>       <span class=\"mi\">6</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">T3</span>             <span class=\"mi\">7</span>       <span class=\"mi\">8</span>       <span class=\"mi\">9</span>\n</code></pre></div>",
        "id": 226559423,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1613502050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269446\">Expanding Man</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrames.20Transformation/near/226547956\">said</a>:</p>\n<blockquote>\n<p>only if the thing you want to stack or unstack is an ID column</p>\n</blockquote>\n<p>A fellow colleague suggested, I use CSV.read(.... transpose=true); this solved the problem.</p>",
        "id": 226581371,
        "sender_full_name": "QuBit",
        "timestamp": 1613511861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272771\">Andrey Oskin</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/DataFrames.20Transformation/near/226559423\">said</a>:</p>\n<blockquote>\n<p>It would be slightly easier if you can give example of the dataframe or at least part of csv file.</p>\n<p>So, I am unsure, whether it is the structure that you have, but maybe you want something like this?</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">col</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"s\">\"S1\"</span><span class=\"p\">,</span> <span class=\"s\">\"S2\"</span><span class=\"p\">,</span> <span class=\"s\">\"S3\"</span><span class=\"p\">],</span> <span class=\"o\">:</span><span class=\"n\">T1</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"o\">:</span><span class=\"n\">T2</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"o\">:</span><span class=\"n\">T3</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span>\n <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"mi\">3</span><span class=\"n\">×4</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">col</span>     <span class=\"n\">T1</span>     <span class=\"n\">T2</span>     <span class=\"n\">T3</span>\n     <span class=\"n\">│</span> <span class=\"n\">String</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Int64</span>\n<span class=\"n\">─────┼─────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">S1</span>          <span class=\"mi\">1</span>      <span class=\"mi\">4</span>      <span class=\"mi\">7</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">S2</span>          <span class=\"mi\">2</span>      <span class=\"mi\">5</span>      <span class=\"mi\">8</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">S3</span>          <span class=\"mi\">3</span>      <span class=\"mi\">6</span>      <span class=\"mi\">9</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">unstack</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"n\">×4</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">variable</span>  <span class=\"n\">S1</span>      <span class=\"n\">S2</span>      <span class=\"n\">S3</span>\n     <span class=\"n\">│</span> <span class=\"n\">String</span>    <span class=\"kt\">Int64</span><span class=\"o\">?</span>  <span class=\"kt\">Int64</span><span class=\"o\">?</span>  <span class=\"kt\">Int64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼──────────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">T1</span>             <span class=\"mi\">1</span>       <span class=\"mi\">2</span>       <span class=\"mi\">3</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">T2</span>             <span class=\"mi\">4</span>       <span class=\"mi\">5</span>       <span class=\"mi\">6</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">T3</span>             <span class=\"mi\">7</span>       <span class=\"mi\">8</span>       <span class=\"mi\">9</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hi Andrey, Thank you for your explanation here. A colleague mentioned that I should use CSV.read() method setting the '<br>\ntranspose' parameter to 'true'</p>",
        "id": 226581497,
        "sender_full_name": "QuBit",
        "timestamp": 1613511939
    },
    {
        "content": "<p>So that's what you want, a transpose :D</p>",
        "id": 226778760,
        "sender_full_name": "Florian Große",
        "timestamp": 1613637174
    },
    {
        "content": "<p>Didn't came through clearly I suppose</p>",
        "id": 226778805,
        "sender_full_name": "Florian Große",
        "timestamp": 1613637196
    }
]