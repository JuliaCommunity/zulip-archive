[
    {
        "content": "<p>I have asked this before but got no response, so now I'm trying again with a slightly different formulation:</p>\n<p>Is there some goto package for concatenating arrays without creating a new array (or modifying one of the arrays to concatenate)? </p>\n<p>Use case is to avoid that things like <a href=\"https://github.com/search?q=FillArrays.jl&amp;type=Repositories\">FillArrays.jl</a> and Arrow columns end up as an <code>Array</code> when concatenated. I know this is not exactly what one might call lazy concatenation, but I couldn't come up with a short name for it.</p>\n<p><a href=\"https://github.com/search?q=ComponentArrays.jl&amp;type=Repositories\">ComponentArrays.jl</a> seems to do this, but it also seems to do other  things (e.g. index components by name) so maybe there is something more tailor made.</p>",
        "id": 364829315,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1686311720
    },
    {
        "content": "<p>Do you need the full array interface or just iteration? <code>Base.Iterators.flatten</code> gets you the iteration interface but not the array interface.</p>",
        "id": 364856933,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1686317326
    },
    {
        "content": "<p>If you do need the array interface, I'm pretty sure that <a href=\"https://github.com/search?q=Lazy.jl&amp;type=Repositories\">Lazy.jl</a>'s lists satisfy at least most of it, so you're looking for <code>Lazy.flatten</code>.</p>",
        "id": 364857747,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1686317502
    },
    {
        "content": "<p>Nevermind. I forgot that Lazy's functions all assume that you're working with lists rather than letting you bring your own type.</p>",
        "id": 364859108,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1686317763
    },
    {
        "content": "<p>Found it. You're looking for <a href=\"https://docs.sciml.ai/RecursiveArrayTools/stable/array_types/#RecursiveArrayTools.ArrayPartition\">RecursiveArrayTools.ArrayPartition</a>.</p>",
        "id": 364863463,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1686318665
    },
    {
        "content": "<p>While not strictly what you are looking for, transducers might help for transformation pipelines where you don't want to allocate intermediates.</p>",
        "id": 364891661,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686324266
    },
    {
        "content": "<p>Thanks!</p>\n<p>Unfortunately I forgot to state that I want it to be an indexable <code>AbstractArray</code> or whatever the requirements are for having it as columns in a <code>DataFrame</code>.</p>",
        "id": 364896125,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1686325158
    },
    {
        "content": "<p>RecursiveArrayTools looks like it could work though at first glance.</p>",
        "id": 364896464,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1686325239
    }
]