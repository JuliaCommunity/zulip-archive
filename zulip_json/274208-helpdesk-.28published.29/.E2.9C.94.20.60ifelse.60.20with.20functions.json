[
    {
        "content": "<p>I think I'm missing something obvious. This works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n       <span class=\"n\">a</span> <span class=\"o\">||</span> <span class=\"k\">return</span> <span class=\"n\">ifelse</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s\">\"ft\"</span><span class=\"p\">,</span> <span class=\"s\">\"ff\"</span><span class=\"p\">)</span>\n       <span class=\"n\">b</span> <span class=\"o\">||</span> <span class=\"k\">return</span> <span class=\"s\">\"tf\"</span>\n       <span class=\"k\">return</span> <span class=\"s\">\"tt\"</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">f</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">)</span>\n       <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">)</span>\n           <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">)</span>\n               <span class=\"n\">println</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">))</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">check</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"tt\"</span>\n<span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"tf\"</span>\n<span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"ft\"</span>\n<span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"ff\"</span>\n</code></pre></div>\n<p>But I'd expect this to also work:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n       <span class=\"n\">ifelse</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"k\">return</span> <span class=\"n\">ifelse</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s\">\"ft\"</span><span class=\"p\">,</span> <span class=\"s\">\"ff\"</span><span class=\"p\">))()</span>\n       <span class=\"n\">ifelse</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"k\">return</span> <span class=\"s\">\"tf\"</span><span class=\"p\">)()</span>\n       <span class=\"k\">return</span> <span class=\"s\">\"tt\"</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">g</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"tt\"</span>\n<span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"tt\"</span>\n<span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"tt\"</span>\n<span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s\">\"tt\"</span>\n</code></pre></div>\n<p>The idea for <code>g</code> is to have a way to make <code>ifelse</code> lazy, so it could work with <code>StaticBool</code>s as well as <code>Bool</code>s. What am I missing?</p>",
        "id": 278850585,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1649866267
    },
    {
        "content": "<p>As a side note, I'm moving away from using <code>StaticBool</code> as an optimization and toward only using this when I need it for dispatch. But I do need it temporarily to for short-term backward compatibility</p>",
        "id": 278851837,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1649866749
    },
    {
        "content": "<p>Surely the <code>return x</code> statements are inside the lambda functions you have created, so the first two lines don't return from the main <code>g()</code> function?</p>",
        "id": 278852189,
        "sender_full_name": "Richard Reeve",
        "timestamp": 1649866895
    },
    {
        "content": "<p>...Are they not? It looks to me like they're inside the lambdas. Anyway, I'm having the opposite problem - <code>g</code> always returns <code>tt</code>, which must mean both <code>ifelse</code> lines reduce to <code>nothing</code></p>",
        "id": 278852513,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1649867029
    },
    {
        "content": "<p>If <code>a</code> is <code>false</code>, I'd think</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ifelse</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"k\">return</span> <span class=\"n\">ifelse</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s\">\"ft\"</span><span class=\"p\">,</span> <span class=\"s\">\"ff\"</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"k\">return</span> <span class=\"n\">ifelse</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s\">\"ft\"</span><span class=\"p\">,</span> <span class=\"s\">\"ff\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>So applying this (the <code>()</code> at the end) should.... </p>\n<p>Oh wait, I think I get it, it's interpreting the <code>return</code> as part of the anonymous function, instead of as part of <code>g</code></p>",
        "id": 278853275,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1649867356
    },
    {
        "content": "<p>That threw me, since I never use <code>return</code> to just return a value from an anonymous function</p>",
        "id": 278853470,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1649867432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286004\">Chad Scherrer</span> has marked this topic as resolved.</p>",
        "id": 278853563,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649867483
    },
    {
        "content": "<p>The secret is to just never use <code>return</code>. It’s just a less useful <code>goto</code>.</p>",
        "id": 278858016,
        "sender_full_name": "Mason Protter",
        "timestamp": 1649869323
    },
    {
        "content": "<p>That's worked well for me in some cases, but here I want to short-circuit most of the code. Would you use a <code>@goto</code> for this?</p>",
        "id": 278859994,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1649870148
    },
    {
        "content": "<p>I’d just not use <code>ifelse</code> at all and instead write <code>if x == true</code> and then make it so that <code>True() == true</code></p>",
        "id": 278861167,
        "sender_full_name": "Mason Protter",
        "timestamp": 1649870671
    },
    {
        "content": "<p>Nice, I hadn't thought of that</p>",
        "id": 278861255,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1649870719
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Static</span><span class=\"o\">.</span><span class=\"n\">True</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"nb\">true</span>\n<span class=\"nb\">true</span>\n</code></pre></div>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 278886479,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1649882083
    },
    {
        "content": "<p>Another option would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">istrue</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">True</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n<span class=\"n\">istrue</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">False</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n<span class=\"n\">istrue</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">istrue</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"c\"># ...</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>if you prefer how that looks</p>",
        "id": 278887540,
        "sender_full_name": "Mason Protter",
        "timestamp": 1649882607
    },
    {
        "content": "<p>You can also make anything you feel like 'truthy' in this way. E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">istrue</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Integer</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"kt\">Bool</span>\n<span class=\"n\">istrue</span><span class=\"p\">(</span> <span class=\"o\">::</span><span class=\"kt\">Missing</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n</code></pre></div>",
        "id": 278887678,
        "sender_full_name": "Mason Protter",
        "timestamp": 1649882658
    }
]