[
    {
        "content": "<p>I have a multi-threaded loop running some simulations each iteration. I'd like to be able to save the results intermediately, something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Threads</span>\n<span class=\"k\">using</span> <span class=\"n\">JLD2</span>\n\n<span class=\"nd\">@Threads</span><span class=\"o\">.</span><span class=\"n\">threads</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span>\n    <span class=\"n\">simulation_data</span> <span class=\"o\">=</span> <span class=\"n\">run_simulation</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"c\"># something blocking here, a mutex or atomic block??</span>\n    <span class=\"n\">jldopen</span><span class=\"p\">(</span><span class=\"s\">\"output.jld2\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">)</span>  <span class=\"k\">do</span> <span class=\"n\">f</span>\n        <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"s\">\"hdf/path/to/data/</span><span class=\"si\">$i</span><span class=\"s\">\"</span><span class=\"p\">,</span>  <span class=\"n\">simulation_data</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Is something like this possible? I couldn't find anything other than atomic operations on numeric types in the docs.<br>\nIn my particular application, it's not too bad to wait until after the loop and do all the IO single-threaded, but I thought I'd ask anyway.</p>",
        "id": 254755366,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1632510101
    },
    {
        "content": "<p>yes, you'd need to hold a lock around that bit of IO code</p>",
        "id": 254766944,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1632514996
    }
]