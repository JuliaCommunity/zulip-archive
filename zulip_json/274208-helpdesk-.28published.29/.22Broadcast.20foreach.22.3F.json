[
    {
        "content": "<p>Is there an established pattern to \"broadcast\" a function, but without allocation of output? Just for the sake of side-effects. I.e., <code>map</code> is to <code>broadcast</code> as <code>foreach</code> is to what?</p>\n<p>I came up with this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">broadcast_foreach</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span>\n           <span class=\"n\">bc</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">broadcasted</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span>\n           <span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"n\">bc</span><span class=\"p\">)</span>\n           <span class=\"k\">return</span> <span class=\"nb\">nothing</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">broadcast_foreach</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"kt\">Any</span><span class=\"p\">[]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">broadcast_foreach</span><span class=\"p\">((</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"p\">),</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">xs</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"kt\">Any</span><span class=\"p\">[]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">broadcast_foreach</span><span class=\"p\">((</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"p\">),</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">xs</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>but not knowing as much about broadcasting machinery as I'd like to, there might be something existing I am overlooking.</p>",
        "id": 262235042,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1637492809
    },
    {
        "content": "<p>One approach you could take is making a struct <code>Null</code> such that writing data to it just throws away the data. Then you could do something like<br>\n<code>Null() .= f.(x)</code> and broadcast Fusion should take care of everything.</p>",
        "id": 262254718,
        "sender_full_name": "Mason Protter",
        "timestamp": 1637521041
    },
    {
        "content": "<p>I was thinking about that, too, but didn't know how to proceed.  Some issues with broadcast style (I guess?):</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"kt\">Null</span> <span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">copyto!</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Null</span><span class=\"p\">,</span> <span class=\"n\">bc</span><span class=\"o\">::</span><span class=\"kt\">Broadcast</span><span class=\"o\">.</span><span class=\"kt\">Broadcasted</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">})</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"n\">bc</span><span class=\"p\">);</span> <span class=\"n\">Null</span><span class=\"p\">())</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"p\">)</span>\n<span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"kt\">Any</span><span class=\"p\">[]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Null</span><span class=\"p\">()</span> <span class=\"o\">.=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">ndims</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">Null</span><span class=\"p\">})</span>\n<span class=\"o\">...</span>\n</code></pre></div>",
        "id": 262319796,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1637588670
    },
    {
        "content": "<p>I think you want to catch it earlier:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Broadcast</span><span class=\"o\">.</span><span class=\"n\">materialize!</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"o\">::</span><span class=\"kt\">Null</span><span class=\"p\">,</span> <span class=\"n\">bc</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Broadcast</span><span class=\"o\">.</span><span class=\"n\">Broadcasted</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"n\">bc</span><span class=\"p\">);</span> <span class=\"n\">Null</span><span class=\"p\">())</span>\n</code></pre></div>",
        "id": 262359734,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1637606139
    },
    {
        "content": "<p>It is not quite as efficient as ordinary broadcasting. IIRC there were some such issues with <code>sum(::Broadcasted)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">);</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">sin</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span> <span class=\"o\">./</span> <span class=\"o\">$</span><span class=\"n\">y</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"n\">min</span> <span class=\"mf\">77.958</span> <span class=\"n\">μs</span><span class=\"p\">,</span> <span class=\"n\">mean</span> <span class=\"mf\">86.330</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"n\">allocations</span><span class=\"p\">,</span> <span class=\"mf\">78.17</span> <span class=\"n\">KiB</span><span class=\"o\">.</span> <span class=\"n\">GC</span> <span class=\"n\">mean</span> <span class=\"mf\">2.82</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"nb\">nothing</span> <span class=\"o\">.=</span> <span class=\"n\">sin</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span> <span class=\"o\">./</span> <span class=\"o\">$</span><span class=\"n\">y</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"n\">min</span> <span class=\"mf\">150.667</span> <span class=\"n\">μs</span><span class=\"p\">,</span> <span class=\"n\">mean</span> <span class=\"mf\">154.272</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"n\">allocations</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 262360772,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1637606652
    },
    {
        "content": "<p>Hm. I would have thought that <code>Broadcast.instantiate(bc)</code> would have fixed it but it didn't</p>",
        "id": 262499866,
        "sender_full_name": "Mason Protter",
        "timestamp": 1637694496
    }
]