[
    {
        "content": "<p>Is there a simple way to create a struct with fields, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Test</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n    <span class=\"n\">dt</span>\n    <span class=\"n\">v</span>\n    <span class=\"n\">z</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n        <span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">,</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"kt\">Test</span><span class=\"p\">{</span><span class=\"kt\">eltype</span><span class=\"p\">(</span><span class=\"kt\">dt</span><span class=\"p\">)}(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>And then use these fields in a downstream function without allocating arrays? e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span> <span class=\"n\">tfm</span><span class=\"o\">::</span><span class=\"kt\">Test</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n    <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">tfm</span><span class=\"o\">.</span><span class=\"n\">dt</span>\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">tfm</span><span class=\"o\">.</span><span class=\"n\">v</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">tfm</span><span class=\"o\">.</span><span class=\"n\">z</span>\n        <span class=\"o\">...</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>My original function which didn't utilize any custom types doesn't allocate anything but when trying to use my <code>Test</code> type I can't figure out how to avoid allocations</p>",
        "id": 247777359,
        "sender_full_name": "Dale Black",
        "timestamp": 1627693535
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">tfm</span> <span class=\"o\">=</span> <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"nd\">@benchmark</span> <span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">tfm</span><span class=\"p\">)</span>\n\n<span class=\"c\"># returns</span>\n<span class=\"n\">Memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mi\">224</span> <span class=\"n\">bytes</span><span class=\"p\">,</span> <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">14.</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@benchmark</span> <span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">z</span><span class=\"p\">)</span>\n\n<span class=\"c\"># returns</span>\n<span class=\"n\">Memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span><span class=\"p\">,</span> <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">0.</span>\n</code></pre></div>",
        "id": 247777460,
        "sender_full_name": "Dale Black",
        "timestamp": 1627693701
    },
    {
        "content": "<p><a href=\"https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-fields-with-abstract-type\">https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-fields-with-abstract-type</a></p>",
        "id": 247786305,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1627707851
    },
    {
        "content": "<p>Thank you! That is useful but I don't think it solved my problem of allocating arrays. Any idea how I might pre-allocate the arrays in the <code>Test</code> function</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Test</span><span class=\"p\">{</span><span class=\"kt\">T</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">}</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">DistanceTransform</span>\n    <span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n    <span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n    <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n        <span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">,</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"kt\">Test</span><span class=\"p\">{</span><span class=\"kt\">AbstractArray</span><span class=\"p\">}(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>In order to avoid allocations in the <code>transform</code> operation?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span> <span class=\"n\">tfm</span><span class=\"o\">::</span><span class=\"kt\">Test</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n    <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">tfm</span><span class=\"o\">.</span><span class=\"n\">dt</span>\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">tfm</span><span class=\"o\">.</span><span class=\"n\">v</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">tfm</span><span class=\"o\">.</span><span class=\"n\">z</span>\n        <span class=\"o\">...</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 247817868,
        "sender_full_name": "Dale Black",
        "timestamp": 1627755820
    },
    {
        "content": "<p>Do you mean that you want to keep reusing the same existing arrays in the Test constructor instead of allocating new arrays for every instance of Test?</p>",
        "id": 247818388,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1627756523
    },
    {
        "content": "<p>I think so..</p>",
        "id": 247818459,
        "sender_full_name": "Dale Black",
        "timestamp": 1627756607
    },
    {
        "content": "<p>I don't really understand types yet so I might be confused, but yes I think that is what I want</p>",
        "id": 247818479,
        "sender_full_name": "Dale Black",
        "timestamp": 1627756639
    },
    {
        "content": "<p>Hmm, I don't mean to be rude, but I suggest not doing optimizations until you know you have a problem. E.g. if you re-use the same arrays for different Test objects, you could run into some annoying bugs if the arrays are modified and you forget different Test objects share the same arrays</p>",
        "id": 247818544,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1627756735
    },
    {
        "content": "<p>But you said the transform function allocated. The part of the function you posted should not allocate, so if that function has a problem, it must be in the omitted part</p>",
        "id": 247818558,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1627756780
    },
    {
        "content": "<p>That makes sense. I am attempting this in order to learn Julia better. It might also add some convenience in the future, but it might be too much of a headache.</p>\n<p>The basic function that I am attempting to recreate is non-allocating like so:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">))</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">))</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">function</span> <span class=\"n\">squared_euclidean_distance_transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"nb\">Inf32</span>\n    <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">Inf32</span>\n\n    <span class=\"c\"># Lower envelope operation</span>\n    <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"k\">in</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span>\n        <span class=\"k\">while</span> <span class=\"nb\">true</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">q</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">≤</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n                <span class=\"n\">k</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">q</span>\n                <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n                <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">Inf32</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c\"># Distance transform operation</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span>\n        <span class=\"k\">while</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">q</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">dt</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">q</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]]</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">dt</span>\n<span class=\"k\">end</span>\n\n<span class=\"nd\">@benchmark</span> <span class=\"n\">squared_euclidean_distance_transform</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"n\">z</span><span class=\"p\">)</span>\n\n<span class=\"c\"># returns</span>\n<span class=\"n\">Memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span><span class=\"p\">,</span> <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">0.</span>\n</code></pre></div>",
        "id": 247818707,
        "sender_full_name": "Dale Black",
        "timestamp": 1627757008
    },
    {
        "content": "<p>Ahhh - the issue before was simply that the parameter of Test was AbstractArray - which means the fields were abstractly typed</p>",
        "id": 247819840,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1627758514
    },
    {
        "content": "<p>For the code to be efficient (and non-allocating), you need to be able to predict the type of each field only from the type of the Test object itself</p>",
        "id": 247819856,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1627758555
    },
    {
        "content": "<blockquote>\n<p>Thank you! That is useful but I don't think it solved my problem of allocating arrays</p>\n</blockquote>\n<p>Like Jakob mentioned, you want to do <code>Test{typeof(dt)}(dt, v, z)</code> instead of <code>Test{AbstractArray}(dt, v, z)</code>. Or even better just do <code>Test(dt, v, z)</code>.</p>",
        "id": 247820094,
        "sender_full_name": "Kyle Daruwalla",
        "timestamp": 1627758954
    },
    {
        "content": "<p>Does this work when you need each field to be a different type? I am getting some errors from both <code>Test{typeof(dt)}(dt, v, z)</code> and <code>Test(dt, v, z)</code></p>",
        "id": 247820637,
        "sender_full_name": "Dale Black",
        "timestamp": 1627759772
    },
    {
        "content": "<p>Probably that's because you defined all fields as having the same type.<br>\nYou should do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Test</span><span class=\"p\">{</span><span class=\"kt\">T1</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">,</span> <span class=\"kt\">T2</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">}</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">DistanceTransform</span>\n    <span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">T1</span>\n    <span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">T2</span>\n    <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">T1</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>and use <code>Test(dt, v, z)</code> form to initialize it, since compiler can infer types on its own.</p>",
        "id": 247821220,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1627760792
    },
    {
        "content": "<p>By the way, you can use <code>AbstractVector{T}</code> alias instead of <code>AbstractArray{T, 1}</code>. It's more straightforward.</p>",
        "id": 247821298,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1627760948
    },
    {
        "content": "<p>Thank you! One more thing, if I want to dispatch on the type of <code>f</code> how would I do that in the initialization function? The code below works, if I want to restrict <code>f::Vector{Int64}</code> or <code>img::Matrix{Int64}</code> but I run into errors when I try to allow more flexibility e.g. <code>f::Vector{Number}</code></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n        <span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n        <span class=\"n\">img</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 247822851,
        "sender_full_name": "Dale Black",
        "timestamp": 1627763510
    },
    {
        "content": "<p>What kind of errors and how more general definition looks like?</p>",
        "id": 247823116,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1627763966
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n        <span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">,</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n        <span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Number</span><span class=\"p\">},</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">tfm</span> <span class=\"o\">=</span> <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">tfm</span>\n<span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace134</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span>\n\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace134</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">T1</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">T2</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">T1</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T1</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractArray</span><span class=\"p\">,</span> <span class=\"kt\">T2</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractArray</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">daleblack</span><span class=\"o\">/</span><span class=\"n\">Google</span> <span class=\"n\">Drive</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">pluto</span> <span class=\"n\">notebooks</span><span class=\"o\">/</span><span class=\"n\">restructure_distance_transforms</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"cm\">#==#</span><span class=\"mi\">95897</span><span class=\"n\">bab</span><span class=\"o\">-</span><span class=\"mi\">7702</span><span class=\"o\">-</span><span class=\"mf\">48e7</span><span class=\"o\">-</span><span class=\"mf\">8e0</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"n\">b5c0c83d4d94</span><span class=\"o\">:</span><span class=\"mi\">3</span>\n\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace134</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Number</span><span class=\"p\">})</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">daleblack</span><span class=\"o\">/</span><span class=\"n\">Google</span> <span class=\"n\">Drive</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">pluto</span> <span class=\"n\">notebooks</span><span class=\"o\">/</span><span class=\"n\">restructure_distance_transforms</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"cm\">#==#</span><span class=\"mi\">95897</span><span class=\"n\">bab</span><span class=\"o\">-</span><span class=\"mi\">7702</span><span class=\"o\">-</span><span class=\"mf\">48e7</span><span class=\"o\">-</span><span class=\"mf\">8e0</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"n\">b5c0c83d4d94</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace134</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Number</span><span class=\"p\">},</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">daleblack</span><span class=\"o\">/</span><span class=\"n\">Google</span> <span class=\"n\">Drive</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">pluto</span> <span class=\"n\">notebooks</span><span class=\"o\">/</span><span class=\"n\">restructure_distance_transforms</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"cm\">#==#</span><span class=\"mi\">95897</span><span class=\"n\">bab</span><span class=\"o\">-</span><span class=\"mi\">7702</span><span class=\"o\">-</span><span class=\"mf\">48e7</span><span class=\"o\">-</span><span class=\"mf\">8e0</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"n\">b5c0c83d4d94</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span><span class=\"nd\">@Local</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>I'm using Pluto btw in case that matters</p>",
        "id": 247823514,
        "sender_full_name": "Dale Black",
        "timestamp": 1627764706
    },
    {
        "content": "<p>You hit a classical beginner mistake in Julia: Vector{Int} is not a subtype of Vector{Number}. That is, if A is a subtype of B, that does NOT mean that T{A} is a subtype of T{B}</p>",
        "id": 247824006,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1627765448
    },
    {
        "content": "<p>For that, you would need to write Vector{&lt;: Number}.</p>",
        "id": 247824017,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1627765501
    },
    {
        "content": "<p>Hmm there is still a problem </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Test</span><span class=\"p\">{</span><span class=\"kt\">T1</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">,</span> <span class=\"kt\">T2</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">}</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">DistanceTransform</span>\n    <span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">T1</span>\n    <span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">T2</span>\n    <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">T1</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n        <span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"o\">&lt;:</span> <span class=\"kt\">Real</span><span class=\"p\">},</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n        <span class=\"n\">img</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"o\">&lt;:</span> <span class=\"kt\">Real</span><span class=\"p\">},</span>\n        <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)),</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)),</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">tfm</span> <span class=\"o\">=</span> <span class=\"n\">SquaredEuclidean</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">tfm</span>\n<span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span> <span class=\"n\">is</span> <span class=\"n\">ambiguous</span><span class=\"o\">.</span> <span class=\"n\">Candidates</span><span class=\"o\">:</span>\n\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">T1</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">::</span><span class=\"kt\">T2</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">T1</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T1</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractArray</span><span class=\"p\">,</span> <span class=\"kt\">T2</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractArray</span><span class=\"p\">}</span> <span class=\"k\">in</span> <span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">daleblack</span><span class=\"o\">/</span><span class=\"n\">Google</span> <span class=\"n\">Drive</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">pluto</span> <span class=\"n\">notebooks</span><span class=\"o\">/</span><span class=\"n\">restructure_distance_transforms</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"cm\">#==#</span><span class=\"mi\">95897</span><span class=\"n\">bab</span><span class=\"o\">-</span><span class=\"mi\">7702</span><span class=\"o\">-</span><span class=\"mf\">48e7</span><span class=\"o\">-</span><span class=\"mf\">8e0</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"n\">b5c0c83d4d94</span><span class=\"o\">:</span><span class=\"mi\">3</span>\n\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#s1108\"</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">var</span><span class=\"s\">\"#s1108\"</span><span class=\"o\">&lt;:</span><span class=\"kt\">Real</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">daleblack</span><span class=\"o\">/</span><span class=\"n\">Google</span> <span class=\"n\">Drive</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">pluto</span> <span class=\"n\">notebooks</span><span class=\"o\">/</span><span class=\"n\">restructure_distance_transforms</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"cm\">#==#</span><span class=\"mi\">95897</span><span class=\"n\">bab</span><span class=\"o\">-</span><span class=\"mi\">7702</span><span class=\"o\">-</span><span class=\"mf\">48e7</span><span class=\"o\">-</span><span class=\"mf\">8e0</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"n\">b5c0c83d4d94</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#s1112\"</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#s1112\"</span><span class=\"o\">&lt;:</span><span class=\"kt\">Real</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">},</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">daleblack</span><span class=\"o\">/</span><span class=\"n\">Google</span> <span class=\"n\">Drive</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">pluto</span> <span class=\"n\">notebooks</span><span class=\"o\">/</span><span class=\"n\">restructure_distance_transforms</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"cm\">#==#</span><span class=\"mi\">95897</span><span class=\"n\">bab</span><span class=\"o\">-</span><span class=\"mi\">7702</span><span class=\"o\">-</span><span class=\"mf\">48e7</span><span class=\"o\">-</span><span class=\"mf\">8e0</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"n\">b5c0c83d4d94</span><span class=\"o\">:</span><span class=\"mi\">18</span>\n\n<span class=\"n\">Possible</span> <span class=\"n\">fix</span><span class=\"p\">,</span> <span class=\"n\">define</span>\n\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">T1</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">T2</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">T1</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T1</span><span class=\"o\">&lt;:</span><span class=\"p\">(</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#s1108\"</span><span class=\"p\">}</span> <span class=\"kt\">where</span> <span class=\"kt\">var</span><span class=\"s\">\"#s1108\"</span><span class=\"o\">&lt;:</span><span class=\"kt\">Real</span><span class=\"p\">),</span> <span class=\"kt\">T2</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractArray</span><span class=\"p\">}</span>\n\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">workspace162</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@Other</span><span class=\"o\">:</span> <span class=\"mi\">15</span>\n<span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span><span class=\"nd\">@Local</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 247829415,
        "sender_full_name": "Dale Black",
        "timestamp": 1627775477
    },
    {
        "content": "<p>At this point you have introduced too many functions, best thing you can do is to restart Julia.</p>",
        "id": 247840606,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1627793839
    },
    {
        "content": "<p>But I can't understand, what is the difference between all these methods, they all create the same object. You do not use type information at all, so you can for example define</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">Test</span><span class=\"p\">(</span>\n  <span class=\"n\">img</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">,</span>\n  <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)),</span>\n  <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)),</span>\n  <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n  <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>This definition will work for vectors and matrices, and for any type of elements.</p>",
        "id": 247840843,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1627794217
    },
    {
        "content": "<p>There is no need to over constrain.</p>",
        "id": 247840892,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1627794260
    },
    {
        "content": "<p>Yeah, great point. <code>AbstractArray</code> covers all that I need</p>",
        "id": 247869394,
        "sender_full_name": "Dale Black",
        "timestamp": 1627840148
    },
    {
        "content": "<p>Thank you for all the help everyone!</p>",
        "id": 247869398,
        "sender_full_name": "Dale Black",
        "timestamp": 1627840160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352971\">Dale Black</span> has marked this topic as resolved.</p>",
        "id": 247869401,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627840163
    }
]