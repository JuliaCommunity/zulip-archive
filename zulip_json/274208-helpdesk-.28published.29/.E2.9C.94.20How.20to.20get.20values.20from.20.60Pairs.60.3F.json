[
    {
        "content": "<p>That should be trivial, but after a few minutes trying, I still can't figure it out:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pairs</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># works</span>\n<span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># fails: returns named tuple</span>\n</code></pre></div>\n<p>The documentation of <code>Pairs</code> is non-existent in the manual.</p>",
        "id": 530560383,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1753362642
    },
    {
        "content": "<p>One possible solution:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"nb\">pi</span><span class=\"o\">.</span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">pi</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 530561194,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1753362888
    },
    {
        "content": "<p>Iterators.map(last, p) will do it</p>",
        "id": 530561232,
        "sender_full_name": "Andy Dienes",
        "timestamp": 1753362899
    },
    {
        "content": "<p><code>keys</code> and <code>values</code> API is a total mess</p>",
        "id": 530561281,
        "sender_full_name": "Andy Dienes",
        "timestamp": 1753362914
    },
    {
        "content": "<p>I looked at it once and then got really mad and had to stop looking</p>",
        "id": 530561330,
        "sender_full_name": "Andy Dienes",
        "timestamp": 1753362926
    },
    {
        "content": "<p>It is <span aria-label=\"grapes\" class=\"emoji emoji-1f347\" role=\"img\" title=\"grapes\">:grapes:</span></p>",
        "id": 530561348,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1753362930
    },
    {
        "content": "<p>actually this was just about my very first ever submitted GH issue <a href=\"https://github.com/JuliaLang/julia/issues/49932\">https://github.com/JuliaLang/julia/issues/49932</a></p>",
        "id": 530561644,
        "sender_full_name": "Andy Dienes",
        "timestamp": 1753363027
    },
    {
        "content": "<p>Why is it returning a <code>NamedTuple</code> a failure?</p>",
        "id": 530565255,
        "sender_full_name": "Mason Protter",
        "timestamp": 1753364060
    },
    {
        "content": "<p>For better or worse, <code>NamedTuple</code> does act like a value collection, not a key-value collection:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"go\">(a = 1, b = 2)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">           </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"go\">1</span>\n<span class=\"go\">2</span>\n</code></pre></div>",
        "id": 530565561,
        "sender_full_name": "Mason Protter",
        "timestamp": 1753364151
    },
    {
        "content": "<p>I think it comes from the context. I am bumping into this when I am processing kwargs:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">kwargs</span>\n</code></pre></div>\n<p>Inside the function <code>f</code> I would like to extract the names of the keywords and their values.</p>",
        "id": 530565570,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1753364153
    },
    {
        "content": "<p>So I would expect <code>kwargs</code> to behave like a named tuple.</p>",
        "id": 530565666,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1753364180
    },
    {
        "content": "<p>the <code>NamedTuple</code> is a collection of values though</p>",
        "id": 530565719,
        "sender_full_name": "Mason Protter",
        "timestamp": 1753364194
    },
    {
        "content": "<p>I know. It is a bit weird though.</p>",
        "id": 530565767,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1753364210
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 530566083,
        "sender_full_name": "Mason Protter",
        "timestamp": 1753364316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273172\">Júlio Hoffimann</span> has marked this topic as resolved.</p>",
        "id": 530568313,
        "sender_full_name": "Notification Bot",
        "timestamp": 1753364925
    },
    {
        "content": "<p><code>values(values(kwargs))</code> if you want a Tuple?</p>",
        "id": 530597881,
        "sender_full_name": "aplavin",
        "timestamp": 1753373306
    },
    {
        "content": "<p>Also an option. Thanks.</p>",
        "id": 530598067,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1753373370
    },
    {
        "content": "<p>I wish all these inconsistencies were gone in the future after careful review of iteration on these objects</p>",
        "id": 530598232,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1753373414
    }
]