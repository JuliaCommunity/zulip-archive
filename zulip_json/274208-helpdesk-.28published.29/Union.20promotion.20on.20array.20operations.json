[
    {
        "content": "<p>When using <code>collect</code> , <code>map</code> ,<code> vcat</code> etc..., on <code>Array</code>s of mixed type (for example <code>Int</code> and <code>Float64</code>), the automatic <code>eltype</code> promotion is to use <code>promote_type</code> . So <code>vcat(rand(3), rand(1:3, 3))</code> will return a <code>Vector{Float64}</code><br>\nIs there a generic way to get a <code>Union</code> instead, i.e. that <code>vcat</code> returns an array of <code>eltype</code> <code>Union{Int, Float64}</code> ?</p>",
        "id": 292397501,
        "sender_full_name": "Th√©o Galy-Fajou",
        "timestamp": 1659963366
    },
    {
        "content": "<p>Hm, I guess you could write things like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">union_vcat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">U</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U</span><span class=\"p\">}[</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and so on. </p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">union_vcat</span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"go\">6-element Vector{Union{Float64, Int64}}:</span>\n<span class=\"go\"> 0.5169156455130914</span>\n<span class=\"go\"> 0.19690004688154739</span>\n<span class=\"go\"> 0.14011289835785867</span>\n<span class=\"go\"> 3</span>\n<span class=\"go\"> 3</span>\n<span class=\"go\"> 3</span>\n</code></pre></div>",
        "id": 292655287,
        "sender_full_name": "Mason Protter",
        "timestamp": 1660078187
    }
]