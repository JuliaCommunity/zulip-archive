[
    {
        "content": "<p>I know that you can treat a collection as a singular element by using <code>Ref</code>, but I always forget how to go in the opposite direction. How do I broadcast over a string as a collection of <code>Char</code>s? I know I've done this before...</p>",
        "id": 238628829,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1620916209
    },
    {
        "content": "<p>I think <code>collect</code> might be what you are looking for.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"s\">\"Julia\"</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Char</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"sc\">'J'</span><span class=\"o\">:</span> <span class=\"n\">ASCII</span><span class=\"o\">/</span><span class=\"n\">Unicode</span> <span class=\"n\">U</span><span class=\"o\">+</span><span class=\"mi\">004</span><span class=\"n\">A</span> <span class=\"p\">(</span><span class=\"n\">category</span> <span class=\"n\">Lu</span><span class=\"o\">:</span> <span class=\"n\">Letter</span><span class=\"p\">,</span> <span class=\"n\">uppercase</span><span class=\"p\">)</span>\n <span class=\"sc\">'u'</span><span class=\"o\">:</span> <span class=\"n\">ASCII</span><span class=\"o\">/</span><span class=\"n\">Unicode</span> <span class=\"n\">U</span><span class=\"o\">+</span><span class=\"mi\">0075</span> <span class=\"p\">(</span><span class=\"n\">category</span> <span class=\"n\">Ll</span><span class=\"o\">:</span> <span class=\"n\">Letter</span><span class=\"p\">,</span> <span class=\"n\">lowercase</span><span class=\"p\">)</span>\n <span class=\"sc\">'l'</span><span class=\"o\">:</span> <span class=\"n\">ASCII</span><span class=\"o\">/</span><span class=\"n\">Unicode</span> <span class=\"n\">U</span><span class=\"o\">+</span><span class=\"mi\">006</span><span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"n\">category</span> <span class=\"n\">Ll</span><span class=\"o\">:</span> <span class=\"n\">Letter</span><span class=\"p\">,</span> <span class=\"n\">lowercase</span><span class=\"p\">)</span>\n <span class=\"sc\">'i'</span><span class=\"o\">:</span> <span class=\"n\">ASCII</span><span class=\"o\">/</span><span class=\"n\">Unicode</span> <span class=\"n\">U</span><span class=\"o\">+</span><span class=\"mi\">0069</span> <span class=\"p\">(</span><span class=\"n\">category</span> <span class=\"n\">Ll</span><span class=\"o\">:</span> <span class=\"n\">Letter</span><span class=\"p\">,</span> <span class=\"n\">lowercase</span><span class=\"p\">)</span>\n <span class=\"sc\">'a'</span><span class=\"o\">:</span> <span class=\"n\">ASCII</span><span class=\"o\">/</span><span class=\"n\">Unicode</span> <span class=\"n\">U</span><span class=\"o\">+</span><span class=\"mi\">0061</span> <span class=\"p\">(</span><span class=\"n\">category</span> <span class=\"n\">Ll</span><span class=\"o\">:</span> <span class=\"n\">Letter</span><span class=\"p\">,</span> <span class=\"n\">lowercase</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 238636133,
        "sender_full_name": "Moorits Muru",
        "timestamp": 1620919255
    },
    {
        "content": "<p>If you don't want to collect an intermediate array, you can use a generator:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"s\">\"hi\"</span><span class=\"p\">)</span>\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"kt\">Generator</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">)}(</span><span class=\"n\">identity</span><span class=\"p\">,</span> <span class=\"s\">\"hi\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Char</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"sc\">'i'</span><span class=\"o\">:</span> <span class=\"n\">ASCII</span><span class=\"o\">/</span><span class=\"n\">Unicode</span> <span class=\"n\">U</span><span class=\"o\">+</span><span class=\"mi\">0069</span> <span class=\"p\">(</span><span class=\"n\">category</span> <span class=\"n\">Ll</span><span class=\"o\">:</span> <span class=\"n\">Letter</span><span class=\"p\">,</span> <span class=\"n\">lowercase</span><span class=\"p\">)</span>\n <span class=\"sc\">'j'</span><span class=\"o\">:</span> <span class=\"n\">ASCII</span><span class=\"o\">/</span><span class=\"n\">Unicode</span> <span class=\"n\">U</span><span class=\"o\">+</span><span class=\"mi\">006</span><span class=\"n\">A</span> <span class=\"p\">(</span><span class=\"n\">category</span> <span class=\"n\">Ll</span><span class=\"o\">:</span> <span class=\"n\">Letter</span><span class=\"p\">,</span> <span class=\"n\">lowercase</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 238640350,
        "sender_full_name": "Mason Protter",
        "timestamp": 1620921166
    },
    {
        "content": "<p>I should probably go PR to base <a href=\"https://github.com/JuliaLang/julia/issues/32672#issuecomment-515699378\">the type/function Stefan suggests here</a> because that seems like an awful workaround for a behavior that is often desirable.</p>",
        "id": 238647999,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1620924679
    },
    {
        "content": "<p>But yes. I am trying to avoid additional allocations without having to explicitly write out the loop.</p>",
        "id": 238648040,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1620924709
    }
]