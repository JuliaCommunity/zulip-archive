[
    {
        "content": "<p>Is there any way to make <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/Revise\">Revise.jl</a> force the re-expansion of macros in tracked files? For example, if I have a file <code>foo.jl</code> with was <code>includet</code>'d:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nd\">@__LINE__</span>\n</code></pre></div>\n<p>and I evaluate <code>bar()</code> I'd get <code>foo.jl:1</code>, but if I then edit the file so that bar is on a different line, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\"># some comment</span>\n<span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nd\">@__LINE__</span>\n</code></pre></div>\n<p>then those changes are not reflected in the result of <code>bar()</code>, it'll still return <code>1</code> instead of <code>2</code>.</p>\n<p>It seems that I can force Revise to re-expand the macro if <code>bar</code> is inside a package and I do <code>revise(Mod::Module; force=true)</code>, but that requires <code>Mod</code> to be loaded through <code>Pkg</code>, it won't work with e.g. <code>Main</code>.</p>",
        "id": 531754972,
        "sender_full_name": "Mason Protter",
        "timestamp": 1753854969
    },
    {
        "content": "<p>Does it work if you define <code>__revise_mode__ = :eval</code> before calling <code>includet</code>? <a href=\"https://timholy.github.io/Revise.jl/stable/config/#Configuring-the-revise-mode\">https://timholy.github.io/Revise.jl/stable/config/#Configuring-the-revise-mode</a></p>",
        "id": 531763584,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1753858849
    },
    {
        "content": "<p>Unfortunately not, but I managed to hack my away around it using some Revise internals reverse engineered from <code>Revise.revise</code> (not super happy with that but oh well for now). What I did was</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">revision_keys</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"p\">}()</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">add_force_revise_callback</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">::</span><span class=\"kt\">AbstractString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get!</span><span class=\"p\">(</span><span class=\"n\">revision_keys</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">gensym</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">Revise</span><span class=\"o\">.</span><span class=\"n\">add_callback</span><span class=\"p\">((</span><span class=\"n\">file</span><span class=\"p\">,);</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">force_revise_cells</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<span class=\"n\">add_force_revise_callback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">nothing</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">force_revise_cells</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">::</span><span class=\"kt\">AbstractString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exsigs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Revise</span><span class=\"o\">.</span><span class=\"n\">parse_source</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">exsigs</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"o\">.</span><span class=\"n\">ex</span>\n<span class=\"w\">            </span><span class=\"n\">exuw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Revise</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">exuw</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:macrocall</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">exuw</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"@cell\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>which means that all my <code>@cell</code> macros will get re-evaled whenever the specified file is updated.</p>",
        "id": 531899307,
        "sender_full_name": "Mason Protter",
        "timestamp": 1753898429
    }
]