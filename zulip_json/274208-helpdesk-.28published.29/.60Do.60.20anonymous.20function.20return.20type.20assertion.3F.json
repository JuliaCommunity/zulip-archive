[
    {
        "content": "<p>Is there a way to assert the return type of a function generated by a do statement?  Something like</p>\n<p>J = [1,2,3];<br>\nforeach(J) do (x::Int)::Int x + 1 end;</p>\n<p>Was trying to write a Julia parser for fun, realized it seemed like type assertions here don't seem to work.  Type assertions for the arguments, and default arguments seem to work in a do, though.</p>",
        "id": 463114738,
        "sender_full_name": "Thomas Purdy",
        "timestamp": 1723964010
    },
    {
        "content": "<p>Nope, this isn't supported.</p>",
        "id": 463177220,
        "sender_full_name": "Mason Protter",
        "timestamp": 1723989672
    },
    {
        "content": "<p>you could write</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">J</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">y</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>and that'll be equivalent, but because of the awful semantics of assignment returning the <del>lhs instead of the rhs</del> rhs instead of the lhs, the above pattern isn't really a good idea because people might end up shortening it to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">J</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>which doesn't actually do the same thing.</p>",
        "id": 463177374,
        "sender_full_name": "Mason Protter",
        "timestamp": 1723989770
    },
    {
        "content": "<p>Ah ok, thank you.  I'm assuming there's no plans to support it, either?</p>",
        "id": 463191769,
        "sender_full_name": "Thomas Purdy",
        "timestamp": 1723995315
    },
    {
        "content": "<p>Nope. Method return type assertions are mostly considered an afterthought anyways. Nobody really uses or recommends them.</p>",
        "id": 463192060,
        "sender_full_name": "Mason Protter",
        "timestamp": 1723995572
    },
    {
        "content": "<p>Ok, gotchya.</p>",
        "id": 463193694,
        "sender_full_name": "Thomas Purdy",
        "timestamp": 1723996111
    },
    {
        "content": "<p>It's unclear what the syntax for it could even be.</p>",
        "id": 463194245,
        "sender_full_name": "Mason Protter",
        "timestamp": 1723996228
    },
    {
        "content": "<p>like, the syntax you proposed,</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">J</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>wouldn't work for multi-argument functions, because then the parentheses would mean argument-destructuring</p>",
        "id": 463194473,
        "sender_full_name": "Mason Protter",
        "timestamp": 1723996285
    },
    {
        "content": "<p>I guess you could do something terrible, like have it to the right of 'do'.  Having it at the 'end' wouldn't work as it'd be for the overall statement, though that'd seem more natural.</p>\n<p>I personally like shoving type assertions everywhere, though I don't really use do statements enough for it to be relevant.</p>",
        "id": 463195369,
        "sender_full_name": "Thomas Purdy",
        "timestamp": 1723996529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.60Do.60.20anonymous.20function.20return.20type.20assertion.3F/near/463177374\">said</a>:</p>\n<blockquote>\n<p>but because of the awful semantics of assignment returning the lhs instead of the rhs</p>\n</blockquote>\n<p>Isn't it the opposite?</p>",
        "id": 463195648,
        "sender_full_name": "Mos√® Giordano",
        "timestamp": 1723996596
    },
    {
        "content": "<p>whoops, yeah I meant to write the opposite</p>",
        "id": 463195706,
        "sender_full_name": "Mason Protter",
        "timestamp": 1723996612
    },
    {
        "content": "<p>returning the lhs is what would make that do the thing that makes sense</p>",
        "id": 463195898,
        "sender_full_name": "Mason Protter",
        "timestamp": 1723996673
    }
]