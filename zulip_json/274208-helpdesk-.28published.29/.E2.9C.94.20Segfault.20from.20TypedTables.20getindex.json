[
    {
        "content": "<p>I'm trying to use a TypedTables.Table instead of a DataFrame to make memory usage smoother in a threaded function of mine, however, I'm running into a segfault issue.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">signal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\"></span>\n<span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"n\">starting</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">tuple</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">unknown</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0x7f43b6734ae8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">_jl_invoke</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">amdci5</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">julialang</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">-</span><span class=\"n\">release</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">dot</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"mi\">2365</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">ijl_apply_generic</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">amdci5</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">julialang</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">-</span><span class=\"n\">release</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">dot</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"mi\">2547</span><span class=\"w\"></span>\n<span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">namedtuple</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">219</span><span class=\"w\"></span>\n<span class=\"n\">getindex</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">tec</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">TypedTables</span><span class=\"o\">/</span><span class=\"n\">dycVq</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">139</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">expansion</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">tec</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">DecisionTree</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">classification</span><span class=\"o\">/</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">123</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For reference, <code>Table.jl:139</code> refers to the second last line of the following function (just before <code>end</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@inline</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">::</span><span class=\"kt\">Table</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nd\">@boundscheck</span><span class=\"w\"> </span><span class=\"n\">checkbounds</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nd\">@inbounds</span><span class=\"p\">(</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">...</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">columns</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)))</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 315770765,
        "sender_full_name": "Timothy",
        "timestamp": 1671010091
    },
    {
        "content": "<p>you only checked the bounds of all <code>i</code> against <code>t</code>, not against the columns of <code>t</code></p>",
        "id": 315779778,
        "sender_full_name": "Sukera",
        "timestamp": 1671012807
    },
    {
        "content": "<p>presumably you only want to use the nth <code>i</code> on the nth column?</p>",
        "id": 315779872,
        "sender_full_name": "Sukera",
        "timestamp": 1671012836
    },
    {
        "content": "<p>sounds like a bug in TypedTables</p>",
        "id": 315780094,
        "sender_full_name": "Sukera",
        "timestamp": 1671012888
    },
    {
        "content": "<p>Do you have a code example, of how this getindex is actually called? What are table columns - regular arrays?</p>",
        "id": 315844684,
        "sender_full_name": "aplavin",
        "timestamp": 1671031381
    },
    {
        "content": "<p>I've now had a bit more of a look at the codebase of TypedTables... and I don't like what I'm seeing. For my use case, I think I'll just write a quick <a href=\"https://github.com/search?q=Tables.jl&amp;type=Repositories\">Tables.jl</a> compatible wrapper around a Matrix and so I'll solve this problem by no longer using TypedTables.</p>",
        "id": 315858988,
        "sender_full_name": "Timothy",
        "timestamp": 1671035062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400021\">Timothy</span> has marked this topic as resolved.</p>",
        "id": 315859034,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671035072
    }
]