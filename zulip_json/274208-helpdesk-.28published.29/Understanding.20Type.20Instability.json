[
    {
        "content": "<p>It's time to get my code type stable and I'm wondering whats going on in this snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n</code></pre></div>\n<p>this part gives me the following code_warntype</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"mi\">9</span> <span class=\"n\">┄─</span> <span class=\"o\">%</span><span class=\"mi\">75</span>  <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">convex</span><span class=\"o\">::</span><span class=\"kt\">Bool</span>\n<span class=\"n\">└───</span>        <span class=\"n\">goto</span> <span class=\"c\">#39 if not %75</span>\n<span class=\"mi\">10</span> <span class=\"n\">─</span>        <span class=\"p\">(</span><span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">79</span>  <span class=\"o\">=</span> <span class=\"n\">ConvexDamage</span><span class=\"o\">.</span><span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>           <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">setfield!</span><span class=\"p\">(</span><span class=\"n\">ξ</span><span class=\"nd\">@_15</span><span class=\"p\">,</span> <span class=\"ss\">:contents</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"mi\">79</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">81</span>  <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">isdefined</span><span class=\"p\">(</span><span class=\"n\">ξ</span><span class=\"nd\">@_15</span><span class=\"p\">,</span> <span class=\"ss\">:contents</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Bool</span>\n<span class=\"n\">└───</span>        <span class=\"n\">goto</span> <span class=\"c\">#12 if not %81</span>\n<span class=\"mi\">11</span> <span class=\"n\">─</span>        <span class=\"n\">goto</span> <span class=\"c\">#13</span>\n<span class=\"mi\">12</span> <span class=\"n\">─</span>        <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">NewvarNode</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">ξ</span><span class=\"nd\">@_28</span><span class=\"p\">))</span>\n<span class=\"n\">└───</span>        <span class=\"n\">ξ</span><span class=\"nd\">@_28</span>\n<span class=\"mi\">13</span> <span class=\"n\">┄</span> <span class=\"o\">%</span><span class=\"mi\">86</span>  <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">getfield</span><span class=\"p\">(</span><span class=\"n\">ξ</span><span class=\"nd\">@_15</span><span class=\"p\">,</span> <span class=\"ss\">:contents</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Any</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">87</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"o\">%</span><span class=\"mi\">86</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Any</span>\n</code></pre></div>\n<p>Now I'm wondering, why <code>Core.getfield(ξ@_15, :contents)</code> is of type <code>::Any</code> if <code>ξ</code> is correctly interferred to a Float64 before?</p>",
        "id": 242564923,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623658360
    },
    {
        "content": "<p>Is it a part of a function? Or all of it is defined in global space?</p>",
        "id": 242565297,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1623658618
    },
    {
        "content": "<p>Maybe somewhere else <code>ξ</code> is changed to a different type.</p>",
        "id": 242565445,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1623658701
    },
    {
        "content": "<p>Also, what's that <code>Core.isdefined</code> doing in there?</p>",
        "id": 242565516,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623658776
    },
    {
        "content": "<p>Everything is inside a function</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">constitutive_driver</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamage</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamageState</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">relaxed</span> <span class=\"o\">?</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W_min</span>\n    <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W</span>\n    <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">convex</span>\n        <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span>  <span class=\"n\">W</span> <span class=\"o\">&lt;</span> <span class=\"n\">W_min</span> <span class=\"o\">||</span> <span class=\"n\">isapprox</span><span class=\"p\">(</span><span class=\"n\">W_min</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n</code></pre></div>\n<p>The first <code> ξ</code> assignment is interfered to a Float64 as well</p>",
        "id": 242565547,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623658798
    },
    {
        "content": "<p>I think <code>Core.isdefined</code> is related to the upper assignment in the sense of checking if it's already assigned, but I'm not sure.</p>",
        "id": 242565612,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623658819
    },
    {
        "content": "<p>this is the code_warntype of the upper part related to xi </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">47</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">48</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F¯</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">49</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">47</span> <span class=\"o\">-</span> <span class=\"o\">%</span><span class=\"mi\">48</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">50</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">51</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F¯</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">52</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">50</span> <span class=\"o\">-</span> <span class=\"o\">%</span><span class=\"mi\">51</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">53</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">49</span> <span class=\"o\">/</span> <span class=\"o\">%</span><span class=\"mi\">52</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>           <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">setfield!</span><span class=\"p\">(</span><span class=\"n\">ξ</span><span class=\"nd\">@_15</span><span class=\"p\">,</span> <span class=\"ss\">:contents</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"mi\">53</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 242565719,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623658891
    },
    {
        "content": "<p>Ah, I see, so xi is  getting <code>Core.Box</code>ed</p>",
        "id": 242565845,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623658959
    },
    {
        "content": "<p>You could try a manual <code>local xi::Float64</code> (or whatever type it should have) before the first condition</p>",
        "id": 242565923,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623658997
    },
    {
        "content": "<p>What is <code>Core.Box</code> ? And more importantly how can I get rid of it :D</p>",
        "id": 242565925,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623658998
    },
    {
        "content": "<p>ah ok, let me try</p>",
        "id": 242565934,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623659009
    },
    {
        "content": "<p>And it might also help to rewrite that to an <code>if else</code> block; I'm not sure if Julia can optimize a <code>if cond</code>/<code>if !cond</code> block the same way</p>",
        "id": 242566062,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623659066
    },
    {
        "content": "<p>Did you mean something like this ? </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">local</span> <span class=\"n\">ξ</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n</code></pre></div>\n<p>This is still <code>Core.Box</code> according to @code_warntype</p>",
        "id": 242566905,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623659589
    },
    {
        "content": "<p>Outcommenting the first assignment should also fix it, shouldn't it? Unfortunately, it doesn't</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">constitutive_driver</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamage</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamageState</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">relaxed</span> <span class=\"o\">?</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W_min</span>\n    <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W</span>\n    <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">convex</span>\n        <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"c\">#ξ = (F[1] - F¯[1]) / (F⁺[1] - F¯[1])</span>\n        <span class=\"c\">#d = (F⁺[1] - F¯[1]) / F[1]</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span>  <span class=\"n\">W</span> <span class=\"o\">&lt;</span> <span class=\"n\">W_min</span> <span class=\"o\">||</span> <span class=\"n\">isapprox</span><span class=\"p\">(</span><span class=\"n\">W_min</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n</code></pre></div>",
        "id": 242568215,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623660441
    },
    {
        "content": "<p>no, I meant something like </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">constitutive_driver</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamage</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamageState</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">relaxed</span> <span class=\"o\">?</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W_min</span>\n    <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W</span>\n    <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span>\n    <span class=\"k\">local</span> <span class=\"n\">ξ</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">convex</span>\n        <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span>  <span class=\"n\">W</span> <span class=\"o\">&lt;</span> <span class=\"n\">W_min</span> <span class=\"o\">||</span> <span class=\"n\">isapprox</span><span class=\"p\">(</span><span class=\"n\">W_min</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n</code></pre></div>",
        "id": 242576243,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623665520
    },
    {
        "content": "<p>or just <code>ξ = 0.0</code>, I guess</p>",
        "id": 242576682,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623665822
    },
    {
        "content": "<p>also, disregard that comment about using an <code>if</code>/<code>else</code> block, I didn't read your code correctly the first time</p>",
        "id": 242576701,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623665840
    },
    {
        "content": "<p>Doing so:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">constitutive_driver</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamage</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamageState</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">relaxed</span> <span class=\"o\">?</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W_min</span>\n    <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W</span>\n    <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span>\n    <span class=\"k\">local</span> <span class=\"n\">ξ</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n    <span class=\"k\">local</span> <span class=\"n\">d</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">convex</span>\n        <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span>  <span class=\"n\">W</span> <span class=\"o\">&lt;</span> <span class=\"n\">W_min</span> <span class=\"o\">||</span> <span class=\"n\">isapprox</span><span class=\"p\">(</span><span class=\"n\">W_min</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n</code></pre></div>\n<p>fixes pretty much all propagated type instabilities, however the first xi and d statement are now a <code>Core.Box</code> (see <code>%54</code> and <code>%63</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"mi\">5</span> <span class=\"n\">──</span> <span class=\"o\">%</span><span class=\"mi\">38</span>  <span class=\"o\">=</span> <span class=\"n\">ConvexDamage</span><span class=\"o\">.</span><span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}}</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">39</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">indexed_iterate</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">PartialStruct</span><span class=\"p\">(</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Any</span><span class=\"p\">[</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)])</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">getfield</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"nd\">@_9</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">getfield</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">42</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">indexed_iterate</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nd\">@_9</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">PartialStruct</span><span class=\"p\">(</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Any</span><span class=\"p\">[</span><span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)])</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"n\">F⁺</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">getfield</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"nd\">@_9</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">getfield</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">45</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">indexed_iterate</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nd\">@_9</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">PartialStruct</span><span class=\"p\">(</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Any</span><span class=\"p\">[</span><span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)])</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">getfield</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">47</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">48</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F¯</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">49</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">47</span> <span class=\"o\">-</span> <span class=\"o\">%</span><span class=\"mi\">48</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">50</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">51</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F¯</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">52</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">50</span> <span class=\"o\">-</span> <span class=\"o\">%</span><span class=\"mi\">51</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">53</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">49</span> <span class=\"o\">/</span> <span class=\"o\">%</span><span class=\"mi\">52</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">54</span>  <span class=\"o\">=</span> <span class=\"n\">ξ</span><span class=\"nd\">@_11</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Box</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">55</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">ConvexDamage</span><span class=\"o\">.</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"mi\">53</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">56</span>  <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">typeassert</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"n\">ConvexDamage</span><span class=\"o\">.</span><span class=\"kt\">Float64</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>           <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">setfield!</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"ss\">:contents</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"mi\">56</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">58</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">59</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F¯</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">60</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">58</span> <span class=\"o\">-</span> <span class=\"o\">%</span><span class=\"mi\">59</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">61</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">62</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">60</span> <span class=\"o\">/</span> <span class=\"o\">%</span><span class=\"mi\">61</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">63</span>  <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"nd\">@_10</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Box</span>\n</code></pre></div>\n<p>which corresponds to these lines</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>        <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Sorry for asking now several times, but I don't really understand what's going on. I would understand the compiler complains if the operation before would yield <code>Any</code> or something else, but code_warntype explicitely says it's Float64, so I dont' really get it</p>",
        "id": 242578587,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623667198
    },
    {
        "content": "<p>Did you try initializing xi and d to e.g. <code>0.0</code>? Also, maybe try a type annotation for the re-assignments</p>",
        "id": 242580308,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623668297
    },
    {
        "content": "<p>If I try the initialization with <code>0.0</code> i get already at initialization <code>Core.Box</code></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">24</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getproperty</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"ss\">:relaxed</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Bool</span>\n<span class=\"n\">└───</span>        <span class=\"n\">goto</span> <span class=\"c\">#3 if not %24</span>\n<span class=\"mi\">2</span> <span class=\"n\">──</span>        <span class=\"p\">(</span><span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"n\">└───</span>        <span class=\"n\">goto</span> <span class=\"c\">#4</span>\n<span class=\"mi\">3</span> <span class=\"n\">──</span>        <span class=\"p\">(</span><span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span> <span class=\"n\">┄─</span>        <span class=\"p\">(</span><span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getproperty</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"ss\">:W_min</span><span class=\"p\">))</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getproperty</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"ss\">:W</span><span class=\"p\">))</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">31</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getproperty</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"ss\">:damage⁺</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">ConvexDamage</span><span class=\"o\">.</span><span class=\"kt\">Damage</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">32</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getproperty</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"ss\">:Fₖ</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">33</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getproperty</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"ss\">:damage¯</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">ConvexDamage</span><span class=\"o\">.</span><span class=\"kt\">Damage</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">34</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getproperty</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"ss\">:Fₖ</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"n\">F⁺</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>           <span class=\"p\">(</span><span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"mi\">34</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">37</span>  <span class=\"o\">=</span> <span class=\"n\">ξ</span><span class=\"nd\">@_15</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Box</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">38</span>  <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">ConvexDamage</span><span class=\"o\">.</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">39</span>  <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">typeassert</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"n\">ConvexDamage</span><span class=\"o\">.</span><span class=\"kt\">Float64</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>           <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">setfield!</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"ss\">:contents</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"mi\">39</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>    <span class=\"o\">%</span><span class=\"mi\">41</span>  <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"nd\">@_14</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Box</span>\n</code></pre></div>\n<p>corresponds to the code part above the first <code>if</code> statement</p>",
        "id": 242580736,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623668548
    },
    {
        "content": "<p>Just out of curiousity, if you use <code>ξ2</code> instead of <code>ξ</code> (and comment out everything after conditions), will it still be a <code>Box</code>?<br>\nI mean, something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">constitutive_driver</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamage</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamageState</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">relaxed</span> <span class=\"o\">?</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W_min</span>\n    <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W</span>\n    <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span>\n    <span class=\"k\">local</span> <span class=\"n\">ξ</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n    <span class=\"k\">local</span> <span class=\"n\">d</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">convex</span>\n        <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span>  <span class=\"n\">W</span> <span class=\"o\">&lt;</span> <span class=\"n\">W_min</span> <span class=\"o\">||</span> <span class=\"n\">isapprox</span><span class=\"p\">(</span><span class=\"n\">W_min</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">ξ2</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ2</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Note, that function ends here (there is no continuation, which can introduce additional difficulties for compiler).</p>",
        "id": 242580758,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1623668565
    },
    {
        "content": "<p>In general this is the full function, if it matters:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">constitutive_driver</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamage</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamageState</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">relaxed</span> <span class=\"o\">?</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W_min</span>\n    <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W</span>\n    <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span>\n    <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">convex</span>\n        <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">ξ</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">d</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span>  <span class=\"n\">W</span> <span class=\"o\">&lt;</span> <span class=\"n\">W_min</span> <span class=\"o\">||</span> <span class=\"n\">isapprox</span><span class=\"p\">(</span><span class=\"n\">W_min</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">ξ</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"mf\">0.0</span>\n        <span class=\"c\">#P, 𝔸, ψ⁺, ψ¯ = homogenized_derivatives(ξ, d, F, material, state) FIXME</span>\n        <span class=\"n\">𝔸</span><span class=\"p\">,</span> <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">Tensors</span><span class=\"o\">.</span><span class=\"n\">hessian</span><span class=\"p\">(</span>\n                <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">W_homogenized</span><span class=\"p\">(</span><span class=\"n\">ξ</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">),</span>\n                <span class=\"n\">F</span><span class=\"p\">,</span>\n                <span class=\"ss\">:all</span><span class=\"p\">)</span>\n        <span class=\"n\">ψ⁺</span> <span class=\"o\">=</span> <span class=\"n\">Ψ</span><span class=\"p\">(</span><span class=\"n\">tdot</span><span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">),</span> <span class=\"n\">material</span><span class=\"o\">.</span><span class=\"n\">base_material</span><span class=\"p\">)</span>\n        <span class=\"n\">ψ¯</span> <span class=\"o\">=</span> <span class=\"n\">Ψ</span><span class=\"p\">(</span><span class=\"n\">tdot</span><span class=\"p\">(</span><span class=\"n\">F¯</span><span class=\"p\">),</span> <span class=\"n\">material</span><span class=\"o\">.</span><span class=\"n\">base_material</span><span class=\"p\">)</span>\n        <span class=\"n\">σ</span> <span class=\"o\">=</span> <span class=\"n\">symmetric</span><span class=\"p\">(</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">det</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">P</span> <span class=\"o\">⋅</span> <span class=\"n\">F</span><span class=\"o\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_homogenized</span><span class=\"p\">(</span><span class=\"n\">ξ</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">unrelaxed</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">ψₖ</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">Fₖ</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">)</span>\n        <span class=\"n\">phase⁺</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ⁺</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ⁺</span><span class=\"p\">),</span> <span class=\"n\">Fₖ</span><span class=\"o\">=</span><span class=\"n\">F⁺</span><span class=\"p\">)</span>\n        <span class=\"n\">phase¯</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ¯</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ¯</span><span class=\"p\">),</span> <span class=\"n\">Fₖ</span><span class=\"o\">=</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span>\n        <span class=\"c\">#𝔸, P, ψ = strain_energy_derivatives(F, material, state)</span>\n        <span class=\"n\">𝔸</span><span class=\"p\">,</span> <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">Tensors</span><span class=\"o\">.</span><span class=\"n\">hessian</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">),</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"ss\">:all</span><span class=\"p\">)</span>\n        <span class=\"n\">ψ</span> <span class=\"o\">=</span> <span class=\"n\">Ψ</span><span class=\"p\">(</span><span class=\"n\">tdot</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">),</span> <span class=\"n\">material</span><span class=\"o\">.</span><span class=\"n\">base_material</span><span class=\"p\">)</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">σ</span> <span class=\"o\">=</span> <span class=\"n\">symmetric</span><span class=\"p\">(</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">det</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">P</span> <span class=\"o\">⋅</span> <span class=\"n\">F</span><span class=\"o\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">ξ</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">ξₖ</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">dₖ</span>\n        <span class=\"n\">unrelaxed</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ</span><span class=\"p\">),</span> <span class=\"n\">Fₖ</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">)</span>\n        <span class=\"n\">phase⁺</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ</span><span class=\"p\">))</span>\n        <span class=\"n\">phase¯</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">newstate</span> <span class=\"o\">=</span> <span class=\"n\">RelaxedDamageState</span><span class=\"p\">(</span><span class=\"n\">unrelaxed</span><span class=\"p\">,</span><span class=\"n\">phase⁺</span><span class=\"p\">,</span><span class=\"n\">phase¯</span><span class=\"p\">,</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"n\">σ</span><span class=\"p\">,</span> <span class=\"n\">ξ</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">convex</span><span class=\"p\">,</span> <span class=\"n\">relaxed</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">𝔸</span><span class=\"p\">,</span> <span class=\"n\">newstate</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 242580893,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623668643
    },
    {
        "content": "<p>I'll try it with a second xi variable</p>",
        "id": 242580961,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623668691
    },
    {
        "content": "<p>I feel like you'd need to annotate all xi assignments if you want to get rid of the box</p>",
        "id": 242581126,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623668771
    },
    {
        "content": "<p>but my intuition for that isn't great either apart from closures <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 242581148,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623668792
    },
    {
        "content": "<p>Oh, there is another  <code>ξ</code> in <code>ξ = state.ξₖ</code>.</p>",
        "id": 242581348,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1623668907
    },
    {
        "content": "<p>Probably this is where you get type instability.</p>",
        "id": 242581355,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1623668916
    },
    {
        "content": "<p>If I annotate multiple ones I get multiple type annotation error, am I doing it wrong by just writing <code>ξ::Float64 = ...</code> in front of each assignment?</p>",
        "id": 242581406,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623668962
    },
    {
        "content": "<p>ah, yeah, you'd want to annotate the rhs, not the lhs</p>",
        "id": 242581437,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1623668985
    },
    {
        "content": "<p>but <code>state.ξₖ</code> is a Float64. That's exactly the point that I don't get</p>",
        "id": 242581447,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623668990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"208845\">Sebastian Pfitzner</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Understanding.20Type.20Instability/near/242581437\">said</a>:</p>\n<blockquote>\n<p>ah, yeah, you'd want to annotate the rhs, not the lhs</p>\n</blockquote>\n<p>so e.g. <code>volumefraction(...)::Float64</code>?</p>",
        "id": 242581518,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623669013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276387\">Max Köhler</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Understanding.20Type.20Instability/near/242581447\">said</a>:</p>\n<blockquote>\n<p>but <code>state.ξₖ</code> is a Float64. That's exactly the point that I don't get</p>\n</blockquote>\n<p>Just to make sure, that field is strongly typed in the struct definition?</p>",
        "id": 242581753,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1623669199
    },
    {
        "content": "<p>yes its</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"nd\">@kwdef</span> <span class=\"k\">struct</span> <span class=\"kt\">RelaxedDamageState</span><span class=\"p\">{</span><span class=\"kt\">dim</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">M</span><span class=\"p\">,</span><span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">MaterialState</span>\n    <span class=\"n\">damage</span><span class=\"o\">::</span><span class=\"kt\">Damage</span><span class=\"p\">{</span><span class=\"kt\">dim</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">M</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">()</span>\n    <span class=\"n\">damage⁺</span><span class=\"o\">::</span><span class=\"kt\">Damage</span><span class=\"p\">{</span><span class=\"kt\">dim</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">M</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">()</span>\n    <span class=\"n\">damage¯</span><span class=\"o\">::</span><span class=\"kt\">Damage</span><span class=\"p\">{</span><span class=\"kt\">dim</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">M</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">()</span>\n    <span class=\"n\">P</span><span class=\"o\">::</span><span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"kt\">dim</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">M</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"kt\">Tensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">}((</span><span class=\"mf\">0.0</span><span class=\"p\">,))</span>\n    <span class=\"n\">σ</span><span class=\"o\">::</span><span class=\"kt\">SymmetricTensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"kt\">dim</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"kt\">SymmetricTensor</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">}((</span><span class=\"mf\">0.0</span><span class=\"p\">,))</span>\n    <span class=\"n\">ξₖ</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">dₖ</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">W_min</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">W</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">convex</span><span class=\"o\">::</span><span class=\"kt\">Bool</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"n\">relaxed</span><span class=\"o\">::</span><span class=\"kt\">Bool</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 242581782,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623669233
    },
    {
        "content": "<p>This is now  a type stable version, but I still don't understand why. It's pretty much your suggestion <span class=\"user-mention\" data-user-id=\"272771\">@Andrey Oskin</span></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">constitutive_driver</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamage</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">::</span><span class=\"kt\">RelaxedDamageState</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">relaxed</span> <span class=\"o\">?</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n    <span class=\"n\">W_min</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W_min</span>\n    <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">W</span>\n    <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">Fₖ</span>\n    <span class=\"c\">#local ξ::Float64</span>\n    <span class=\"c\">#local d::Float64</span>\n    <span class=\"n\">ξ_old</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">ξₖ</span>\n    <span class=\"n\">d_old</span><span class=\"o\">::</span><span class=\"kt\">Float64</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">dₖ</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">convex</span>\n        <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span> <span class=\"n\">F¯</span> <span class=\"o\">=</span> <span class=\"n\">convexify</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"c\">#ξ_new = (F[1] - F¯[1]) / (F⁺[1] - F¯[1])::Float64</span>\n        <span class=\"c\">#d_new = (F⁺[1] - F¯[1]) / F[1]::Float64</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span>  <span class=\"n\">W</span> <span class=\"o\">&lt;</span> <span class=\"n\">W_min</span> <span class=\"o\">||</span> <span class=\"n\">isapprox</span><span class=\"p\">(</span><span class=\"n\">W_min</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">convex</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">ξ_new</span> <span class=\"o\">=</span> <span class=\"n\">volumefraction</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">F⁺</span><span class=\"p\">,</span><span class=\"n\">F¯</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">ξ_new</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">d_new</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ξ_new</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">F¯</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n        <span class=\"c\">#P, 𝔸, ψ⁺, ψ¯ = homogenized_derivatives(ξ, d, F, material, state) FIXME</span>\n        <span class=\"n\">𝔸</span><span class=\"p\">,</span> <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">Tensors</span><span class=\"o\">.</span><span class=\"n\">hessian</span><span class=\"p\">(</span>\n                <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">W_homogenized</span><span class=\"p\">(</span><span class=\"n\">ξ_new</span><span class=\"p\">,</span> <span class=\"n\">d_new</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">),</span>\n                <span class=\"n\">F</span><span class=\"p\">,</span>\n                <span class=\"ss\">:all</span><span class=\"p\">)</span>\n        <span class=\"n\">ψ⁺</span> <span class=\"o\">=</span> <span class=\"n\">Ψ</span><span class=\"p\">(</span><span class=\"n\">tdot</span><span class=\"p\">(</span><span class=\"n\">F⁺</span><span class=\"p\">),</span> <span class=\"n\">material</span><span class=\"o\">.</span><span class=\"n\">base_material</span><span class=\"p\">)</span>\n        <span class=\"n\">ψ¯</span> <span class=\"o\">=</span> <span class=\"n\">Ψ</span><span class=\"p\">(</span><span class=\"n\">tdot</span><span class=\"p\">(</span><span class=\"n\">F¯</span><span class=\"p\">),</span> <span class=\"n\">material</span><span class=\"o\">.</span><span class=\"n\">base_material</span><span class=\"p\">)</span>\n        <span class=\"n\">σ</span> <span class=\"o\">=</span> <span class=\"n\">symmetric</span><span class=\"p\">(</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">det</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">P</span> <span class=\"o\">⋅</span> <span class=\"n\">F</span><span class=\"o\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">W_homogenized</span><span class=\"p\">(</span><span class=\"n\">ξ_new</span><span class=\"p\">,</span> <span class=\"n\">d_new</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">unrelaxed</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">ψₖ</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">Fₖ</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">)</span>\n        <span class=\"n\">phase⁺</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ⁺</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage⁺</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ⁺</span><span class=\"p\">),</span> <span class=\"n\">Fₖ</span><span class=\"o\">=</span><span class=\"n\">F⁺</span><span class=\"p\">)</span>\n        <span class=\"n\">phase¯</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ¯</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage¯</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ¯</span><span class=\"p\">),</span> <span class=\"n\">Fₖ</span><span class=\"o\">=</span><span class=\"n\">F¯</span><span class=\"p\">)</span>\n        <span class=\"n\">newstate</span> <span class=\"o\">=</span> <span class=\"n\">RelaxedDamageState</span><span class=\"p\">(</span><span class=\"n\">unrelaxed</span><span class=\"p\">,</span><span class=\"n\">phase⁺</span><span class=\"p\">,</span><span class=\"n\">phase¯</span><span class=\"p\">,</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"n\">σ</span><span class=\"p\">,</span> <span class=\"n\">ξ_new</span><span class=\"p\">,</span><span class=\"n\">d_new</span><span class=\"p\">,</span> <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">convex</span><span class=\"p\">,</span> <span class=\"n\">relaxed</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span>\n        <span class=\"c\">#𝔸, P, ψ = strain_energy_derivatives(F, material, state)</span>\n        <span class=\"n\">𝔸</span><span class=\"p\">,</span> <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">Tensors</span><span class=\"o\">.</span><span class=\"n\">hessian</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">W_energy</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"p\">),</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"ss\">:all</span><span class=\"p\">)</span>\n        <span class=\"n\">ψ</span> <span class=\"o\">=</span> <span class=\"n\">Ψ</span><span class=\"p\">(</span><span class=\"n\">tdot</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">),</span> <span class=\"n\">material</span><span class=\"o\">.</span><span class=\"n\">base_material</span><span class=\"p\">)</span>\n        <span class=\"n\">convex</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n        <span class=\"n\">relaxed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n        <span class=\"n\">σ</span> <span class=\"o\">=</span> <span class=\"n\">symmetric</span><span class=\"p\">(</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">det</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">P</span> <span class=\"o\">⋅</span> <span class=\"n\">F</span><span class=\"o\">'</span><span class=\"p\">)</span>\n        <span class=\"c\">#ξ = copy(state.ξₖ)::Float64</span>\n        <span class=\"c\">#d = copy(state.dₖ)::Float64</span>\n        <span class=\"n\">unrelaxed</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ</span><span class=\"p\">),</span> <span class=\"n\">Fₖ</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">)</span>\n        <span class=\"n\">phase⁺</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ</span><span class=\"p\">))</span>\n        <span class=\"n\">phase¯</span> <span class=\"o\">=</span> <span class=\"n\">Damage</span><span class=\"p\">(</span><span class=\"n\">ψₖ</span> <span class=\"o\">=</span> <span class=\"n\">ψ</span><span class=\"p\">,</span> <span class=\"n\">βₖ</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">damage</span><span class=\"o\">.</span><span class=\"n\">βₖ</span><span class=\"p\">,</span> <span class=\"n\">ψ</span><span class=\"p\">))</span>\n        <span class=\"n\">newstate</span> <span class=\"o\">=</span> <span class=\"n\">RelaxedDamageState</span><span class=\"p\">(</span><span class=\"n\">unrelaxed</span><span class=\"p\">,</span><span class=\"n\">phase⁺</span><span class=\"p\">,</span><span class=\"n\">phase¯</span><span class=\"p\">,</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"n\">σ</span><span class=\"p\">,</span> <span class=\"n\">ξ_old</span><span class=\"p\">,</span><span class=\"n\">d_old</span><span class=\"p\">,</span> <span class=\"n\">W_min</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">convex</span><span class=\"p\">,</span> <span class=\"n\">relaxed</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">𝔸</span><span class=\"p\">,</span> <span class=\"n\">newstate</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 242582596,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623669753
    },
    {
        "content": "<p>Hmm, it shouldn't work, since if <code>convex</code> is  true, <code>newstate</code> is not defined.</p>",
        "id": 242582770,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1623669915
    },
    {
        "content": "<p>Really? Both branches in the if-else statement define <code>newstate</code></p>",
        "id": 242582806,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623669954
    },
    {
        "content": "<p>The type annotations are actually not needed in the above example. Unfortunately, I can't get a version working, which uses the <code>local</code> statement with type annotations. If I try to do it, I directly get a <code>Core.Box</code> at initialization.</p>",
        "id": 242583431,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623670388
    },
    {
        "content": "<p>Ah, I see, yes, you are right. Yes, everything is defined properly in all branches.</p>",
        "id": 242584619,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1623671225
    },
    {
        "content": "<p>So I achieved now somewhat what I wanted, i.e. a type stable version but I still don't understand why this fixes the <code>Core.Box</code>problem. I have some intuition what is meant by that, but in this particular case I cannot see the logic behind it. Other than that and quite a related question for a different function:</p>\n<p>Is there a type stable version of <code>findfirst</code> or should I go for a small custom function?</p>",
        "id": 242588090,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623673406
    },
    {
        "content": "<p>Just make sure to properly handle the <code>nothing</code> case and there shouldn't be a problem.</p>",
        "id": 242588202,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1623673461
    },
    {
        "content": "<p>As far as I understood, GPUCompiler will complain about any type instability, but maybe the <code>Union</code> with nothing is an exception</p>",
        "id": 242588322,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623673532
    },
    {
        "content": "<p>I mean, if you do something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">findfirst</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">idx</span> <span class=\"o\">===</span> <span class=\"nb\">nothing</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"c\"># something with idx</span>\n</code></pre></div>\n<p>isn't that okay?</p>",
        "id": 242588470,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1623673608
    },
    {
        "content": "<p>ah ok nvm, <code>findfirst</code> seems to have it's own dispatch for gpuarrays, so should be okay I guess</p>",
        "id": 242589009,
        "sender_full_name": "Max Köhler",
        "timestamp": 1623673880
    }
]