[
    {
        "content": "<p>Is this a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"kt\">String</span><span class=\"p\">[]</span>\n<span class=\"kt\">String</span><span class=\"p\">[]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">append!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"s\">\"\"</span><span class=\"p\">)</span>\n<span class=\"kt\">String</span><span class=\"p\">[]</span>\n</code></pre></div>\n<p><code>push!</code> seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"s\">\"\"</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"s\">\"\"</span>\n</code></pre></div>",
        "id": 240887115,
        "sender_full_name": "mbaz",
        "timestamp": 1622512827
    },
    {
        "content": "<p>Nevermind, I figured it out.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">append!</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"s\">\"\"</span><span class=\"p\">])</span>\n<span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"s\">\"\"</span>\n</code></pre></div>",
        "id": 240887459,
        "sender_full_name": "mbaz",
        "timestamp": 1622513264
    },
    {
        "content": "<p>Guess it's the same thing as in<br>\n<a href=\"https://discourse.julialang.org/t/tutorial-efficient-and-safe-approaches-to-mutation-in-data-parallelism/62105/4\">https://discourse.julialang.org/t/tutorial-efficient-and-safe-approaches-to-mutation-in-data-parallelism/62105/4</a></p>\n<p>Probably <code>append!(String[], (\"\", ))</code> should work too.</p>",
        "id": 240890354,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1622517198
    },
    {
        "content": "<p>Are you looking for <code>push!</code>? That is for adding elements whereas <code>append!</code> iterates the argument and adds the elements in the iterator.</p>",
        "id": 240897135,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1622526297
    },
    {
        "content": "<p>The reason why <code>append!(s, \"\")</code> does nothing is that it iterates over the characters in the string, but there are none so nothing happens. If you have a non-empty string it fails since the element type is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"kt\">String</span><span class=\"p\">[]</span>\n<span class=\"kt\">String</span><span class=\"p\">[]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">append!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"s\">\"abc\"</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">Cannot</span> <span class=\"sb\">`convert`</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"kt\">Char</span> <span class=\"n\">to</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"kt\">String</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">210</span>\n  <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractString</span> <span class=\"n\">at</span> <span class=\"n\">strings</span><span class=\"o\">/</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">231</span>\n  <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">AbstractString</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">AbstractString</span> <span class=\"n\">at</span> <span class=\"n\">strings</span><span class=\"o\">/</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">232</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">setindex!</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">},</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Char</span><span class=\"p\">,</span> <span class=\"n\">i1</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">839</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">_append!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">},</span> <span class=\"c\">#unused#::Base.HasLength, iter::String)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">991</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">append!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">},</span> <span class=\"n\">iter</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">981</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Not sure I like that it doesn't clean up the pre-allocation when it errors though:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"c\">#undef</span>\n <span class=\"c\">#undef</span>\n <span class=\"c\">#undef</span>\n</code></pre></div>",
        "id": 240902304,
        "sender_full_name": "Gunnar Farneb√§ck",
        "timestamp": 1622531385
    },
    {
        "content": "<p>Thanks to all! I was indeed looking for <code>push!</code>. What happened is that, by mistake, I read <code>append!(String[], \"\")</code> as \"append the empty string to <code>String[]</code>\" instead of \"append the elements of the empty string to <code>String[]</code>\".</p>\n<p>I don't work often on strings and I don't automatically think of them as iterators (yet).</p>",
        "id": 240938026,
        "sender_full_name": "mbaz",
        "timestamp": 1622552702
    }
]