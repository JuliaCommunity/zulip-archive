[
    {
        "content": "<p>Is there a workaround to provide keyword arguments for macros in Julia? The basic approach doesn't work but I am guessing there is some workaround??</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">keyword_macro</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwarg1</span><span class=\"o\">=</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">quote</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kwarg1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">macros</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">accept</span><span class=\"w\"> </span><span class=\"n\">keyword</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">around</span>\n</code></pre></div>",
        "id": 347907347,
        "sender_full_name": "Dale Black",
        "timestamp": 1680979721
    },
    {
        "content": "<p>This kind of works, but is ugly</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">print_kwargs</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c\"># Filter out dictionaries (assuming dictionaries are passed for keyword arguments)</span>\n<span class=\"w\">    </span><span class=\"n\">pos_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Expr</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:call</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:Dict</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">kw_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Expr</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:call</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:Dict</span><span class=\"p\">)]</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">quote</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Keyword arguments: \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">kw_args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@print_kwargs</span><span class=\"w\"> </span><span class=\"n\">arg1</span><span class=\"w\"> </span><span class=\"n\">arg2</span><span class=\"w\"> </span><span class=\"n\">arg3</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:a</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:b</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:c</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"three\"</span><span class=\"p\">)</span>\n<span class=\"c\">#returns Keyword arguments: Dict{Symbol, Any}(:a =&gt; 1, :b =&gt; 2, :c =&gt; \"three\")</span>\n</code></pre></div>",
        "id": 347907741,
        "sender_full_name": "Dale Black",
        "timestamp": 1680979998
    },
    {
        "content": "<p>I came up with something like this but I am guessing there is something better</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">_button_dict</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"disabled\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"onclick\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">kwarg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">kwargs</span>\n<span class=\"w\">        </span><span class=\"n\">kwarg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">kwarg</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">_button_dict</span><span class=\"p\">[</span><span class=\"s\">\"</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">kwarg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"s\">\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">kwarg</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n<span class=\"w\">    </span><span class=\"k\">quote</span>\n<span class=\"w\">        </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"nd\">@htl</span><span class=\"p\">(</span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">            &lt;button</span>\n<span class=\"s\">                disabled=</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">_button_dict</span><span class=\"p\">[</span><span class=\"s\">\"disabled\"</span><span class=\"p\">]))</span>\n<span class=\"s\">                onclick=</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">_button_dict</span><span class=\"p\">[</span><span class=\"s\">\"onclick\"</span><span class=\"p\">]))</span>\n<span class=\"s\">            &gt;</span>\n<span class=\"s\">                </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n<span class=\"s\">            &lt;/button&gt;</span>\n<span class=\"s\">        \"\"\"</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"nd\">@button</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"hi\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"disabled\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"onclick\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">msg</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 347912346,
        "sender_full_name": "Dale Black",
        "timestamp": 1680983352
    },
    {
        "content": "<p>I'm not sure if there are easier examples, but check out how stdlib macros like <code>@code_warntype</code> and <code>@info</code> handle this</p>",
        "id": 347913733,
        "sender_full_name": "Brian Chen",
        "timestamp": 1680984254
    },
    {
        "content": "<p>For the latter <a href=\"https://github.com/JuliaLang/julia/blob/1cf5091b474f46a4fc1f2d648db9be168e610399/base/logging.jl#L399\">https://github.com/JuliaLang/julia/blob/1cf5091b474f46a4fc1f2d648db9be168e610399/base/logging.jl#L399</a> looks relevant. I think matching on <code>=</code> Exprs will get you things which look like kwargs</p>",
        "id": 347913826,
        "sender_full_name": "Brian Chen",
        "timestamp": 1680984317
    },
    {
        "content": "<p>Thanks! I don't understand those fully but I can look more into it!</p>",
        "id": 347914279,
        "sender_full_name": "Dale Black",
        "timestamp": 1680984618
    },
    {
        "content": "<p>Definitely don't <code>eval</code> in a macro!</p>",
        "id": 347917314,
        "sender_full_name": "Mason Protter",
        "timestamp": 1680987064
    },
    {
        "content": "<p>Hmm, would you be able to briefly explain why?</p>",
        "id": 347917744,
        "sender_full_name": "Dale Black",
        "timestamp": 1680987404
    },
    {
        "content": "<p>Sorry for the delay, I'd write this maybe like so:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">allowed_kwargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"p\">([</span><span class=\"ss\">:disabled</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:onclick</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"n\">defaults</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:disabled</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:onclick</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">processed_kwargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">kwarg</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">kwarg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">kwarg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">allowed_kwargs</span>\n<span class=\"w\">                </span><span class=\"n\">kwarg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">kwarg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"kt\">ArgumentError</span><span class=\"p\">(</span><span class=\"s\">\"Not an acceptable keyword argument </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">kwarg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"s\">\"</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">elseif</span><span class=\"w\"> </span><span class=\"n\">kwarg</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">kwarg</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">allowed_kwargs</span>\n<span class=\"w\">                </span><span class=\"n\">kwarg</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">kwarg</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"kt\">ArgumentError</span><span class=\"p\">(</span><span class=\"s\">\"Not an acceptable keyword argument </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">kwarg</span><span class=\"p\">)</span><span class=\"s\">\"</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"kt\">ArgumentError</span><span class=\"p\">(</span><span class=\"s\">\"Malformed kwarg </span><span class=\"si\">$kwarg</span><span class=\"s\">\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">defaults</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"n\">processed_kwargs</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"\"\"&lt;button</span>\n<span class=\"s\">                disabled=</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"ss\">:disabled</span><span class=\"p\">])</span>\n<span class=\"s\">                onclick=</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"ss\">:onclick</span><span class=\"p\">])</span>\n<span class=\"s\">            &gt;</span>\n<span class=\"s\">                </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"s\">            &lt;/button&gt;</span>\n<span class=\"s\">        \"\"\"</span>\n<span class=\"w\">    </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"nd\">@__MODULE__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nd\">@htl</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">esc</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 347918396,
        "sender_full_name": "Mason Protter",
        "timestamp": 1680988001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352971\">Dale Black</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Keyword.20Arguments.20in.20Macros/near/347917744\">said</a>:</p>\n<blockquote>\n<p>Hmm, would you be able to briefly explain why?</p>\n</blockquote>\n<p>There are many problems with it. So first of all, when you wrote  <code>kwarg = eval(kwarg)</code> that actually ended up (re)defining global variables <code>disabled</code> and <code>onclick</code>. This is because <code>eval</code> always happens in the global scope, so it'll cause all sorts of confusion, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1000</span>\n<span class=\"w\">           </span><span class=\"nd\">@foo</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 347918688,
        "sender_full_name": "Mason Protter",
        "timestamp": 1680988293
    },
    {
        "content": "<p>Wow there is so much to learn about meta programming in Julia! Are there any resources aside from the Julia docs? Those are kinda thin imo</p>",
        "id": 347956946,
        "sender_full_name": "Dale Black",
        "timestamp": 1681017101
    },
    {
        "content": "<p>It's not just Julia where you should avoid the use of <code>eval</code>. I'd argue that there is no use for it anywhere ever, unless you're writing a REPL of your own.</p>",
        "id": 348213755,
        "sender_full_name": "Santtu",
        "timestamp": 1681132326
    },
    {
        "content": "<p>Empirical studies of eval usage<br>\n<a href=\"http://janvitek.org/pubs/oopsla12b.pdf\">http://janvitek.org/pubs/oopsla12b.pdf</a> <br>\n<a href=\"http://janvitek.org/pubs/oopsla21a.pdf\">http://janvitek.org/pubs/oopsla21a.pdf</a></p>",
        "id": 348249103,
        "sender_full_name": "jar",
        "timestamp": 1681141700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352971\">Dale Black</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Keyword.20Arguments.20in.20Macros/near/347956946\">said</a>:</p>\n<blockquote>\n<p>Wow there is so much to learn about meta programming in Julia! Are there any resources aside from the Julia docs? Those are kinda thin imo</p>\n</blockquote>\n<p>I remember people having wrote about this but not who and where. Maybe have a search through the Juliabloggers archives to see if anything stands out there.</p>",
        "id": 348280957,
        "sender_full_name": "Brian Chen",
        "timestamp": 1681151790
    },
    {
        "content": "<p>Also the docs are pretty thin, yeah</p>",
        "id": 348280972,
        "sender_full_name": "Brian Chen",
        "timestamp": 1681151798
    },
    {
        "content": "<p>Yeah, I found something from Emma Bourdou on medium but not a ton that I have seen</p>",
        "id": 348559539,
        "sender_full_name": "Dale Black",
        "timestamp": 1681246102
    },
    {
        "content": "<p>I remember the <a href=\"https://www.youtube.com/watch?v=2QLhw6LVaq0\">Introduction to metaprogramming in Julia workshop</a>  from JuliaCon 2021 being pretty good</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"2QLhw6LVaq0\" href=\"https://www.youtube.com/watch?v=2QLhw6LVaq0\"><img src=\"https://uploads.zulipusercontent.net/eb4b1cf891dca56f507fbcd9aad5ec1eacea1d75/68747470733a2f2f692e7974696d672e636f6d2f76692f32514c6877364c566171302f64656661756c742e6a7067\"></a></div>",
        "id": 348560704,
        "sender_full_name": "Sundar R",
        "timestamp": 1681246573
    },
    {
        "content": "<p>Ooooh thank you!</p>",
        "id": 348571767,
        "sender_full_name": "Dale Black",
        "timestamp": 1681251810
    },
    {
        "content": "<p>Alright, I am still playing with this. I <em>think</em> I have come up with a pretty simple approach that seems to mimic React/JSX style templating with pure Julia code instead of strings. Do y'all see anything that is a big no-no, in this approach?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">process_exprs</span><span class=\"p\">(</span><span class=\"n\">macro_symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s\">\"&lt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macro_symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">exprs</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:call</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=&gt;</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"=\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"s\">\" &gt;\"</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:tuple</span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span>\n<span class=\"w\">                    </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"=\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"k\">end</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"s\">\"&gt;\"</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">String</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">'&gt;'</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s\">\"&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:macrocall</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">process_exprs</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"s\">\"@\"</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s\">\"&lt;/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macro_symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"&gt;\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">str</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">exprs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process_exprs</span><span class=\"p\">(</span><span class=\"s\">\"p\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"nd\">@htl</span><span class=\"p\">(</span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">            </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">))</span>\n<span class=\"s\">    \"\"\"</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">(</span><span class=\"n\">exprs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process_exprs</span><span class=\"p\">(</span><span class=\"s\">\"span\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"nd\">@htl</span><span class=\"p\">(</span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">            </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">))</span>\n<span class=\"s\">    \"\"\"</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/7178/fdPCyGZRKqbUMy_4beGUTWMx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/fdPCyGZRKqbUMy_4beGUTWMx/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/fdPCyGZRKqbUMy_4beGUTWMx/image.png\"></a></div>",
        "id": 350690813,
        "sender_full_name": "Dale Black",
        "timestamp": 1681801974
    },
    {
        "content": "<p><a href=\"/user_uploads/7178/Qpfvf_W431E3MR-kDGpvmEk8/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/Qpfvf_W431E3MR-kDGpvmEk8/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/Qpfvf_W431E3MR-kDGpvmEk8/image.png\"></a></div>",
        "id": 350690950,
        "sender_full_name": "Dale Black",
        "timestamp": 1681802030
    },
    {
        "content": "<p>Also, I am having trouble with this approach when it comes to HTML element attributes. Right now, all the attributes are being converted to a string which should work for classes, but attributes that expect javascript code or booleans for example are now messed up. Any idea how I could modify this part</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:call</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=&gt;</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"=\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"s\">\" &gt;\"</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:tuple</span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span>\n<span class=\"w\">                    </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"=\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"k\">end</span>\n<span class=\"w\">                </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"s\">\"&gt;\"</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n</code></pre></div>\n<p>to account for this error?</p>\n<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"n\">exprs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process_exprs</span><span class=\"p\">(</span><span class=\"s\">\"button\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"nd\">@htl</span><span class=\"p\">(</span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">            </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">))</span>\n<span class=\"s\">    \"\"\"</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/7178/1BuMgimAcvkLwpgt-59XMKfb/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/7178/xQD8gZTDysmhoyQL5Z2W7oCS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/1BuMgimAcvkLwpgt-59XMKfb/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/1BuMgimAcvkLwpgt-59XMKfb/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/7178/xQD8gZTDysmhoyQL5Z2W7oCS/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/xQD8gZTDysmhoyQL5Z2W7oCS/image.png\"></a></div>",
        "id": 350691637,
        "sender_full_name": "Dale Black",
        "timestamp": 1681802287
    }
]