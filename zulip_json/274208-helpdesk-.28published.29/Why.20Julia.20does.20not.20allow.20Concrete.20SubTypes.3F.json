[
    {
        "content": "<p>This is related to the question I just posted below on Julia's programming paradigm. One thing that sometimes I find unintuitive in Julia is the fact that I cannot create \"subtypes\" of my concrete types. I mean, suppose I create a struct <code>Topological Space</code>. Now, such struct has some fields. Then, I decide I want to create a new struct, a <code>Topological Metric Space</code>. Now, my new struct is also a topological space, so it should share all the fields in <code>Topological Space</code> and theoretically, it should be a subtype of <code>Topological Space</code>. But this is not allowed in Julia. I was wondering what would be the reason for this, and if there is a \"Julia-way\" of thinking of these kind of structs.</p>",
        "id": 270911092,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644180729
    },
    {
        "content": "<p>Oh boy, the popcorn emoji is making me afraid <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>  I'm sorry if this question is ill posed and if I'm actually quite wrong in my assumptions</p>",
        "id": 270911150,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644180825
    },
    {
        "content": "<p>There's been several dozens of threads on this on the Julia discourse and several issues on the julialang github on the topic as well. I think linking to those discussions is going to be more helpful than giving an overview here, and maybe then answering more specific questions?</p>",
        "id": 270911184,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1644180843
    },
    {
        "content": "<p>Hold on. I'll find some links.</p>",
        "id": 270911206,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1644180848
    },
    {
        "content": "<p>This issue is probably the best starting place: &lt;<a href=\"https://github.com/JuliaLang/julia/issues/4935\">https://github.com/JuliaLang/julia/issues/4935</a>&gt;</p>",
        "id": 270911242,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1644180901
    },
    {
        "content": "<p>Thanks a bunch <span class=\"user-mention\" data-user-id=\"296263\">@Adam non-jedi Beckmeyer</span> ! I sometimes shoot from the hip instead of going into Discourse. Indeed, that's a bad habit.</p>",
        "id": 270911245,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644180903
    },
    {
        "content": "<p>And maybe this discourse thread? <a href=\"https://discourse.julialang.org/t/composition-and-inheritance-the-julian-way/11231\">https://discourse.julialang.org/t/composition-and-inheritance-the-julian-way/11231</a></p>",
        "id": 270911260,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1644180936
    },
    {
        "content": "<p>No problem. Sorry if the popcorn emoji came across as snarky. There's just a very typical course this discussion often takes which is very <span aria-label=\"popcorn\" class=\"emoji emoji-1f37f\" role=\"img\" title=\"popcorn\">:popcorn:</span></p>",
        "id": 270911313,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1644180976
    },
    {
        "content": "<p>Don't think there's anything wrong with asking questions without having done 6 hours of research beforehand. You just happened to hit on a hot-button topic.</p>",
        "id": 270911330,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1644181002
    },
    {
        "content": "<p>hahaha, no worries about the pop-corn,  it's actually a good heads-up that I was diving in troubling waters.</p>",
        "id": 270911358,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644181062
    },
    {
        "content": "<p>This blog post is probably also apropos and doesn't require wading through a bunch of mostly irrelevant comments: &lt;<a href=\"http://www.stochasticlifestyle.com/type-dispatch-design-post-object-oriented-programming-julia/\">http://www.stochasticlifestyle.com/type-dispatch-design-post-object-oriented-programming-julia/</a>&gt;</p>",
        "id": 270911414,
        "sender_full_name": "Adam non-jedi Beckmeyer",
        "timestamp": 1644181117
    },
    {
        "content": "<p>I tend to think fields are an implementation detail and making them part of the public interface is bad. Functions are very extensible; fields are not, so they shouldn't be public. And even if fields <em>were</em> extensible, that would just be another way of projecting from an object, when we already have a perfectly good one. If I want to provide a common API for two types, I define a generic function that can be implemented for both.</p>",
        "id": 270911664,
        "sender_full_name": "jar",
        "timestamp": 1644181356
    },
    {
        "content": "<p>Hmm, could you be explicit <span class=\"user-mention\" data-user-id=\"326776\">@jar</span> ? Maybe an example. I'm not visualizing.</p>",
        "id": 270911765,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644181488
    },
    {
        "content": "<p>do you have a sorta elementary (not too mathy) example in mind?</p>",
        "id": 270911959,
        "sender_full_name": "jar",
        "timestamp": 1644181759
    },
    {
        "content": "<p>Geometric objects perhaps.</p>",
        "id": 270911978,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644181783
    },
    {
        "content": "<p>I saw in the link posted by <span class=\"user-mention\" data-user-id=\"296263\">@Adam non-jedi Beckmeyer</span> a nice \"solution\", where the author created a hierarchy of abstract types, and then created a concrete type in the \"leaves\". Like, he created both <code>abstract rectangle</code> and <code>concrete reactangle</code>.</p>",
        "id": 270912055,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644181856
    },
    {
        "content": "<p>If I make </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">abstract type</span> <span class=\"kt\">Shape</span> <span class=\"k\">end</span>\n<span class=\"k\">function</span> <span class=\"n\">area</span> <span class=\"k\">end</span>\n\n<span class=\"k\">struct</span> <span class=\"kt\">Rectangle</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">Shape</span>\n  <span class=\"n\">width</span>\n  <span class=\"n\">height</span>\n<span class=\"k\">end</span>\n<span class=\"n\">area</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">::</span><span class=\"kt\">Rectangle</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">height</span>\n\n<span class=\"k\">struct</span> <span class=\"kt\">Square</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">Shape</span>\n  <span class=\"n\">length</span>\n<span class=\"k\">end</span>\n<span class=\"n\">area</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">Square</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p><code>area</code> is a public function; <code>.width .height .length</code> are private</p>",
        "id": 270912300,
        "sender_full_name": "jar",
        "timestamp": 1644182135
    },
    {
        "content": "<p>If I want to expose width/height/length I can define functions for them</p>",
        "id": 270912376,
        "sender_full_name": "jar",
        "timestamp": 1644182207
    },
    {
        "content": "<p>So, layman's question. Why do you say they are private? I mean, if I \"use\" your package, wouldn't I have access to them?</p>",
        "id": 270912398,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644182261
    },
    {
        "content": "<p>it's a bit metaphysical since julia won't enforce privacy but the idea is there's a social contract where the library author provides some things publicly and says \"this is the public interface of my package, anything else is internal and may change or break without notice\"</p>",
        "id": 270912479,
        "sender_full_name": "jar",
        "timestamp": 1644182385
    },
    {
        "content": "<p>julia should have a way to declare all <code>s::Shape</code>s have an <code>area(s)</code>, and there are a few packages for doing that but nothing in Base yet</p>",
        "id": 270912646,
        "sender_full_name": "jar",
        "timestamp": 1644182598
    },
    {
        "content": "<p>Ah, ok. Thanks a lot for the example and explanation</p>",
        "id": 270913044,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1644183096
    }
]