[
    {
        "content": "<p>I am working on some funcitonality for <a href=\"https://juliahub.com/ui/Packages/General/FinanceModels\">FinanceModels.jl</a> and running into an issue that I'm not able to debug effectively as I'm getting lost in the Transducers internals. Here's a MWE version. The issue is that I'd like to be able to concatenate a negated version of a normal object. I can <code>collect</code> the <code>Foo</code>, a <code>Negate</code>d <code>Foo</code>, a <code>Cat</code>ed <code>Foo</code> and <code>Foo</code> but can't <code>Cat</code> a <code>Negate</code>d `Foo.  </p>\n<p>That's a mouthful, but hopefully this example demonstrates my issue:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Transducers</span>\n\n<span class=\"k\">struct</span> <span class=\"kt\">Foo</span>\n<span class=\"w\">    </span><span class=\"n\">n</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">struct</span> <span class=\"kt\">Negate</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.:-</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Negate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">__foldl__</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Foo</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">n</span>\n<span class=\"w\">        </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"nd\">@next</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">asfoldable</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">Negate</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>See how the components and tuple of <code>Foo</code>s work, but once I introduce the <code>Negate</code> into the tuple it fails.</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">Negate</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span>\n<span class=\"go\">5-element Vector{Int64}:</span>\n<span class=\"go\"> -1</span>\n<span class=\"go\"> -2</span>\n<span class=\"go\"> -3</span>\n<span class=\"go\"> -4</span>\n<span class=\"go\"> -5</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span>\n<span class=\"go\">8-element Vector{Int64}:</span>\n<span class=\"go\"> 1</span>\n<span class=\"go\"> 2</span>\n<span class=\"go\"> 3</span>\n<span class=\"go\"> 4</span>\n<span class=\"go\"> 5</span>\n<span class=\"go\"> 1</span>\n<span class=\"go\"> 2</span>\n<span class=\"go\"> 3</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"n\">Negate</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span>\n<span class=\"gr\">ERROR: MethodError: no method matching iterate(::Negate{Foo})</span>\n\n<span class=\"gr\">Closest candidates are:</span>\n<span class=\"gr\">  iterate(::Union{LinRange, StepRangeLen})</span>\n<span class=\"gr\">   @ Base range.jl:880</span>\n<span class=\"gr\">  iterate(::Union{LinRange, StepRangeLen}, ::Integer)</span>\n<span class=\"gr\">   @ Base range.jl:880</span>\n<span class=\"gr\">  iterate(::T) where T&lt;:Union{Base.KeySet{&lt;:Any, &lt;:Dict}, Base.ValueIterator{&lt;:Dict}}</span>\n<span class=\"gr\">   @ Base dict.jl:698</span>\n<span class=\"gr\">  ...</span>\n\n<span class=\"gr\">Stacktrace:</span>\n<span class=\"gr\">  [1] __foldl__(rf::Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Map{typeof(identity)}, Transducers.Reduction{Map{Type{BangBang.NoBang.SingletonVector}}, Transducers.BottomRF{Transducers.AdHocRF{typeof(BangBang.collector), typeof(identity), typeof(append!!), typeof(identity), typeof(identity), Nothing}}}}}, init::BangBang.SafeCollector{Vector{Int64}}, coll::Negate{Foo})</span>\n<span class=\"gr\">    @ Transducers ~/.julia/packages/Transducers/xbs8O/src/processes.jl:154</span>\n<span class=\"gr\">  [2] foldl_nocomplete</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/processes.jl:352 [inlined]</span>\n<span class=\"gr\">  [3] next</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/library.jl:157 [inlined]</span>\n<span class=\"gr\">  [4] foldlargs</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/core.jl:181 [inlined]</span>\n<span class=\"gr\">  [5] foldlargs</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/core.jl:183 [inlined]</span>\n<span class=\"gr\">  [6] __foldl__</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/processes.jl:176 [inlined]</span>\n<span class=\"gr\">  [7] #transduce#142</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/processes.jl:519 [inlined]</span>\n<span class=\"gr\">  [8] transduce</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/processes.jl:508 [inlined]</span>\n<span class=\"gr\">  [9] transduce(xform::Transducers.Composition{Cat, Transducers.Composition{Map{typeof(identity)}, Map{Type{BangBang.NoBang.SingletonVector}}}}, f::Transducers.AdHocRF{typeof(BangBang.collector), typeof(identity), typeof(append!!), typeof(identity), typeof(identity), Nothing}, init::BangBang.SafeCollector{Empty{Vector{Union{}}}}, coll::Tuple{Foo, Negate{Foo}}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})</span>\n<span class=\"gr\">    @ Transducers ~/.julia/packages/Transducers/xbs8O/src/processes.jl:502</span>\n<span class=\"gr\"> [10] transduce</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/processes.jl:500 [inlined]</span>\n<span class=\"gr\"> [11] _collect(xf::Transducers.Composition{Cat, Map{typeof(identity)}}, coll::Tuple{Foo, Negate{Foo}}, #unused#::Transducers.SizeChanging, #unused#::Base.HasLength)</span>\n<span class=\"gr\">    @ Transducers ~/.julia/packages/Transducers/xbs8O/src/processes.jl:806</span>\n<span class=\"gr\"> [12] collect</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/processes.jl:802 [inlined]</span>\n<span class=\"gr\"> [13] collect</span>\n<span class=\"gr\">    @ ~/.julia/packages/Transducers/xbs8O/src/processes.jl:803 [inlined]</span>\n<span class=\"gr\"> [14] |&gt;(x::Transducers.Eduction{Transducers.Reduction{Cat, Transducers.Reduction{Map{typeof(identity)}, Transducers.BottomRF{Completing{typeof(push!!)}}}}, Tuple{Foo, Negate{Foo}}}, f::typeof(collect))</span>\n<span class=\"gr\">    @ Base ./operators.jl:907</span>\n<span class=\"gr\"> [15] top-level scope</span>\n<span class=\"gr\">    @ REPL[46]:1</span>\n</code></pre></div>\n<p>My real use case is simply being able to model an obligation/liability as the negated version of a contract in FinanceModels.</p>",
        "id": 399650665,
        "sender_full_name": "Alec",
        "timestamp": 1698810919
    },
    {
        "content": "<p>It appears that a reducible is defined via <code>asfoldable</code> instead of <code>__foldl__</code> then it will error with <code>(x,x) |&gt; Cat()</code>. See, for example, this example taken from the Transducers documentation:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">VecOfVec</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">vectors</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}}</span>\n<span class=\"k\">end</span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">__foldl__</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vov</span><span class=\"o\">::</span><span class=\"kt\">VecOfVec</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">vov</span><span class=\"o\">.</span><span class=\"n\">vectors</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">vector</span>\n<span class=\"w\">            </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"nd\">@next</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n\n<span class=\"k\">struct</span> <span class=\"kt\">VecOfVec2</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">vectors</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"k\">end</span>\n<span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">asfoldable</span><span class=\"p\">(</span><span class=\"n\">vov</span><span class=\"o\">::</span><span class=\"kt\">VecOfVec2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vov</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"p\">()</span>\n\n<span class=\"n\">vov</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VecOfVec</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"o\">.</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">]))</span>\n<span class=\"n\">vov2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VecOfVec2</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"o\">.</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"n\">vov</span><span class=\"p\">,</span><span class=\"n\">vov</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"c\"># this does not error</span>\n<span class=\"p\">(</span><span class=\"n\">vov2</span><span class=\"p\">,</span><span class=\"n\">vov2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"c\"># this errors</span>\n</code></pre></div>",
        "id": 399790921,
        "sender_full_name": "Alec",
        "timestamp": 1698867720
    },
    {
        "content": "<p>I think that the prior message may be worthy of a Transducers issue? Curious what other think.</p>",
        "id": 400241995,
        "sender_full_name": "Alec",
        "timestamp": 1699067055
    },
    {
        "content": "<p>For my particular use case where I had a reducible wrapper type, I was able to define a <code>__foldl__</code> which unwrapped the Eduction of the wrapped type and then applied the intended Eduction to the wrapper type: </p>\n<p><a href=\"https://github.com/JuliaActuary/FinanceModels.jl/blob/0621c9b41820b60bdf892ae4cd19bfbfe6d9ca17/src/Projection.jl#L102\">https://github.com/JuliaActuary/FinanceModels.jl/blob/0621c9b41820b60bdf892ae4cd19bfbfe6d9ca17/src/Projection.jl#L102</a></p>",
        "id": 400242075,
        "sender_full_name": "Alec",
        "timestamp": 1699067131
    },
    {
        "content": "<p>Hm yeah that's probebly just a missing application of <code>asfoldable</code> in the implementation of <code>Cat</code> somewhere, can you open an issue?</p>",
        "id": 400269001,
        "sender_full_name": "Mason Protter",
        "timestamp": 1699086309
    },
    {
        "content": "<p>Should be fixed with <a href=\"https://github.com/JuliaFolds2/Transducers.jl/pull/24\">https://github.com/JuliaFolds2/Transducers.jl/pull/24</a></p>\n<p>In about 15 or 20 minutes <code>v0.4.79</code> should be available on the general registry with the fix.</p>",
        "id": 400415413,
        "sender_full_name": "Mason Protter",
        "timestamp": 1699210294
    }
]