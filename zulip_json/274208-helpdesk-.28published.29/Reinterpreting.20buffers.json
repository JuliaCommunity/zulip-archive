[
    {
        "content": "<p>Is there an idiom in Julia for taking a chunk of memory and reinterpreting it as  a given struct?</p>\n<p>For example, suppose I have a parametric type:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n  <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n  <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>How can I \"dump\" this object into a memory chunk and then later reinterpret this memory chunk as a <code>Foo{T}</code>?</p>",
        "id": 279078485,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1650028093
    },
    {
        "content": "<p>Do you mean like this?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"n\">reshape</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"p\">])</span>\n<span class=\"mi\">2</span><span class=\"o\">×</span><span class=\"mi\">1</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"n\">reshape</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}})</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Float64</span><span class=\"o\">:</span>\n <span class=\"mf\">1.0</span>\n <span class=\"mf\">1.0e-323</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"n\">buf</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span><span class=\"o\">×</span><span class=\"mi\">1</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"n\">reshape</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}}))</span><span class=\"o\">:</span>\n <span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 279079087,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650028589
    },
    {
        "content": "<p>Probably <span class=\"user-mention\" data-user-id=\"286004\">@Chad Scherrer</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I wonder why we need the reshape and Float64 in the first reinterpret call, will read the docstring...</p>",
        "id": 279079765,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1650029140
    },
    {
        "content": "<p><code>reshape</code> is nice so that you have 1 column per <code>foo</code>, with rows corresponding to the data of <code>foo</code>.</p>",
        "id": 279143896,
        "sender_full_name": "chriselrod",
        "timestamp": 1650078604
    },
    {
        "content": "<p>To be honest I find it a bit strange that reshape is an argument to the function. Maybe it would be more intuitive to introduce a keyword reshape=true or ascolumns=true in future releases? Can reinterpret accept other functions that are not reshape?</p>",
        "id": 279161690,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1650106024
    },
    {
        "content": "<p>Not sure. Yeah, the <code>reshape</code> argument is weird to me too</p>",
        "id": 279168769,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1650116071
    },
    {
        "content": "<p>If you don't like the reshape you don't have to use it</p>",
        "id": 279173442,
        "sender_full_name": "Mason Protter",
        "timestamp": 1650123367
    },
    {
        "content": "<p>You can just reinterpret it as bools or UInt8s or whatever you like</p>",
        "id": 279173445,
        "sender_full_name": "Mason Protter",
        "timestamp": 1650123386
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">UInt8</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)])</span>\n<span class=\"mi\">32</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">UInt8</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}})</span><span class=\"o\">:</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0xf0</span>\n <span class=\"mh\">0x3f</span>\n <span class=\"mh\">0x02</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n    <span class=\"o\">⋮</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x08</span>\n <span class=\"mh\">0x40</span>\n <span class=\"mh\">0x04</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n <span class=\"mh\">0x00</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0x01</span>\n<span class=\"mh\">0x01</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"n\">buf</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}(</span><span class=\"mf\">1.0000000000000002</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n <span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}(</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 279173470,
        "sender_full_name": "Mason Protter",
        "timestamp": 1650123446
    },
    {
        "content": "<p>Another option is to load a pointer of the given type from the memory. This is more efficient than creating a reinterpreted buffer, but it's not exactly idiomatic.<br>\nSomething like:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"k\">struct</span> <span class=\"kt\">Foo</span>\n           <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">UInt32</span>\n           <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Char</span>\n           <span class=\"n\">z</span><span class=\"o\">::</span><span class=\"kt\">Int64</span>\n       <span class=\"k\">end</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"go\">(55, 1.0)</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">unsafe_load</span><span class=\"p\">(</span><span class=\"kt\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Foo</span><span class=\"p\">}(</span><span class=\"n\">pointer_from_objref</span><span class=\"p\">(</span><span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))))</span>\n<span class=\"go\">Foo(0x00000037, '\\0', 4607182418800017408)</span>\n</code></pre></div>\n<p>If you use <code>Ref</code> + <code>unsafe_load</code>, the allocation will optimize away and it will be a no-op.<br>\nOf course you need to be a bit careful with this:</p>\n<ul>\n<li>Use <code>GC.@preserve</code> judiciously to prevent the GC from messing up your pointers</li>\n<li>This technique can circumvent inner constructors, which can make your code unsound if invalid instances are being created</li>\n<li>Any padding in your structs will also be loaded, which can also create invalid instances</li>\n</ul>",
        "id": 279179488,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1650132415
    }
]