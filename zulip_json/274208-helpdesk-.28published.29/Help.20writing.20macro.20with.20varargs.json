[
    {
        "content": "<p>I can't figure this out...</p>\n<p>I'm writing a macro that takes a variable number of arguments, modifies them, and calls a function on the modified arguments. I can do this if the number of arguments is fixed, but not for varargs. A simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">];</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">ex</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@f</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"go\">1-element Vector{Int64}:</span>\n<span class=\"go\"> 4</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@f</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"go\">1-element Vector{Int64}:</span>\n<span class=\"go\"> 9</span>\n</code></pre></div>\n<p>So far so good. For two arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">ex1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ex2</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">ex1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">ex2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@f2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"go\">2-element Vector{Int64}:</span>\n<span class=\"go\"> 16</span>\n<span class=\"go\"> 25</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@f2</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"go\">2-element Vector{Int64}:</span>\n<span class=\"go\"> 16</span>\n<span class=\"go\"> 25</span>\n</code></pre></div>\n<p>Everything looks fine, I think. Now trying for varargs, one of many unsuccessful attempts:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">fvar</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@fvar</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"go\">3-element Vector{Int64}:</span>\n<span class=\"go\">  4</span>\n<span class=\"go\">  9</span>\n<span class=\"go\"> 16</span>\n</code></pre></div>\n<p>Apparently all is well, but....</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@fvar</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span>\n<span class=\"gr\">ERROR: LoadError: MethodError: no method matching +(::Symbol, ::Int64)</span>\n</code></pre></div>\n<p>How can I solve this?</p>",
        "id": 359508349,
        "sender_full_name": "mbaz",
        "timestamp": 1684448568
    },
    {
        "content": "<p>I _may_ have solved it... I thought that  building the expression itself by hand might work:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">fvar</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:call</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@fvar</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"go\">3-element Vector{Int64}:</span>\n<span class=\"go\">  9</span>\n<span class=\"go\"> 16</span>\n<span class=\"go\"> 25</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@fvar</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span>\n<span class=\"go\">3-element Vector{Int64}:</span>\n<span class=\"go\">  9</span>\n<span class=\"go\"> 16</span>\n<span class=\"go\"> 25</span>\n</code></pre></div>",
        "id": 359512253,
        "sender_full_name": "mbaz",
        "timestamp": 1684450428
    },
    {
        "content": "<p>The problem was that in <code>fvar</code> you wrote <code>args = (modarg(v) for v in ex)</code> instead of <code>args = (:(modarg($v)) for v in ex)</code></p>",
        "id": 359516020,
        "sender_full_name": "Mason Protter",
        "timestamp": 1684452394
    },
    {
        "content": "<p>Also, your macro works in the repl because the variables you're referencing exist in the same scope as the macro was defined, but  it won't work in general without you <code>esc</code>ing anything you want to be resolved in the macro-caller's scope</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">11</span>\n<span class=\"w\">           </span><span class=\"nd\">@fvar</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"go\">3-element Vector{Int64}:</span>\n<span class=\"go\">  9</span>\n<span class=\"go\"> 16</span>\n<span class=\"go\"> 25</span>\n</code></pre></div>",
        "id": 359516406,
        "sender_full_name": "Mason Protter",
        "timestamp": 1684452634
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">fvar2</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))))</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">11</span>\n<span class=\"w\">           </span><span class=\"nd\">@fvar2</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"go\">3-element Vector{Int64}:</span>\n<span class=\"go\"> 100</span>\n<span class=\"go\">  16</span>\n<span class=\"go\">  25</span>\n</code></pre></div>",
        "id": 359516476,
        "sender_full_name": "Mason Protter",
        "timestamp": 1684452670
    },
    {
        "content": "<p>Also, note that your macro here is no different from the function</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">fvar</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">modarg</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>since the <code>modarg</code> is not being run at macroexpansion time but instead being put into the expanded expression</p>",
        "id": 359516719,
        "sender_full_name": "Mason Protter",
        "timestamp": 1684452796
    },
    {
        "content": "<p>Thanks! That works. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 359516778,
        "sender_full_name": "mbaz",
        "timestamp": 1684452829
    },
    {
        "content": "<p>Yeah, in my actual use case <code>modargs</code> is  more complicated -- I need a macro because I'm doing some syntax transformations to the arguments.</p>",
        "id": 359517084,
        "sender_full_name": "mbaz",
        "timestamp": 1684452984
    },
    {
        "content": "<p>Ah, so in that case you probably actually wanted something closer to your original <code>fvar</code>, and not like your 1 or 2 arg examples</p>",
        "id": 359517153,
        "sender_full_name": "Mason Protter",
        "timestamp": 1684453030
    },
    {
        "content": "<p>I think I was close to the right syntax (I used similar code as you did when I used <code>Expr(...)</code>), but I definitely hadn't even started thinking about <code>esc</code> yet.</p>",
        "id": 359517203,
        "sender_full_name": "mbaz",
        "timestamp": 1684453064
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c\"># Syntax transformation instead!</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">fvar3</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">modarg</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@macroexpand</span><span class=\"w\"> </span><span class=\"nd\">@fvar3</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span>\n<span class=\"go\">:(Main.f(x + 1, y + 1, z + 1))</span>\n</code></pre></div>",
        "id": 359517204,
        "sender_full_name": "Mason Protter",
        "timestamp": 1684453065
    },
    {
        "content": "<p>Let me try the actual transformation I want to do</p>",
        "id": 359517311,
        "sender_full_name": "mbaz",
        "timestamp": 1684453106
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">procopts</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@macroexpand</span><span class=\"w\"> </span><span class=\"nd\">@plot</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">grid</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">sin</span>\n<span class=\"go\">:(Gaston.plot((Gaston.expand)(\"grid\" =&gt; true), sin))</span>\n</code></pre></div>\n<p>It works <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 359517651,
        "sender_full_name": "mbaz",
        "timestamp": 1684453317
    },
    {
        "content": "<p><code>procopts</code> is a function that uses <code>MacroTools.jl</code> to convert arguments inside <code>{}</code> to a pair. I got this idea from <code>PgfplotsX.jl</code>.</p>",
        "id": 359517780,
        "sender_full_name": "mbaz",
        "timestamp": 1684453383
    },
    {
        "content": "<p>(writing <code>procopts</code> was also quite an odissey in itself...)</p>",
        "id": 359517820,
        "sender_full_name": "mbaz",
        "timestamp": 1684453421
    },
    {
        "content": "<p>Nice!</p>",
        "id": 359520453,
        "sender_full_name": "Mason Protter",
        "timestamp": 1684455175
    }
]