[
    {
        "content": "<p><strong>How do I tell <a href=\"https://juliahub.com/ui/Packages/General/Rocket\">Rocket.jl</a> that I want to create a subject that consumes one type and produces another?</strong></p>\n<h1>Back Story</h1>\n<ul>\n<li>I've been playing with <a href=\"https://juliahub.com/ui/Packages/General/Rocket\">Rocket.jl</a>, and I've been trying to setup a chain of producers and consumers.</li>\n<li>I've gotten something to work, but I've had to say <code>AbstractStrategy{Any}</code></li>\n<li>I don't know how to tell <a href=\"https://juliahub.com/ui/Packages/General/Rocket\">Rocket.jl</a> that a subtype of AbstractSubject consumes one type and produces another type.</li>\n</ul>\n<h1>What the following code is trying to do</h1>\n<p><a href=\"/user_uploads/7178/Loymi3anCpwJXmaELsLRjnuj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/Loymi3anCpwJXmaELsLRjnuj/image.png\" title=\"image.png\"><img data-original-dimensions=\"583x931\" src=\"/user_uploads/thumbnail/7178/Loymi3anCpwJXmaELsLRjnuj/image.png/840x560.webp\"></a></div><p>Simple.</p>\n<h1>The Code</h1>\n<p>Notice the <code>AbstractSubject{Any}</code>.  I would like to be more specific if possible.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Rocket</span>\n\n<span class=\"nd\">@kwdef</span><span class=\"w\"> </span><span class=\"k\">mutable</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"kt\">IntToFloat64Subject</span><span class=\"w\"> </span><span class=\"o\">&lt;:</span><span class=\"w\"> </span><span class=\"kt\">AbstractSubject</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">subscribers</span><span class=\"o\">::</span><span class=\"kt\">Vector</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">on_subscribe!</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">::</span><span class=\"kt\">IntToFloat64Subject</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actor</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">subscribers</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actor</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">voidTeardown</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">on_complete!</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">::</span><span class=\"kt\">IntToFloat64Subject</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"IntToFloat64Subject Completed!\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">on_next!</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">::</span><span class=\"kt\">IntToFloat64Subject</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c\"># consume Int</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">subscribers</span>\n<span class=\"w\">        </span><span class=\"c\"># produce Float64</span>\n<span class=\"w\">        </span><span class=\"n\">next!</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"nd\">@kwdef</span><span class=\"w\"> </span><span class=\"k\">mutable</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"kt\">Float64ToStringSubject</span><span class=\"w\"> </span><span class=\"o\">&lt;:</span><span class=\"w\"> </span><span class=\"kt\">AbstractSubject</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">subscribers</span><span class=\"o\">::</span><span class=\"kt\">Vector</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">on_subscribe!</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">::</span><span class=\"kt\">Float64ToStringSubject</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actor</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">subscribers</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actor</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">voidTeardown</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">on_complete!</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">::</span><span class=\"kt\">Float64ToStringSubject</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"FloatToStringSubject Completed!\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">on_next!</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">::</span><span class=\"kt\">Float64ToStringSubject</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"&gt; \"</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">subscribers</span>\n<span class=\"w\">        </span><span class=\"c\"># produce Float64</span>\n<span class=\"w\">        </span><span class=\"n\">next!</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"c\"># Setting up the data flow backwards</span>\n<span class=\"n\">fts_subject</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Float64ToStringSubject</span><span class=\"p\">([])</span>\n<span class=\"n\">subscribe!</span><span class=\"p\">(</span><span class=\"n\">fts_subject</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">logger</span><span class=\"p\">(</span><span class=\"s\">\"final\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">itf_subject</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">IntToFloat64Subject</span><span class=\"p\">([])</span>\n<span class=\"n\">subscribe!</span><span class=\"p\">(</span><span class=\"n\">itf_subject</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fts_subject</span><span class=\"p\">)</span>\n\n<span class=\"n\">ints</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">subscribe!</span><span class=\"p\">(</span><span class=\"n\">ints</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">itf_subject</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># This starts the data flow.</span>\n</code></pre></div>\n<h1>Output</h1>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">final</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">1.0</span>\n<span class=\"p\">[</span><span class=\"n\">final</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">2.0</span>\n<span class=\"p\">[</span><span class=\"n\">final</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">3.0</span>\n<span class=\"p\">[</span><span class=\"n\">final</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">4.0</span>\n<span class=\"p\">[</span><span class=\"n\">final</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">5.0</span>\n<span class=\"n\">IntToFloat64Subject</span><span class=\"w\"> </span><span class=\"n\">Completed!</span>\n<span class=\"n\">VoidTeardown</span><span class=\"p\">()</span>\n</code></pre></div>\n<h4>Is there any way around saying <code>AbstractSubject{Any}</code>?</h4>\n<ul>\n<li>Also, am I using Subjects completely wrong?<br>\n    + Should I be using Actors instead?</li>\n<li>I'm new to the library, and I'm still trying to make sense of it.</li>\n<li>Any help is appreciated.</li>\n</ul>",
        "id": 486813482,
        "sender_full_name": "G Gundam",
        "timestamp": 1733700970
    }
]