[
    {
        "content": "<p>Anyone know how to deal with this? I'm trying to use <code>remote_call</code> (or any other form of distributed computing) from within a package and I just can't get it to work because it complains about not being able to find the package.</p>\n<p>Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">Foos</span>\n\n<span class=\"go\">       struct Foo end</span>\n<span class=\"go\">       using Distributed</span>\n<span class=\"go\">       f() = let p = only(addprocs(1))</span>\n<span class=\"go\">           x = remotecall_fetch(p) do</span>\n<span class=\"go\">               Foo()</span>\n<span class=\"go\">           end</span>\n<span class=\"go\">           rmprocs([p])</span>\n<span class=\"go\">           x</span>\n<span class=\"go\">       end</span>\n\n<span class=\"go\">       end</span>\n<span class=\"go\">Main.Foos</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">Foos</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">()</span>\n<span class=\"gr\">ERROR: On worker 2:</span>\n<span class=\"gr\">UndefVarError: `Foos` not defined</span>\n<span class=\"gr\">Stacktrace:</span>\n<span class=\"gr\">  [1] deserialize_module</span>\n<span class=\"gr\">    @ ~/julia-1.10/usr/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:997</span>\n<span class=\"gr\">  [2] handle_deserialize</span>\n<span class=\"gr\">    @ ~/julia-1.10/usr/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:896</span>\n</code></pre></div>",
        "id": 423829044,
        "sender_full_name": "Mason Protter",
        "timestamp": 1709130320
    },
    {
        "content": "<p>You defined <code>Foo</code> in your process (1),  but not the newly added process. Since Julia is nominally typed, and its full name is <code>Foos.Foo</code>, you'll get an error.</p>",
        "id": 423833502,
        "sender_full_name": "Sergio Vargas",
        "timestamp": 1709131594
    },
    {
        "content": "<p>You'd have to import shared types with <code>@everywhere</code></p>",
        "id": 423833539,
        "sender_full_name": "Sergio Vargas",
        "timestamp": 1709131605
    },
    {
        "content": "<p>I don't think that's right. Notice that the error isn't that <code>Foo</code> isn't defined, it's that <code>Foos</code> is not defined</p>",
        "id": 423834792,
        "sender_full_name": "Mason Protter",
        "timestamp": 1709131907
    },
    {
        "content": "<p>Let's step away from the REPL version with a local module and do a package:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt;<span class=\"w\">  </span>cat<span class=\"w\"> </span>Foos/src/Foos.jl\nmodule<span class=\"w\"> </span>Foos\n\nusing<span class=\"w\"> </span>Distributed\n\nf<span class=\"o\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">let</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>only<span class=\"o\">(</span>addprocs<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>remotecall_fetch<span class=\"o\">(</span>p<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"m\">1</span>\n<span class=\"w\">    </span>end\n<span class=\"w\">    </span>rmprocs<span class=\"o\">([</span>p<span class=\"o\">])</span>\n<span class=\"w\">    </span>x\nend\n\nend<span class=\"w\"> </span><span class=\"c1\"># module Foos</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt;<span class=\"w\"> </span>cat<span class=\"w\"> </span>Foos/Project.toml\n<span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Foos\"</span>\n<span class=\"nv\">uuid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"378b42d5-b922-4ee0-b574-33ae726347f8\"</span>\n<span class=\"nv\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n\n<span class=\"o\">[</span>deps<span class=\"o\">]</span>\n<span class=\"nv\">Distributed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"8ba89e20-285c-5b6f-9357-94700520ee1b\"</span>\n</code></pre></div>\n<p>i.e. a very simple little package that just creates a process, runs a function that does nothing but return <code>1</code>, and then deletes that process.</p>\n<p>Now here's what I see if I try to use it:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">julia</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">project</span><span class=\"o\">=./</span><span class=\"n\">Foos</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Foos</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foos</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">()</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">On</span><span class=\"w\"> </span><span class=\"n\">worker</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"kt\">KeyError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"n\">Foos</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">378</span><span class=\"n\">b42d5</span><span class=\"o\">-</span><span class=\"n\">b922</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">ee0</span><span class=\"o\">-</span><span class=\"n\">b574</span><span class=\"o\">-</span><span class=\"mi\">33</span><span class=\"n\">ae726347f8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">getindex</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">dict</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">498</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">expansion</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">267</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">root_module</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1878</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">deserialize_module</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">julia</span><span class=\"o\">-</span><span class=\"mf\">1.10</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.10</span><span class=\"o\">/</span><span class=\"n\">Serialization</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Serialization</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">994</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">handle_deserialize</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">julia</span><span class=\"o\">-</span><span class=\"mf\">1.10</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.10</span><span class=\"o\">/</span><span class=\"n\">Serialization</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Serialization</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">896</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 423836418,
        "sender_full_name": "Mason Protter",
        "timestamp": 1709132330
    },
    {
        "content": "<p>Maybe you need to do <code>using Foos</code> on the worker first?</p>",
        "id": 423839353,
        "sender_full_name": "Sukera",
        "timestamp": 1709133043
    },
    {
        "content": "<p>both your REPL &amp; package MWE share that the name <code>Foos</code> already exists; in the REPL example because it's in <code>Main</code>, in the package example because you have <code>using Foos</code> first</p>",
        "id": 423839565,
        "sender_full_name": "Sukera",
        "timestamp": 1709133107
    },
    {
        "content": "<p>Changing the function to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"n\">addprocs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">remotecall_fetch</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Foos</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">rmprocs</span><span class=\"p\">([</span><span class=\"n\">p</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"n\">x</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>doesn't seem to eliminate the error</p>",
        "id": 423840389,
        "sender_full_name": "Mason Protter",
        "timestamp": 1709133359
    },
    {
        "content": "<p>Hm, okay, so I managed to get my actual usecase working by using what feels like an excessive amount of indirection. I did something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">Foos</span>\n\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Distributed</span>\n\n<span class=\"k\">struct</span> <span class=\"kt\">Foo</span>\n<span class=\"w\">    </span><span class=\"n\">x</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">_f</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"n\">addprocs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">Distributed</span><span class=\"o\">.</span><span class=\"n\">remotecall_eval</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">Main</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Foos</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">Distributed</span><span class=\"o\">.</span><span class=\"n\">remotecall_eval</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">Foos</span><span class=\"o\">.</span><span class=\"n\">_f</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">foo</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"n\">rmprocs</span><span class=\"p\">([</span><span class=\"n\">p</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"n\">x</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">end</span><span class=\"w\"> </span><span class=\"c\"># module Foos</span>\n</code></pre></div>",
        "id": 423842702,
        "sender_full_name": "Mason Protter",
        "timestamp": 1709134040
    },
    {
        "content": "<p>Without all that indirection, I guess it was unhappy about me passing around structs that were defined in <code>Foos</code>, in particular, I needed totally separate calls to <code>remotecall_eval</code> to make it work.</p>",
        "id": 423842788,
        "sender_full_name": "Mason Protter",
        "timestamp": 1709134069
    },
    {
        "content": "<p>very weird</p>",
        "id": 423842809,
        "sender_full_name": "Mason Protter",
        "timestamp": 1709134075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> has marked this topic as resolved.</p>",
        "id": 423844712,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709134542
    },
    {
        "content": "<p>yeah, that's what I was thinking of; you need the additional <code>remotecall_eval</code> for world age purposes, I think</p>",
        "id": 423845844,
        "sender_full_name": "Sukera",
        "timestamp": 1709134845
    }
]