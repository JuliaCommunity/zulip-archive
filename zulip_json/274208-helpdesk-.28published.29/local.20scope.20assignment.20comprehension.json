[
    {
        "content": "<p>Something that has been haunting me for some time. I don't know if it's a gripe, a feature request or just lack of knowledge but:<br>\nThere are cases where I want to do a complicated comprehension.<br>\nIn these cases I just wish there was a way to make the expression more readable by having some local assignments.</p>\n<p>example time</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"c\"># so normally one would do:</span>\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">v</span><span class=\"p\">]</span>\n\n<span class=\"c\"># what I would like to do is:</span>\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span>  <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>you are probably wondering \"Dude, that works!\" but please have some fantasy and imagine that my list has non iteratable elements!<br>\nNormally I default doing something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\"># iterate a single element list</span>\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]]</span>\n</code></pre></div>\n<p>But it feels kind of hacky. I don't want to iterate, I just want to make an assignment.</p>",
        "id": 278827265,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1649855999
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">end</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">v</span>\n<span class=\"p\">]</span>\n</code></pre></div>",
        "id": 278827886,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1649856337
    },
    {
        "content": "<p>That's an interesting one but  would prefer if it was an oneliner.. which get me thinking; how come there is still not a <code>@let</code> or <code>@begin</code> macro. Then one could do:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nd\">@let</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">v</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>I guess this could lead to many parsing problems..</p>",
        "id": 278829755,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1649857260
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">mysuperlongandcomplicateddataretrieval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span> <span class=\"n\">y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"k\">end</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">v</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>then</p>",
        "id": 278830195,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1649857471
    },
    {
        "content": "<p>yes, I considered it but the <code>end</code> term in the middle of the comprehension can be confusing, which is why I though of a macro use case.</p>",
        "id": 278831069,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1649857878
    }
]