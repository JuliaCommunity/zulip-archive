[
    {
        "content": "<p>I'm looking for an iterator (or transducer) that has the following behaviour (basically like <code>Iterators.partition</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">stencil</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n           <span class=\"nd\">@show</span> <span class=\"n\">i</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Does something like this exist somewhere?</p>",
        "id": 255901986,
        "sender_full_name": "Mason Protter",
        "timestamp": 1633212529
    },
    {
        "content": "<p>Maybe <a href=\"https://juliacollections.github.io/IterTools.jl/latest/#partition(xs,-n,-[step])-1\">https://juliacollections.github.io/IterTools.jl/latest/#partition(xs,-n,-[step])-1</a> ?</p>",
        "id": 255905099,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1633215911
    },
    {
        "content": "<p>There's also <a href=\"https://juliafolds.github.io/Transducers.jl/dev/reference/manual/#Transducers.Consecutive\">https://juliafolds.github.io/Transducers.jl/dev/reference/manual/#Transducers.Consecutive</a> if you need to do this operation after some pre-processing (e.g., filtering) and then parallelize it. But it unnecessarily tortures the compiler if you just need to do it on an array. (There probably should be a \"fast pass\" in <a href=\"https://github.com/search?q=Transducers.jl&amp;type=Repositories\">Transducers.jl</a> for this.)</p>",
        "id": 255905296,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1633216128
    },
    {
        "content": "<p>There's also Tim Holy's <a href=\"https://github.com/JuliaArrays/TiledIteration.jl\">https://github.com/JuliaArrays/TiledIteration.jl</a></p>",
        "id": 255905318,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1633216158
    },
    {
        "content": "<p>Thanks! I didn't realize that <code>partition(v, n, 1)</code> did exactly what I wanted. Too bad <code>Iterators.partition</code> doesnt do this</p>",
        "id": 255907303,
        "sender_full_name": "Mason Protter",
        "timestamp": 1633218556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> has marked this topic as resolved.</p>",
        "id": 255911044,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633222636
    }
]