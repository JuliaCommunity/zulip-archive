[
    {
        "content": "<p>I'd like to take a sample of size N from a population that meets certain diversity requirements (e.g. at least X women, at least Y religious). I can't use stratified sampling naively because the groups overlap and the size of the overlap is unknown. Also X + Y + ... &gt; N, so some sampled people must be in multiple groups or the requirements cannot be met.</p>\n<p>This sample is for appointments to a political council by sortition, so as much as possible the algorithm should be understandable and at least arguably fair.</p>\n<p>Any ideas?</p>\n<p>Existing (problematic) ideas:</p>\n<p>1) Make a kind of artificial stratified sample set by identifying all of the non-overlapping groups (e.g. gay religious women, straight religious men, etc) and their current size, then calculating what weights they should have to meet my population-level requirements (probably iteratively adjusting them)</p>\n<p>2) Randomly select candidates until diversity requirements are met then, while the sample size is too large, randomly remove candidates that are not in a protected group. This is not guaranteed to terminate because we might not keep enough people who are in overlapping groups, but we can just try a few times.</p>",
        "id": 246549496,
        "sender_full_name": "Colin Caine",
        "timestamp": 1626762670
    },
    {
        "content": "<p>You might be able to come up with a genetic algorithm / Monte Carlo sampler that’s a better version of option 2. Eg: “Score” the current state on all the desiderata and assign current set members probability of being replaced by someone outside the set. You could also weight the members outside the set suitably to increase probability of desirable scores being met. Hopefully such an iterative (Gibbs Sampling?) process converges in a reasonable time.</p>",
        "id": 246665914,
        "sender_full_name": "Siva Swaminathan",
        "timestamp": 1626826528
    },
    {
        "content": "<p>In the end I implemented two approaches. One of them just samples N people, checks if sample meets the requirements, and if not, throws them out. And the other was (2) from above.</p>\n<p>2) was much faster, typically only taking one or two attempts on my dataset.</p>\n<p>The pick N, throw out and try again approach worked as well, but needed quite a few more attempts. Assuming it can find an answer on the complete dataset, I will use this one because it's easier to prove that it is fair (each of the valid sets has an equal chance of being found).</p>",
        "id": 246762408,
        "sender_full_name": "Colin Caine",
        "timestamp": 1626893379
    },
    {
        "content": "<p>I think you'd get the same probability distribution if you do a less naive search:</p>\n<ul>\n<li>sample first from the group with minimum size until you have enough people</li>\n<li>then sample any additional people required for the group with next smallest size (you might not need any because of overlaps)</li>\n<li>continue for all groups, error if the sample gets too big, if you run out of groups with specified minimum representation then fill the remainder with a sample from the whole population.</li>\n</ul>\n<p>I think that's probably a simple enough algorithm to perform manually and would hopefully converge fast enough that you wouldn't get too bored doing it.</p>",
        "id": 246763821,
        "sender_full_name": "Colin Caine",
        "timestamp": 1626894069
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"284902\">@Bogumił Kamiński</span> for suggesting just sampling N people and then checking if they meet the requirements. I was concerned that this would not work for my set of requirements, but it was obviously worthwhile to check!</p>",
        "id": 246763998,
        "sender_full_name": "Colin Caine",
        "timestamp": 1626894132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"274427\">Colin Caine</span> has marked this topic as resolved.</p>",
        "id": 246764064,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626894168
    },
    {
        "content": "<p>Thanks for coming back and documenting the solution you ended up with and the reasons why! It was interesting to read up on it</p>",
        "id": 248385614,
        "sender_full_name": "Kim Paolo Laberinto",
        "timestamp": 1628100229
    }
]