[
    {
        "content": "<p>Is it possible to pipe text in realtime from one Julia process to another using <a href=\"https://juliahub.com/ui/Packages/General/Distributed\">Distributed.jl</a>?</p>\n<p>I'd like output to become available in the parent process as soon as it is produced in the child process and not have to wait for a pipe or channel to be closed.</p>\n<p>Bonus points for being able to use the ::IO interface on both ends.</p>",
        "id": 432364772,
        "sender_full_name": "Lilith Hafner",
        "timestamp": 1712708899
    },
    {
        "content": "<p>You could build something with <a href=\"https://www.man7.org/linux/man-pages/man7/shm_overview.7.html\">shared memory</a>, but that's probably quite a bit more work than necessary. The \"canonical\" IO-like interface for inter process communication is a <code>Pipe</code>, which lets the OS handle buffering etc. <a href=\"https://juliahub.com/ui/Packages/General/Distributed\">Distributed.jl</a> itself doesn't provide such functionality, other than through <code>RemoteChannel</code> (the default output streams of workers are used for setup/regular IO only).</p>",
        "id": 432426582,
        "sender_full_name": "Sukera",
        "timestamp": 1712732738
    },
    {
        "content": "<p>I don't think a channel needs to be closed for the data to be available to other processes?</p>",
        "id": 432562566,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1712773716
    },
    {
        "content": "<p>Yeah, so how do I redirect stdout to a channel?</p>",
        "id": 432572359,
        "sender_full_name": "Lilith Hafner",
        "timestamp": 1712777630
    },
    {
        "content": "<p>This isn't really my wheelhouse, but loosely inspired by how Pluto captures stdout (<a href=\"https://github.com/fonsp/Pluto.jl/blob/main/src/runner/PlutoRunner/src/PlutoRunner.jl#L2772-L2845\">https://github.com/fonsp/Pluto.jl/blob/main/src/runner/PlutoRunner/src/PlutoRunner.jl#L2772-L2845</a>) + some experience with channels, the following seems to work (obviously replace Channel with RemoteChannel for multiprocessing):</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Channel</span><span class=\"p\">{</span><span class=\"kt\">UInt8</span><span class=\"p\">}()</span>\n<span class=\"n\">pipe</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Pipe</span><span class=\"p\">()</span>\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">link_pipe!</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">reader_supports_async</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writer_supports_async</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n\n<span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"n\">pipe_reader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_reader</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">eof</span><span class=\"p\">(</span><span class=\"n\">pipe_reader</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">readavailable</span><span class=\"p\">(</span><span class=\"n\">pipe_reader</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">put!</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Pipe closed, pipe reader closing channel\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Pipe reader done\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ch</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Pipe writer done\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">redirect_stdout</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_writer</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Main task closing pipe\"</span><span class=\"p\">)</span>\n<span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_writer</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">\"pipe2channel.jl\"</span><span class=\"p\">)</span>\n<span class=\"go\">Main task closing pipe</span>\n<span class=\"go\">72</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"mi\">101</span>\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"mi\">108</span>\n<span class=\"go\">108</span>\n<span class=\"go\">111</span>\n<span class=\"go\">44</span>\n<span class=\"go\">32</span>\n<span class=\"go\">119</span>\n<span class=\"go\">111</span>\n<span class=\"go\">114</span>\n<span class=\"go\">108</span>\n<span class=\"go\">100</span>\n<span class=\"go\">33</span>\n<span class=\"go\">10</span>\n<span class=\"go\">Pipe closed, pipe reader closing channel</span>\n<span class=\"go\">Pipe reader done</span>\n<span class=\"go\">Pipe writer done</span>\n</code></pre></div>",
        "id": 432582737,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1712782134
    },
    {
        "content": "<p>Here's a nicer example using <code>RemoteChannel</code>. Note that there's a bug in <code>RemoteChannel</code>s implementation of the iterator interface, so you can't simply do <code>bytes = collect(ch)</code>. Fixed in this PR:  <a href=\"https://github.com/JuliaLang/Distributed.jl/pull/100\">https://github.com/JuliaLang/Distributed.jl/pull/100</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Distributed</span>\n\n<span class=\"nd\">@everywhere</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">redirect_stdout_to_channel</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">pipe</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Pipe</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">link_pipe!</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">reader_supports_async</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writer_supports_async</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nd\">@sync</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">            </span><span class=\"n\">pipe_reader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_reader</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">eof</span><span class=\"p\">(</span><span class=\"n\">pipe_reader</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">readavailable</span><span class=\"p\">(</span><span class=\"n\">pipe_reader</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"n\">put!</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"k\">end</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">pipe_writer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_writer</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">redirect_stdout</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pipe_writer</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">pipe_writer</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RemoteChannel</span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Channel</span><span class=\"p\">{</span><span class=\"kt\">UInt8</span><span class=\"p\">}())</span>\n\n<span class=\"nd\">@sync</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">UInt8</span><span class=\"p\">[]</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ch</span>\n<span class=\"w\">            </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"nd\">@show</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"nd\">@sync</span><span class=\"w\"> </span><span class=\"nd\">@spawnat</span><span class=\"w\"> </span><span class=\"ss\">:any</span><span class=\"w\"> </span><span class=\"n\">redirect_stdout_to_channel</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Hello from process </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">myid</span><span class=\"p\">())</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">\"pipe2channel.jl\"</span><span class=\"p\">)</span>\n<span class=\"go\">String(bytes) = \"Hello from process 2\\n\"</span>\n</code></pre></div>",
        "id": 432601799,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1712790073
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 432611734,
        "sender_full_name": "Lilith Hafner",
        "timestamp": 1712797681
    },
    {
        "content": "<p>For completeness, since you asked for IO interface on both ends:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Distributed</span>\n\n<span class=\"nd\">@everywhere</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">redirect_stdout_to_channel</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">pipe</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Pipe</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">link_pipe!</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">reader_supports_async</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writer_supports_async</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nd\">@sync</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">eof</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_reader</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">readavailable</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_reader</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">))</span>\n<span class=\"w\">                    </span><span class=\"n\">put!</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"k\">end</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">redirect_stdout</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_writer</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_writer</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">redirect_stdin_from_channel</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">pipe</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Pipe</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">link_pipe!</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">reader_supports_async</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writer_supports_async</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nd\">@sync</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ch</span>\n<span class=\"w\">                </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_writer</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">            </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_writer</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">redirect_stdin</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pipe_reader</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"nd\">@sync</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RemoteChannel</span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Channel</span><span class=\"p\">{</span><span class=\"kt\">UInt8</span><span class=\"p\">}(</span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"n\">redirect_stdin_from_channel</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">eof</span><span class=\"p\">(</span><span class=\"nb\">stdin</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nd\">@show</span><span class=\"w\"> </span><span class=\"n\">readline</span><span class=\"p\">(</span><span class=\"nb\">stdin</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"nd\">@sync</span><span class=\"w\"> </span><span class=\"nd\">@spawnat</span><span class=\"w\"> </span><span class=\"ss\">:any</span><span class=\"w\"> </span><span class=\"n\">redirect_stdout_to_channel</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Hello from process </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">myid</span><span class=\"p\">())</span><span class=\"s\"> 👷\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"We've got cookies 🍪\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">\"pipethroughchannel.jl\"</span><span class=\"p\">)</span>\n<span class=\"go\">readline(stdin) = \"Hello from process 2 👷\"</span>\n<span class=\"go\">readline(stdin) = \"We've got cookies 🍪\"</span>\n<span class=\"go\">Task (done) @0x00007b74e6e43d00</span>\n</code></pre></div>",
        "id": 432821930,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1712891586
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 432912093,
        "sender_full_name": "Lilith Hafner",
        "timestamp": 1712930877
    }
]