[
    {
        "content": "<p>In <a href=\"https://github.com/search?q=Meshes.jl&amp;type=Repositories\">Meshes.jl</a> we have an implementation of == for Point that simply fallsback to isapprox:</p>\n<p><a href=\"https://github.com/JuliaGeometry/Meshes.jl/blob/b2586c911a3d5f04cb8ea5ceff37eb9bd661b308/src/points.jl#L142-L155\">https://github.com/JuliaGeometry/Meshes.jl/blob/b2586c911a3d5f04cb8ea5ceff37eb9bd661b308/src/points.jl#L142-L155</a></p>\n<p>By reading the docs of isequal, I learned that we also need to define hash(::Point, h) so that the isequal behaves properly in Set and Dict, etc.</p>\n<p>How should I define the hash function for Point in this context of geometric processing? How do you usually implement hash in general?</p>",
        "id": 344499086,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1679754146
    },
    {
        "content": "<p><a href=\"https://softwareengineering.stackexchange.com/questions/391100/how-to-implement-float-hashing-with-approximate-equality\">https://softwareengineering.stackexchange.com/questions/391100/how-to-implement-float-hashing-with-approximate-equality</a></p>",
        "id": 344532228,
        "sender_full_name": "jar",
        "timestamp": 1679765428
    },
    {
        "content": "<p>Very educative thread <span class=\"user-mention\" data-user-id=\"326776\">@jar</span> thanks for sharing. We will probably refactor some ideas in <a href=\"https://github.com/search?q=Meshes.jl&amp;type=Repositories\">Meshes.jl</a> accordingly.</p>",
        "id": 344653926,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1679834744
    }
]