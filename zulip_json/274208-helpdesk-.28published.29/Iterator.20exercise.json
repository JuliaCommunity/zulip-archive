[
    {
        "content": "<p>I was reading <a href=\"http://slendermeans.org/julia-iterators.html\">this </a> blog trying to understand how iterators work </p>\n<p>I tried to adapt the following script using the iterate function in place of start (), next () and done () . With some difficulty, but in the end I succeeded. </p>\n<p>#######<br>\n Jeff Bezanson • 8 years ago</p>\n<p>Very nice and thorough discussion of julia iterators!</p>\n<p>I'm surprised the fibonacci example uses mutation, since it is very naturally functional:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">immutable</span> <span class=\"n\">Fibs</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibs</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">next</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibs</span><span class=\"p\">,</span> <span class=\"n\">st</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n<span class=\"n\">done</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibs</span><span class=\"p\">,</span> <span class=\"n\">st</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">false</span>\n</code></pre></div>\n<p>Then you can do e.g. <code>take(Fibs(), 10)</code> (using the Iterators package).</p>\n<p>#################</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Fibs</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibs</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibs</span><span class=\"p\">,</span> <span class=\"n\">st</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n\n<span class=\"k\">using</span> <span class=\"n\">IterTools</span>\n\n<span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">takestrict</span><span class=\"p\">(</span><span class=\"n\">Fibs</span><span class=\"p\">(),</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I tried later to define a non-infinite iterator, as follows: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Fibn</span>\n    <span class=\"n\">n</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">ϕ</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">fb</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"n\">trunc</span><span class=\"p\">(((</span><span class=\"o\">-</span><span class=\"n\">ϕ</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"n\">n</span> <span class=\"o\">-</span><span class=\"n\">ϕ</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">/</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))</span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">Fibn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span>\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">,</span> <span class=\"n\">st</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">fb</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]))</span> <span class=\"o\">:</span> <span class=\"nb\">nothing</span>\n\n<span class=\"k\">using</span> <span class=\"n\">IterTools</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I just wanted to do an exercise on iterators, it's not meant to be a solution to some real problem. <br>\nI was unable to fix things to get the collect () function to work though.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>How should I do instead of ...? </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span>\n</code></pre></div>",
        "id": 258832192,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1635007595
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"go\">10-element Vector{Any}:</span>\n<span class=\"go\">  0</span>\n<span class=\"go\">  1</span>\n<span class=\"go\">  1</span>\n<span class=\"go\">  2</span>\n<span class=\"go\">  3</span>\n<span class=\"go\">  5</span>\n<span class=\"go\">  8</span>\n<span class=\"go\"> 13</span>\n<span class=\"go\"> 21</span>\n<span class=\"go\"> 34</span>\n</code></pre></div>",
        "id": 258834054,
        "sender_full_name": "Sundar R",
        "timestamp": 1635010063
    },
    {
        "content": "<p>tanks! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 258834190,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1635010211
    },
    {
        "content": "<p><code>length(f::Fibn)=f.n</code>creates a <code>Main.length</code>, which is why that didn't work</p>",
        "id": 258834208,
        "sender_full_name": "Sundar R",
        "timestamp": 1635010251
    },
    {
        "content": "<p>As an alternative to using the Base prefix, could I import the functions of which I need to define a new method?<br>\nSo</p>\n<p>import Base: iterate, eltype, length, size, peek</p>",
        "id": 258834294,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1635010384
    },
    {
        "content": "<p>yes</p>",
        "id": 258835002,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1635011469
    },
    {
        "content": "<p>this is the version without bothering with Binet's formula </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Fibn</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">}</span>\n    <span class=\"n\">n</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n<span class=\"k\">end</span>\n<span class=\"k\">import</span> <span class=\"n\">Base</span><span class=\"o\">:</span> <span class=\"n\">iterate</span><span class=\"p\">,</span> <span class=\"n\">length</span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">Fibn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span>\n<span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibn</span><span class=\"p\">,</span> <span class=\"n\">st</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">:</span> <span class=\"nb\">nothing</span>\n<span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 258844394,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1635025881
    },
    {
        "content": "<p>Nice!</p>",
        "id": 258846941,
        "sender_full_name": "Mason Protter",
        "timestamp": 1635029742
    },
    {
        "content": "<p>By the way the type parameter you used is a bit misleading. It defines a parameter named \"<code>Int</code>\" that can be any type</p>",
        "id": 258847539,
        "sender_full_name": "Mason Protter",
        "timestamp": 1635030655
    },
    {
        "content": "<p>Here is the naïve way one might translate this to <a href=\"https://github.com/search?q=Transducers.jl&amp;type=Repositories\">Transducers.jl</a> speak:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">Transducers</span><span class=\"p\">;</span> <span class=\"k\">using</span> <span class=\"n\">Transducers</span><span class=\"o\">:</span> <span class=\"nd\">@next</span><span class=\"p\">,</span> <span class=\"n\">complete</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"kt\">Fibnt</span>\n           <span class=\"n\">n</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n       <span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">Transducers</span><span class=\"o\">.</span><span class=\"n\">__foldl__</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fibnt</span><span class=\"p\">)</span>\n           <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"nd\">@next</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n           <span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n           <span class=\"k\">while</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span>\n               <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"nd\">@next</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n               <span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">complete</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n       <span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">),</span> <span class=\"n\">Fibnt</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">))</span>\n<span class=\"mi\">17</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n   <span class=\"mi\">0</span>\n   <span class=\"mi\">1</span>\n   <span class=\"mi\">1</span>\n   <span class=\"mi\">2</span>\n   <span class=\"mi\">3</span>\n   <span class=\"mi\">5</span>\n   <span class=\"mi\">8</span>\n  <span class=\"mi\">13</span>\n  <span class=\"mi\">21</span>\n  <span class=\"mi\">34</span>\n  <span class=\"mi\">55</span>\n  <span class=\"mi\">89</span>\n <span class=\"mi\">144</span>\n <span class=\"mi\">233</span>\n <span class=\"mi\">377</span>\n <span class=\"mi\">610</span>\n <span class=\"mi\">987</span>\n</code></pre></div>",
        "id": 258848501,
        "sender_full_name": "Mason Protter",
        "timestamp": 1635032424
    },
    {
        "content": "<p>This gives you a lot of things for free, like an efficient implementation of the sum of the sines of the first 5 Fibonacci numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">foldl</span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">,</span> <span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">),</span> <span class=\"n\">Fibnt</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"mf\">2.733359404501342</span>\n</code></pre></div>",
        "id": 258848585,
        "sender_full_name": "Mason Protter",
        "timestamp": 1635032604
    },
    {
        "content": "<p>Tanks @Mason.<br>\nIn fact I don't know well the syntax of structures and types (I went a little naively, maybe too much ...)<br>\nI'll try to study your example once I understand how the iterate interface works.<br>\nFor example, I don't know what's wrong with the collect (f (10)) part in the following script - the rest seems to work fine.<br>\nIt seems that the iterate function that calls collect is different from the ones defined by me.<br>\nCan't I change the position of the parameters (itr and status)?<br>\nMust these parameters necessarily be two and in the above order? </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Fib</span>\n    <span class=\"n\">n</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">Fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fib</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span>\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fib</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">,</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Fib</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">?</span> <span class=\"p\">((</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">:</span> <span class=\"nb\">nothing</span>\n<span class=\"c\"># this seems work</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f1</span><span class=\"o\">=</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f2</span><span class=\"o\">=</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f3</span><span class=\"o\">=</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c\">#this not</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Fib</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first thing I'm not sure I understand well is the following definition:  </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">Fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 258865063,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1635061077
    },
    {
        "content": "<blockquote>\n<p><code>Base.iterate(st,f::Fib) = st[3] &lt; f.n ? ((st[2], st[1]+st[2],st[3]+1),st[2]) : nothing</code></p>\n</blockquote>\n<p>This is the wrong argument order. <code>f::Fib</code> needs to be the first argument.</p>",
        "id": 258880270,
        "sender_full_name": "Simeon Schaub",
        "timestamp": 1635084106
    },
    {
        "content": "<p>I apologize in advance if I say nonsense: I proceed a little by analogies.<br>\nI have not explicitly seen the constraint that the arguments to iterate (args ...) must be 1 or 2 and in the order itr, state.<br>\nBut I am aware that thinks are like this ( (that's why I asked the questions on these aspects at the beginning of the previous message),<br>\nI wanted to understand if it was just a convention or a strict necessity.<br>\nThe hand-made simulation of the iterative calls of the iterate function that I have defined seems to work.<br>\nCollect () instead seems to expect another function / method iterate.<br>\nThere is a way to force the function to zero type<br>\nBase.iterate (f :: Fib) = ((0, 1, 1), 0)<br>\nso that it is of type Fib?<br>\nThat is to have<br>\nBase.iterate (f :: Fib) = ((0, 1, 1), zero (Fib)).<br>\nWould this force collect () to call the iterate function with the arguments reversed?</p>",
        "id": 258886582,
        "sender_full_name": "rocco sprmnt21",
        "timestamp": 1635093329
    },
    {
        "content": "<p>check out <a href=\"https://docs.julialang.org/en/v1/manual/interfaces/#man-interface-iteration\">https://docs.julialang.org/en/v1/manual/interfaces/#man-interface-iteration</a> for you questions about the iteration API</p>",
        "id": 258887027,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1635094065
    }
]