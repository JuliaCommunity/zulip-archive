[
    {
        "content": "<p>Should I be able to cycle through Pkg.([add, develop, free, rm]) with either unregistered <br>\nor local packages?<br>\n(That was notation not Julia)<br>\nPkg.free() seems to fall-over.</p>",
        "id": 263393648,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1638421721
    },
    {
        "content": "<p>What do you mean by cycle through? Usually when you run Julia in the folder of the Repo of the local (unregistered) package you can do <code>] add .</code> to add it? Similarly develop or rm (I have not tried free)</p>",
        "id": 263463433,
        "sender_full_name": "Ronny Bergmann",
        "timestamp": 1638462476
    },
    {
        "content": "<p>you mean should you be able to add, develop, free or rm unregistered packages? Yes, though <code>free</code> will probably only do something after <code>pin</code></p>",
        "id": 263465123,
        "sender_full_name": "Sukera",
        "timestamp": 1638463221
    },
    {
        "content": "<p>This is the way it goes with 1.6.4:<br>\n<a href=\"https://gist.github.com/j-fu/9deaa9d117e617c00a8e37bb20ad30af\">https://gist.github.com/j-fu/9deaa9d117e617c00a8e37bb20ad30af</a></p>\n<p>That means that one needs to replace <code>free</code> by <code>rm</code> +<code>add</code>.   It doesn't seem to be  a bug. And no, <code>pin</code> doesn't change this (tried).</p>",
        "id": 263483428,
        "sender_full_name": "j-fu",
        "timestamp": 1638470929
    },
    {
        "content": "<p>ah, I see what you mean now</p>",
        "id": 263485144,
        "sender_full_name": "Sukera",
        "timestamp": 1638471684
    },
    {
        "content": "<p>In my 1.8-DEV branch, I get</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nd\">@v1</span><span class=\"mf\">.8</span><span class=\"p\">)</span> <span class=\"n\">pkg</span><span class=\"o\">&gt;</span> <span class=\"n\">free</span> <span class=\"n\">BigNums</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">free</span> <span class=\"n\">unregistered</span> <span class=\"n\">package</span> <span class=\"sb\">`BigNums [0882b250]`</span>\n</code></pre></div>",
        "id": 263485177,
        "sender_full_name": "Sukera",
        "timestamp": 1638471700
    },
    {
        "content": "<p>I think the reason is that <code>add</code> of a local path doesn't have any idea which versions of a package exist - after all, that is managed by the registry</p>",
        "id": 263485360,
        "sender_full_name": "Sukera",
        "timestamp": 1638471763
    },
    {
        "content": "<p>so if you'd do <code>free</code> of an unregistered package you've <code>dev</code>ed, it has no idea what to fall back to - there is no dependency resolution to run, precisely because it's not registered</p>",
        "id": 263485516,
        "sender_full_name": "Sukera",
        "timestamp": 1638471829
    },
    {
        "content": "<p>though one way to possibly alleviate that is by using something like <a href=\"https://github.com/search?q=LocalRegistry.jl&amp;type=Repositories\">LocalRegistry.jl</a></p>",
        "id": 263485672,
        "sender_full_name": "Sukera",
        "timestamp": 1638471868
    },
    {
        "content": "<p>Sure, <a href=\"https://github.com/search?q=LocalRegistry.jl&amp;type=Repositories\">LocalRegistry.jl</a> can help to manage this. I didn't try it out in this particular situation, but it is not complicated to use and it can  help  to take advantage of the  Pkg resolver etc. with packages developed in an organization or at early development stages. AFAIK one e.g. can register 0.0.x versions  locally, and starting with 0.1.0 register in General, and Pkg will handle this smoothly.</p>",
        "id": 263487335,
        "sender_full_name": "j-fu",
        "timestamp": 1638472656
    }
]