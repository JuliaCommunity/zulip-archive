[
    {
        "content": "<p>I guess, I am missing something obvious, but is there any way to destructure a <code>Pair</code> in functions like <code>mean</code>, <code>sum</code> etc?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"c\"># works</span>\n<span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c\"># not works</span>\n<span class=\"n\">mean</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Writing <code>y[2]</code> doesn't look very clean</p>",
        "id": 243488319,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1624352182
    },
    {
        "content": "<p><code>mean( ((k, v),) -&gt; v, x)</code></p>",
        "id": 243488563,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1624352366
    },
    {
        "content": "<p>Ah, good! Thank you.<br>\nBut now I am thinking, that for such short functions, <code>y[2]</code> is not that bad :-)</p>",
        "id": 243488828,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1624352530
    },
    {
        "content": "<p>Too many brackets.</p>",
        "id": 243488854,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1624352548
    },
    {
        "content": "<p>See also <code>first</code> and <code>last</code>, as in <code>mean(y -&gt; last(y), x)</code></p>",
        "id": 243602775,
        "sender_full_name": "Alex Ames",
        "timestamp": 1624417503
    },
    {
        "content": "<p>There's also</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"n\">v</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>if the <code>((k, v),) -&gt; v</code> syntax is too hard to read</p>",
        "id": 243608961,
        "sender_full_name": "Mason Protter",
        "timestamp": 1624426772
    },
    {
        "content": "<p>It's not to hard, it's just lengthy.</p>",
        "id": 243627143,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1624440825
    },
    {
        "content": "<p>I wonder, is there any explanation, why <code>mean((k, v) -&gt; v, d)</code> is not working as expected? Is it a bug or a feature?</p>",
        "id": 243627236,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1624440869
    },
    {
        "content": "<p><code>(k, v) -&gt; ...</code> is how you define a <em>two-argument</em> anonymous function.</p>",
        "id": 243627333,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1624440931
    },
    {
        "content": "<p>Ah, you are right, it's one argument-two elements function.</p>",
        "id": 243627903,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1624441295
    },
    {
        "content": "<p>Yes, then <code>((k, v), )</code> make sense.</p>",
        "id": 243627914,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1624441303
    }
]