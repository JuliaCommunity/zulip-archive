[
    {
        "content": "<p>Hey everyone, I was wondering if there was an efficient (\"canonical\") way to traverse a dictionary with a JSON like structure. For example, I have a dictionary with an array of dictionaries that sometimes don't have the same keys. I then need to iterate over these dictionaries and check if an specific key has a certain value. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"k\">in</span> <span class=\"n\">cells</span>\n  <span class=\"k\">if</span> <span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"s\">\"key1\"</span><span class=\"p\">][</span><span class=\"s\">\"key2\"</span><span class=\"p\">][</span><span class=\"s\">\"key3\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nb\">true</span>\n     <span class=\"c\"># do stuff</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The issue is that sometimes the cell won't have either \"key1\", or \"key2\" or \"key3\", so a simple <code>get(cell, key1, false)</code> won't work. Of course, I could always write a bunch of if statements, but I was wondering if there was a smarter and more direct way of doing this.</p>",
        "id": 258036516,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1634566973
    },
    {
        "content": "<p>Well, it's hardly elegant, but you can chain <code>get</code>s by putting empty <code>Dict</code>s in instead of <code>false</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"s\">\"key1\"</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">()),</span> <span class=\"s\">\"key2\"</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">()),</span> <span class=\"s\">\"key3\"</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"value\"</span>\n  <span class=\"c\"># Do stuff</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Or, perhaps marginally less inelegant:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">cell</span> <span class=\"o\">|&gt;</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">\"key1\"</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">())</span> <span class=\"o\">|&gt;</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">\"key2\"</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">())</span> <span class=\"o\">|&gt;</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">\"key3\"</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"value\"</span>\n  <span class=\"c\"># Do something</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 258049230,
        "sender_full_name": "Richard Reeve",
        "timestamp": 1634571650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280285\">Richard Reeve</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Traversing.20Nested.20Dictionary/near/258049230\">said</a>:</p>\n<blockquote>\n<p>Well, it's hardly elegant, but you can chain <code>get</code>s by putting empty <code>Dict</code>s in instead of <code>false</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"s\">\"key1\"</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">()),</span> <span class=\"s\">\"key2\"</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">()),</span> <span class=\"s\">\"key3\"</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"value\"</span>\n  <span class=\"c\"># Do stuff</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Or, perhaps marginally less inelegant:</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">cell</span> <span class=\"o\">|&gt;</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">\"key1\"</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">())</span> <span class=\"o\">|&gt;</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">\"key2\"</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">())</span> <span class=\"o\">|&gt;</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">\"key3\"</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"value\"</span>\n  <span class=\"c\"># Do something</span>\n<span class=\"k\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, the empty Dict seems like a good idea. Putting it in a function and thus allowing an arbitrary number of keys looks like a nice work around.</p>",
        "id": 258049749,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1634571851
    },
    {
        "content": "<p>You may write your own <code>get</code> function, which supports nested getting.</p>",
        "id": 258052545,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1634572837
    },
    {
        "content": "<p>Is better then <code>Dict()</code>, since it will be less allocating and as such giving less pressure to gc.</p>",
        "id": 258052684,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1634572895
    },
    {
        "content": "<p>Can you give an example?</p>",
        "id": 258055287,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1634573823
    },
    {
        "content": "<p>I'm trying to write a get function that parses the nested dict, but I'm not finding a clever way of doing so.</p>",
        "id": 258055385,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1634573853
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">nested_get</span><span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">::</span><span class=\"kt\">AbstractVector</span><span class=\"p\">,</span> <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"nb\">nothing</span><span class=\"p\">)</span>\n         <span class=\"k\">if</span> <span class=\"n\">isempty</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n           <span class=\"k\">return</span> <span class=\"n\">dict</span>\n         <span class=\"k\">end</span>\n         <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">popfirst!</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n         <span class=\"k\">if</span> <span class=\"n\">haskey</span><span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n           <span class=\"k\">return</span> <span class=\"n\">nested_get</span><span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">],</span> <span class=\"n\">keys</span><span class=\"p\">)</span>\n         <span class=\"k\">end</span>\n         <span class=\"k\">return</span> <span class=\"n\">default</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">nested_get</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">nested_get</span><span class=\"p\">(</span><span class=\"n\">non_dict</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">::</span><span class=\"kt\">AbstractVector</span><span class=\"p\">,</span> <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"nb\">nothing</span><span class=\"p\">)</span>\n         <span class=\"k\">if</span> <span class=\"n\">isempty</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n           <span class=\"k\">return</span> <span class=\"n\">non_dict</span>\n         <span class=\"k\">end</span>\n         <span class=\"k\">return</span> <span class=\"n\">default</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">nested_get</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">4</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}(</span><span class=\"s\">\"a\"</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">entry</span><span class=\"o\">:</span>\n  <span class=\"s\">\"a\"</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">nested_get</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"key1\"</span><span class=\"p\">,</span> <span class=\"s\">\"key2\"</span><span class=\"p\">,</span> <span class=\"s\">\"key3\"</span><span class=\"p\">])</span> <span class=\"o\">===</span> <span class=\"nb\">nothing</span>\n<span class=\"nb\">true</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">cells</span><span class=\"p\">[</span><span class=\"s\">\"key1\"</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"s\">\"key2\"</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"s\">\"key3\"</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">entry</span><span class=\"o\">:</span>\n  <span class=\"s\">\"key2\"</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"s\">\"key3\"</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">nested_get</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"key1\"</span><span class=\"p\">,</span> <span class=\"s\">\"key2\"</span><span class=\"p\">,</span> <span class=\"s\">\"key3\"</span><span class=\"p\">])</span>\n<span class=\"mi\">1</span>\n</code></pre></div>\n<p>So it'll return <code>nothing</code> if there's no match at any point, and it'll return the value if there's a full match. Something like that?</p>",
        "id": 258060614,
        "sender_full_name": "Richard Reeve",
        "timestamp": 1634575667
    },
    {
        "content": "<p>It's more complicated than what I suggested originally, but Andrey is right that this is a better solution (assuming that's what he had in mind!).</p>",
        "id": 258061099,
        "sender_full_name": "Richard Reeve",
        "timestamp": 1634575862
    },
    {
        "content": "<p>Yes, that was the idea.<br>\nInstead of nothing you can provide default value, as in usual <code>get</code> function.</p>",
        "id": 258064489,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1634577061
    },
    {
        "content": "<p>Oh!</p>",
        "id": 258064517,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1634577074
    },
    {
        "content": "<p>You did :-)</p>",
        "id": 258064528,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1634577079
    },
    {
        "content": "<p>Yes, I just updated it to do that!</p>",
        "id": 258064532,
        "sender_full_name": "Richard Reeve",
        "timestamp": 1634577079
    },
    {
        "content": "<p>You can use splatting instead of vector, but this is just a matter of taste.</p>",
        "id": 258064706,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1634577134
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"280285\">@Richard Reeve</span> , it works beautifully. I actually prefer the vector of keys than the splatting. :)<br>\nIt gives a sense that the order is important (which it is), while just splatting gives me the sense that they are somehow parallel.</p>",
        "id": 258075194,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1634581201
    },
    {
        "content": "<p>This function should be in Base, it's very neat, and I constantly need something like it.</p>",
        "id": 258075437,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1634581294
    },
    {
        "content": "<p>And it fits perfectly as another multiple dispatch for <code>get</code>.</p>",
        "id": 258075642,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1634581356
    },
    {
        "content": "<p>If we do some type piracy, then vector gives funny notation<br>\n<code>d[[\"key1\", \"key2\", \"key3\"]]</code>, while splatting <code>d[\"key1\", \"key2\", \"key3\"]</code></p>\n<p>Honestly, I do not know which one is better.</p>",
        "id": 258077368,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1634582054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> has marked this topic as resolved.</p>",
        "id": 258229734,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634661987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> has marked this topic as unresolved.</p>",
        "id": 258229751,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634661992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> has marked this topic as resolved.</p>",
        "id": 258229777,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634661999
    }
]