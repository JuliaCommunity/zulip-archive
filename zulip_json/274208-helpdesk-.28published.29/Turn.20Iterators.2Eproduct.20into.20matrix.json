[
    {
        "content": "<p>Suppose I have some number of iterables, and I want to turn their product into a matrix, with one column per iterable. I've gotten close with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">vcat</span><span class=\"p\">,</span> <span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"mi\">105</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c\"># ...</span>\n</code></pre></div>\n<p>But now I need to get that into a matrix. I can hack something together with <code>Iterators.flatten</code> and a <code>reshape</code>, but it's... um... not pretty</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">make_matrix</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span>\n           <span class=\"n\">permutedims</span><span class=\"p\">(</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">vcat</span><span class=\"p\">,</span> <span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)))),</span>\n               <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)))</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">make_matrix</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">make_matrix</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"mi\">105</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>   <span class=\"mi\">4</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">2</span>   <span class=\"mi\">4</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">3</span>   <span class=\"mi\">4</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">1</span>   <span class=\"mi\">5</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">2</span>   <span class=\"mi\">5</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">3</span>   <span class=\"mi\">5</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">1</span>   <span class=\"mi\">6</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">2</span>   <span class=\"mi\">6</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">3</span>   <span class=\"mi\">6</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">1</span>   <span class=\"mi\">7</span>  <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 247734386,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1627664102
    },
    {
        "content": "<p>you can use <code>collect(Iterators.product(x, y, z))</code></p>",
        "id": 247734654,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1627664233
    },
    {
        "content": "<p>best I can come up with, but it's also ugly</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">permutedims</span><span class=\"p\">(</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">hcat</span><span class=\"p\">,</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-&gt;</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">],</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">))))</span>\n</code></pre></div>",
        "id": 247734898,
        "sender_full_name": "Maarten",
        "timestamp": 1627664370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297129\">@Takafumi Arakaki (tkf)</span> That give you a 3D Array:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">7</span><span class=\"o\">×</span><span class=\"mi\">5</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"mi\">3</span><span class=\"p\">}</span><span class=\"o\">:</span>\n</code></pre></div>",
        "id": 247735060,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1627664436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"335397\">@Maarten</span> Oh, that's clever :-)</p>",
        "id": 247735138,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1627664476
    },
    {
        "content": "<p>you can get it slightly shorter using mapreduce, which I forgot about x)</p>",
        "id": 247735206,
        "sender_full_name": "Maarten",
        "timestamp": 1627664515
    },
    {
        "content": "<p><code>transpose(reinterpret(reshape, Int, vec(collect(Iterators.product(x,y,z)))))</code> is probably quite efficient.</p>",
        "id": 247767536,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1627682507
    },
    {
        "content": "<p>Or <code>using TensorCast; @cast out[(i,j,k),c] := (x[i], y[j], z[k])[c]  c in 1:3</code></p>",
        "id": 247767729,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1627682667
    },
    {
        "content": "<p>Oops, sorry I misread the question. And yeah, for a quick code, I'd use <code>reinterpret</code> like Michael does.</p>\n<p>A variant of this is to do the reshape on the receiver side:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">}(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">prod</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"kt\">Int</span><span class=\"p\">},</span> <span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">'</span><span class=\"p\">)),</span> <span class=\"n\">length</span><span class=\"o\">.</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span> <span class=\"o\">.=</span> <span class=\"n\">tuple</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>(which could be useful if you want contiguous memory as a result and avoid copy)</p>",
        "id": 247780240,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1627698344
    },
    {
        "content": "<p>Probably not very efficient, but a concise one-liner: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"kt\">Matrix</span><span class=\"p\">(</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"mi\">105</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>   <span class=\"mi\">4</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">2</span>   <span class=\"mi\">4</span>  <span class=\"mi\">10</span>\n<span class=\"o\">...</span>\n</code></pre></div>",
        "id": 247848220,
        "sender_full_name": "Nils",
        "timestamp": 1627807329
    },
    {
        "content": "<p>Nice idea about DataFrames. Extending this idea we can get the following</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Tables</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"mi\">105</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">1</span>   <span class=\"mi\">4</span>  <span class=\"mi\">10</span>\n <span class=\"mi\">2</span>   <span class=\"mi\">4</span>  <span class=\"mi\">10</span>\n<span class=\"o\">...</span>\n</code></pre></div>",
        "id": 247851813,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1627812994
    }
]