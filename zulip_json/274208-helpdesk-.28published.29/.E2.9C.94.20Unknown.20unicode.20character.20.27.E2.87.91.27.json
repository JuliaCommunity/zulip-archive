[
    {
        "content": "<p>I'm trying to use the <code>\\Uparrow</code> unicode, but I get an error saying <code>unknown unicode character '⇑'</code>. The same happens for <code>\\Downarrow</code>, but it works on the Left and Right cases. Both the Up and Down arrows are listed in the Unicode input documentation for Julia... Any ideas on what the problem might be?</p>",
        "id": 420646089,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707482945
    },
    {
        "content": "<p>They're reserved characters</p>",
        "id": 420648824,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707484005
    },
    {
        "content": "<p>Meaning that when the parser was written, we weren't sure if a good use-case for them would later arise, and so we made it so they can't be used as identifiers until we know what the possible use-case is</p>",
        "id": 420648971,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707484071
    },
    {
        "content": "<p>So I can't use these unicodes?</p>",
        "id": 420649130,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484123
    },
    {
        "content": "<p>I was looking for an easy to use alternative to represent left, right, up and down. But I'm already using the normal arrows</p>",
        "id": 420649565,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484283
    },
    {
        "content": "<p>Is it possible to use named functions as binary operators?</p>",
        "id": 420649616,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484306
    },
    {
        "content": "<p>Like in Haskell :</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"n\">myf</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div>",
        "id": 420649898,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484404
    },
    {
        "content": "<p>You could open a PR adding them to <a href=\"https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm#L13\">https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm#L13</a></p>",
        "id": 420650738,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707484709
    },
    {
        "content": "<p>I doubt it would be very controversial</p>",
        "id": 420650771,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707484721
    },
    {
        "content": "<p>You mean adding \\Uparrow and \\Downarrow?</p>",
        "id": 420650832,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484744
    },
    {
        "content": "<p>yes</p>",
        "id": 420650846,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707484747
    },
    {
        "content": "<p>What would be the controversy?</p>",
        "id": 420650866,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484756
    },
    {
        "content": "<p>Isn't having more unicode available better?</p>",
        "id": 420650893,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484768
    },
    {
        "content": "<p>What would be the downside?</p>",
        "id": 420650899,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484773
    },
    {
        "content": "<p>You can also attach unicode prefixes or suffixes to the regular arrow operators to make new versions of them:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"o\">↑</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"o\">↑ᵃ</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">↑</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"go\">(1, 2)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">↑ᵃ</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"go\">(2, 1)</span>\n</code></pre></div>",
        "id": 420651017,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707484807
    },
    {
        "content": "<p>This is a great idea! Had not thought about it.</p>",
        "id": 420651091,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484838
    },
    {
        "content": "<p>I'll use this. Thanks, <span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span></p>",
        "id": 420651106,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Unknown.20unicode.20character.20'.E2.87.91'/near/420650899\">said</a>:</p>\n<blockquote>\n<p>What would be the downside?</p>\n</blockquote>\n<p>the downside I mentioned before. Someone might want that operator to live at a different precedence level or be for something else. But I doubt it'd be a problem in this case, since the pre-arrow category is pretty clear.</p>",
        "id": 420651131,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707484859
    },
    {
        "content": "<p>Ohh, now I undertand.</p>",
        "id": 420651176,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484879
    },
    {
        "content": "<p>The problem is that the precedence is \"fixed\".</p>",
        "id": 420651247,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484906
    },
    {
        "content": "<p>But then I'm confused again. I thought \\Uparrow was unusable.</p>",
        "id": 420651355,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707484953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Unknown.20unicode.20character.20'.E2.87.91'/near/420649898\">said</a>:</p>\n<blockquote>\n<p>Like in Haskell :</p>\n<p><div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"n\">myf</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yeah, there is a hack to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">InfixFunction</span><span class=\"w\"> </span><span class=\"o\">&lt;:</span><span class=\"w\"> </span><span class=\"kt\">Function</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span>\n<span class=\"w\">    </span><span class=\"n\">operator</span><span class=\"o\">::</span><span class=\"kt\">Function</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">InfixFunction</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InfixFunction</span><span class=\"p\">(</span><span class=\"n\">gensym</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">operator</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">)(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">operator</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">)</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">::</span><span class=\"kt\">IO</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">n_methods</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">operator</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">_methods</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n_methods</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"s\">\"method\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"methods\"</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"si\">$name</span><span class=\"s\"> (generic infix function with </span><span class=\"si\">$n_methods</span><span class=\"s\"> </span><span class=\"si\">$_methods</span><span class=\"s\">)\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"p\">)</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.:|</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">InfixFunction</span><span class=\"p\">(</span><span class=\"n\">arg₂</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">operator</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.:|</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">operator</span><span class=\"p\">(</span><span class=\"n\">arg₂</span><span class=\"p\">)</span>\n\n<span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">quote</span>\n<span class=\"w\">        </span><span class=\"o\">$</span><span class=\"n\">operator</span><span class=\"o\">::</span><span class=\"kt\">Function</span>\n\n<span class=\"w\">        </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.:|</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">operator</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">InfixFunction</span><span class=\"p\">(</span><span class=\"n\">arg₂</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n\n<span class=\"w\">        </span><span class=\"n\">Base</span><span class=\"o\">.:|</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">operator</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"p\">(</span><span class=\"n\">arg₂</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"nd\">@info</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">operator</span><span class=\"p\">)</span><span class=\"s\"> has been infixified\"</span>\n\n<span class=\"w\">        </span><span class=\"o\">$</span><span class=\"n\">operator</span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">esc</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 420651536,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Unknown.20unicode.20character.20'.E2.87.91'/near/420651536\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Unknown.20unicode.20character.20'.E2.87.91'/near/420649898\">said</a>:</p>\n<blockquote>\n<p>Like in Haskell :</p>\n<p><div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"n\">myf</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yeah, there is a hack to do this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">InfixFunction</span><span class=\"w\"> </span><span class=\"o\">&lt;:</span><span class=\"w\"> </span><span class=\"kt\">Function</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span>\n<span class=\"w\">    </span><span class=\"n\">operator</span><span class=\"o\">::</span><span class=\"kt\">Function</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">InfixFunction</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InfixFunction</span><span class=\"p\">(</span><span class=\"n\">gensym</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">operator</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">)(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">operator</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">)</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">::</span><span class=\"kt\">IO</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">n_methods</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">operator</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">_methods</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n_methods</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"s\">\"method\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"methods\"</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"si\">$name</span><span class=\"s\"> (generic infix function with </span><span class=\"si\">$n_methods</span><span class=\"s\"> </span><span class=\"si\">$_methods</span><span class=\"s\">)\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"p\">)</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.:|</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">InfixFunction</span><span class=\"p\">(</span><span class=\"n\">arg₂</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">operator</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.:|</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"kt\">InfixFunction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">.</span><span class=\"n\">operator</span><span class=\"p\">(</span><span class=\"n\">arg₂</span><span class=\"p\">)</span>\n\n<span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">quote</span>\n<span class=\"w\">        </span><span class=\"o\">$</span><span class=\"n\">operator</span><span class=\"o\">::</span><span class=\"kt\">Function</span>\n\n<span class=\"w\">        </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.:|</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">operator</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">InfixFunction</span><span class=\"p\">(</span><span class=\"n\">arg₂</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"p\">(</span><span class=\"n\">arg₁</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n\n<span class=\"w\">        </span><span class=\"n\">Base</span><span class=\"o\">.:|</span><span class=\"p\">(</span><span class=\"n\">infix</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">operator</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">arg₂</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infix</span><span class=\"p\">(</span><span class=\"n\">arg₂</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"nd\">@info</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">operator</span><span class=\"p\">)</span><span class=\"s\"> has been infixified\"</span>\n\n<span class=\"w\">        </span><span class=\"o\">$</span><span class=\"n\">operator</span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">esc</span>\n<span class=\"k\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Any downside on using this?</p>",
        "id": 420651661,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707485051
    },
    {
        "content": "<p>It looks like a very nice feature to have.</p>",
        "id": 420651706,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707485073
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">myf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"go\">myf (generic function with 1 method)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@infix</span><span class=\"w\"> </span><span class=\"n\">myf</span>\n<span class=\"go\">[ Info: myf has been infixified</span>\n<span class=\"go\">myf (generic function with 1 method)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">myf</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"go\">1 =&gt; 2</span>\n</code></pre></div>",
        "id": 420651736,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Unknown.20unicode.20character.20'.E2.87.91'/near/420651355\">said</a>:</p>\n<blockquote>\n<p>But then I'm confused again. I thought \\Uparrow was unusable.</p>\n</blockquote>\n<p>I'm not sure what you mean. It's currently not useable because it's not registered in the parser. If you add it to the parser as a registered infix operator, it will become usable.</p>",
        "id": 420651849,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485129
    },
    {
        "content": "<p>hmm. I can add it to the parsers in my code?</p>",
        "id": 420652114,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707485212
    },
    {
        "content": "<p>No</p>",
        "id": 420652173,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485230
    },
    {
        "content": "<p>oh, ok</p>",
        "id": 420652192,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707485235
    },
    {
        "content": "<p>You would need to modify julia itself</p>",
        "id": 420652207,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485241
    },
    {
        "content": "<p>yeah, I'm not doing that.</p>",
        "id": 420652238,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707485255
    },
    {
        "content": "<p>it's a very easy PR, you literally would just add it to that list</p>",
        "id": 420652249,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485259
    },
    {
        "content": "<p>Yep.</p>",
        "id": 420652266,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707485269
    },
    {
        "content": "<p>I guess I can add the PR.</p>",
        "id": 420652286,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707485277
    },
    {
        "content": "<p>Here's an example of what a PR for that would look like: <a href=\"https://github.com/JuliaLang/julia/pull/49623/files\">https://github.com/JuliaLang/julia/pull/49623/files</a></p>",
        "id": 420652365,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485299
    },
    {
        "content": "<p>And I think you wouldn't even need to do the latex completion stuff because it's already registered for latex completions</p>",
        "id": 420652454,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485347
    },
    {
        "content": "<p>Oh wait, I just realized we use <a href=\"https://juliahub.com/ui/Packages/General/JuliaSyntax\">JuliaSyntax.jl</a> now, not the scheme parser <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 420652535,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485381
    },
    {
        "content": "<p>So you would instead change this: <a href=\"https://github.com/JuliaLang/JuliaSyntax.jl/blob/main/src/kinds.jl#L147\">https://github.com/JuliaLang/JuliaSyntax.jl/blob/main/src/kinds.jl#L147</a></p>",
        "id": 420653247,
        "sender_full_name": "Mason Protter",
        "timestamp": 1707485648
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 420654788,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1707486208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358317\">Davi Sales Barreira</span> has marked this topic as resolved.</p>",
        "id": 420746124,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707519640
    }
]