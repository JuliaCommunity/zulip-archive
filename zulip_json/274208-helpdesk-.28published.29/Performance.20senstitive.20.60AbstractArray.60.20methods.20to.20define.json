[
    {
        "content": "<p>If I define <code>MyArray &lt;: DenseArray &lt;: AbstractArray</code>,  are there important indexing methods and stuff that I should be defining to make this thing perform well? Suppose it's basically just wrapping a normal dense array.</p>\n<p>Fundamentally, all one really needs to define is </p>\n<p>1) <code>size(::MyArray)</code><br>\n2) <code>getindex(A, ::Vararg{Int})</code><br>\n3) <code>setindex!(::MyArray, ::Any, ::Vararg{Int})</code></p>\n<p>but are there cases where e.g. for broadcasting or something like that, that I'm leaving a lot of performance on the table if I don't do something special?</p>",
        "id": 417237381,
        "sender_full_name": "Mason Protter",
        "timestamp": 1705932757
    },
    {
        "content": "<p>For instance, I noticed that <a href=\"https://juliahub.com/ui/Packages/General/UnsafeArrays\">UnsafeArrays.jl</a> defines its own specialized methods for <code>copyto!</code>: <a href=\"https://github.com/JuliaArrays/UnsafeArrays.jl/blob/main/src/unsafe_array.jl#L114-L146\">https://github.com/JuliaArrays/UnsafeArrays.jl/blob/main/src/unsafe_array.jl#L114-L146</a></p>\n<p>It's not clear to me what the advantage of doing that was, e.g. I could imagine that maybe there's somethign about broadcast that would make it better to have you own <code>copyto!</code> implementation, but I can also imagine that this code is just unnecessary dead weight</p>",
        "id": 417238355,
        "sender_full_name": "Mason Protter",
        "timestamp": 1705933047
    },
    {
        "content": "<p>I found these to be necessary for performance when wrapping StrideArrays coming out of Bumper: <a href=\"https://github.com/ericphanson/AllocArrays.jl/blob/main/src/AllocArray.jl#L74-L98\">https://github.com/ericphanson/AllocArrays.jl/blob/main/src/AllocArray.jl#L74-L98</a></p>",
        "id": 417633753,
        "sender_full_name": "Eric Hanson",
        "timestamp": 1706098883
    }
]