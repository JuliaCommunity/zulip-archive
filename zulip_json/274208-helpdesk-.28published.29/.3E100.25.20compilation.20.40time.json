[
    {
        "content": "<p>Using <code>@time</code>, I'm seeing &gt;100% compilation time, which is clearly quite suspect. What's going on? How can I get an accurate result?</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"k\">function</span> <span class=\"n\">bisectroot</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">ϵ</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">)</span>\n           <span class=\"nd\">@assert</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n           <span class=\"n\">ϵ₁</span> <span class=\"o\">=</span> <span class=\"nb\">Inf</span>\n           <span class=\"k\">while</span> <span class=\"n\">ϵ₁</span> <span class=\"o\">&gt;</span> <span class=\"n\">ϵ</span>\n               <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n               <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"k\">end</span>\n               <span class=\"n\">ϵ₁</span> <span class=\"o\">=</span> <span class=\"n\">right</span> <span class=\"o\">-</span> <span class=\"n\">left</span>\n           <span class=\"k\">end</span>\n           <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n       <span class=\"k\">end</span>\n<span class=\"go\">bisectroot (generic function with 2 methods)</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"nd\">@time</span> <span class=\"n\">bisectroot</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"go\">  0.032397 seconds (44.41 k allocations: 2.623 MiB, 106.97% compilation time)</span>\n<span class=\"go\">2.6457510590553284</span>\n</code></pre></div>",
        "id": 250469972,
        "sender_full_name": "Timothy",
        "timestamp": 1629803932
    },
    {
        "content": "<p>I believe it's explained in the docstring: <a href=\"https://docs.julialang.org/en/v1/base/base/#Base.@time\">https://docs.julialang.org/en/v1/base/base/#Base.@time</a></p>",
        "id": 250475149,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1629807097
    },
    {
        "content": "<p>I may be missing the obvious, but I don't see what you're referring to. There's a bit about time not being counted, but that's compile time not execution time, and if I add <code>@eval</code> I see:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"nd\">@time</span> <span class=\"nd\">@eval</span> <span class=\"n\">bisectroot</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"go\">  0.033370 seconds (44.56 k allocations: 2.634 MiB, 105.17% compilation time)</span>\n</code></pre></div>",
        "id": 250476060,
        "sender_full_name": "Timothy",
        "timestamp": 1629807624
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/JuliaLang/julia/issues/41281\">https://github.com/JuliaLang/julia/issues/41281</a>?</p>",
        "id": 250520300,
        "sender_full_name": "Eric Hanson",
        "timestamp": 1629826641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400021\">Timothy</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.3E100.25.20compilation.20.40time/near/250476060\">said</a>:</p>\n<blockquote>\n<p>I may be missing the obvious, but I don't see what you're referring to. There's a bit about time not being counted, but that's compile time not execution time, and if I add <code>@eval</code> I see:</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"nd\">@time</span> <span class=\"nd\">@eval</span> <span class=\"n\">bisectroot</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"go\">  0.033370 seconds (44.56 k allocations: 2.634 MiB, 105.17% compilation time)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I was referring to <code>@eval</code>.  The <a href=\"https://github.com/JuliaLang/julia/issues/39760\">discussion which led to that comment</a> in the docstring was about wrong compilation times, including over 100% compile time at some point</p>",
        "id": 250521489,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1629827202
    },
    {
        "content": "<p>with <code>master</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">bisectroot</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n  <span class=\"mf\">0.053943</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">74.62</span> <span class=\"n\">k</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">4.158</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">99.83</span><span class=\"o\">%</span> <span class=\"n\">compilation</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n<span class=\"mf\">2.6457510590553284</span>\n</code></pre></div>\n<p>so it's likely the issue Eric pointed to (fixed for Julia v1.7) above is related</p>",
        "id": 250522382,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1629827591
    },
    {
        "content": "<p>BTW, in Julia v1.6 I get:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@benchmark</span> <span class=\"n\">bisectroot</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span> <span class=\"mi\">10000</span> <span class=\"n\">samples</span> <span class=\"n\">with</span> <span class=\"mi\">935</span> <span class=\"n\">evaluations</span><span class=\"o\">.</span>\n <span class=\"n\">Range</span> <span class=\"p\">(</span><span class=\"n\">min</span> <span class=\"o\">…</span> <span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">105.914</span> <span class=\"n\">ns</span> <span class=\"o\">…</span> <span class=\"mf\">208.436</span> <span class=\"n\">ns</span>  <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">min</span> <span class=\"o\">…</span> <span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"o\">…</span> <span class=\"mf\">0.00</span><span class=\"o\">%</span>\n <span class=\"n\">Time</span>  <span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span>     <span class=\"mf\">108.907</span> <span class=\"n\">ns</span>               <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span>    <span class=\"mf\">0.00</span><span class=\"o\">%</span>\n <span class=\"n\">Time</span>  <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">±</span> <span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span>   <span class=\"mf\">110.994</span> <span class=\"n\">ns</span> <span class=\"o\">±</span>  <span class=\"mf\">11.000</span> <span class=\"n\">ns</span>  <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">±</span> <span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"o\">±</span> <span class=\"mf\">0.00</span><span class=\"o\">%</span>\n\n  <span class=\"n\">█</span>\n  <span class=\"n\">█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</span> <span class=\"n\">▂</span>\n  <span class=\"mi\">128</span> <span class=\"n\">ns</span>           <span class=\"n\">Histogram</span><span class=\"o\">:</span> <span class=\"n\">frequency</span> <span class=\"n\">by</span> <span class=\"n\">time</span>          <span class=\"mi\">117</span> <span class=\"n\">ns</span> <span class=\"o\">&lt;</span>\n\n <span class=\"n\">Memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span><span class=\"p\">,</span> <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">0.</span>\n</code></pre></div>\n<p>and master</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@benchmark</span> <span class=\"n\">bisectroot</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span> <span class=\"mi\">10000</span> <span class=\"n\">samples</span> <span class=\"n\">with</span> <span class=\"mi\">7</span> <span class=\"n\">evaluations</span><span class=\"o\">.</span>\n <span class=\"n\">Range</span> <span class=\"p\">(</span><span class=\"n\">min</span> <span class=\"o\">…</span> <span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">4.304</span> <span class=\"n\">μs</span> <span class=\"o\">…</span> <span class=\"mf\">247.652</span> <span class=\"n\">μs</span>  <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">min</span> <span class=\"o\">…</span> <span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"o\">…</span> <span class=\"mf\">97.84</span><span class=\"o\">%</span>\n <span class=\"n\">Time</span>  <span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span>     <span class=\"mf\">4.431</span> <span class=\"n\">μs</span>               <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span>    <span class=\"mf\">0.00</span><span class=\"o\">%</span>\n <span class=\"n\">Time</span>  <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">±</span> <span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span>   <span class=\"mf\">4.807</span> <span class=\"n\">μs</span> <span class=\"o\">±</span>   <span class=\"mf\">5.423</span> <span class=\"n\">μs</span>  <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">±</span> <span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">2.50</span><span class=\"o\">%</span> <span class=\"o\">±</span>  <span class=\"mf\">2.19</span><span class=\"o\">%</span>\n\n  <span class=\"n\">█</span>\n  <span class=\"n\">█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</span> <span class=\"n\">▁▁▁▁▁▁▁</span> <span class=\"n\">▁</span>\n  <span class=\"mf\">5.14</span> <span class=\"n\">μs</span>         <span class=\"n\">Histogram</span><span class=\"o\">:</span> <span class=\"n\">frequency</span> <span class=\"n\">by</span> <span class=\"n\">time</span>        <span class=\"mf\">4.47</span> <span class=\"n\">μs</span> <span class=\"o\">&lt;</span>\n\n <span class=\"n\">Memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">3.30</span> <span class=\"n\">KiB</span><span class=\"p\">,</span> <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">140.</span>\n</code></pre></div>\n<p>large regression?</p>",
        "id": 250527512,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1629829889
    },
    {
        "content": "<p>and also these histograms show confusing numbers on the x-axis: <a href=\"https://github.com/JuliaCI/BenchmarkTools.jl/issues/249\">https://github.com/JuliaCI/BenchmarkTools.jl/issues/249</a> maybe you could have a look? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 250527629,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1629829930
    },
    {
        "content": "<p>I get about the same performance (~3 μs) between Julia v1.6 and master by replacing the <code>if</code> with <code>ifelse</code>, which is a modest improvement for master, still a large regression for v1.6</p>",
        "id": 250530500,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1629831104
    },
    {
        "content": "<p>Ah, so this should be fixed with 1.7, that's good to know. That performance regression looks slightly concerning, I hope that's resolved before 1.7 is released. Oh, and I took a look at that BenchmarkTools issue <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>.</p>",
        "id": 250581186,
        "sender_full_name": "Timothy",
        "timestamp": 1629868823
    },
    {
        "content": "<p>for the performance regression, Kristoffer <a href=\"https://github.com/JuliaLang/julia/issues/42007#issuecomment-905744411\">pointed out</a> that the call is type-unstable: if you use <code>0.0</code> and <code>7.0</code> as arguments, on <code>master</code> you recover the same performance as in v1.6</p>",
        "id": 250683200,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1629925782
    }
]