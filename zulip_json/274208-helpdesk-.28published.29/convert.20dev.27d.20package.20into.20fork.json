[
    {
        "content": "<p>Julia provides the standard way to develop a package, which is <code>dev Pkg</code>, automatically cloning the repository into <code>.julia/dev/</code>. However, when one does this with a package one do not own,  how is the proper way to proceed?</p>\n<p>Currently I'm skipping the automatic clone given by <code>dev Pkg</code> and first forking it, then cloning my fork into <code>.julia/dev/</code>. </p>\n<p>Is there are a more direct way to do that? Meaning, is there a way to <code>dev</code> a package and convert the local clone into a fork in one's github repository?</p>\n<p>I found this slack answer: <a href=\"https://stackoverflow.com/questions/33817118/github-how-to-fork-after-cloning\">https://stackoverflow.com/questions/33817118/github-how-to-fork-after-cloning</a></p>\n<p>But that seems way too cumbersome. What do you frequent contributors to third-party packages do?</p>",
        "id": 411290873,
        "sender_full_name": "Leandro Martínez",
        "timestamp": 1704417324
    },
    {
        "content": "<p>I use <a href=\"https://magit.vc/\">magit</a> with <a href=\"https://magit.vc/manual/forge.html\">git forge integration</a>, I think creating the fork is as hard as typing <code>c f giordano</code> or something like that, and it can automatically set the fork as default push remote</p>",
        "id": 411318725,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1704436920
    },
    {
        "content": "<p>And setting fetch/push remotes appropriately is better than renaming the remotes as suggested in the stackoverflow answer, as those operations will by default use the right remote, without you having to remember to pull from/push to the right one</p>",
        "id": 411319196,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1704437291
    },
    {
        "content": "<p>Magit is in emacs so I don't really recommend it to someone who isn't already invested in emacs, but it's by far the best interface to git I've ever used (although not entirely flawless)</p>",
        "id": 411319310,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1704437393
    },
    {
        "content": "<p>Fwiw I've given magit to someone who doesn't use emacs and they got on fine</p>",
        "id": 411320407,
        "sender_full_name": "jar",
        "timestamp": 1704438219
    },
    {
        "content": "<p>Magit seems like it would be worth being a standalone app, i.e. a specially configured \"Emacs\" that just runs magit.</p>",
        "id": 411320997,
        "sender_full_name": "Timothy",
        "timestamp": 1704438704
    },
    {
        "content": "<p>Out of curiosity, do you use VSCode or keep full time in emacs?</p>",
        "id": 411365137,
        "sender_full_name": "Leandro Martínez",
        "timestamp": 1704459242
    },
    {
        "content": "<p>I use only emacs</p>",
        "id": 411367022,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1704460123
    },
    {
        "content": "<p>All my coding is in vscode now. The vscode port <a href=\"https://github.com/kahole/edamagit\">https://github.com/kahole/edamagit</a> has a good fraction of magit's functionality so most of the time I can stay in vscode.</p>",
        "id": 411415035,
        "sender_full_name": "jar",
        "timestamp": 1704479959
    },
    {
        "content": "<p>The easiest way I've found to do this without magic tools is the following:</p>\n<ol>\n<li><code>Pkg.dev</code> -&gt; getting a clone in <code>.julia/dev</code>.</li>\n<li>Go to GitHub page and create a fork.</li>\n<li>Change to the package directory and do <code>git remote add gunnar FORK_URL</code>.</li>\n<li><code>git checkout -b FEATURE_BRANCH</code></li>\n<li><code>git commit</code> until you're ready.</li>\n<li><code>git push -u gunnar HEAD</code>.</li>\n<li>Go to GitHub and click on the \"create PR\" button at the top of the repo.</li>\n</ol>\n<p>Step 3 can be done at any time between step 2 and step 6. Other people would name the remote differently.</p>",
        "id": 411503198,
        "sender_full_name": "Gunnar Farnebäck",
        "timestamp": 1704542910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273176\">Gunnar Farnebäck</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/convert.20dev'd.20package.20into.20fork/near/411503198\">said</a>:</p>\n<blockquote>\n<p>The easiest way I've found to do this without magic tools is the following:</p>\n<ol>\n<li><code>Pkg.dev</code> -&gt; getting a clone in <code>.julia/dev</code>.</li>\n<li>Go to GitHub page and create a fork.</li>\n<li>Change to the package directory and do <code>git remote add gunnar FORK_URL</code>.</li>\n<li><code>git checkout -b FEATURE_BRANCH</code></li>\n<li><code>git commit</code> until you're ready.</li>\n<li><code>git push -u gunnar HEAD</code>.</li>\n<li>Go to GitHub and click on the \"create PR\" button at the top of the repo.</li>\n</ol>\n<p>Step 3 can be done at any time between step 2 and step 6. Other people would name the remote differently.</p>\n</blockquote>\n<p>I prefer clonining the fork and adding upstream as a remote instead, and this way you wouldn't accidentally push into the upstream if you happen to have rights to it.</p>",
        "id": 417156299,
        "sender_full_name": "isentropic",
        "timestamp": 1705897646
    }
]