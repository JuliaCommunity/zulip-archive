[
    {
        "content": "<p>I have a (mutable, edit) struct with a field that has type <code>Union{T, Nothing}</code>, and I've been trying to implement <code>Base.isless</code> for this struct, but I cannot figure out how to make <a href=\"https://github.com/search?q=JET.jl&amp;type=Repositories\">JET.jl</a> happy...</p>\n<p>A simple function works fine,</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">})</span>\n<span class=\"w\">           </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">               </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">                   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"w\">               </span><span class=\"k\">else</span>\n<span class=\"w\">                   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">true</span>\n<span class=\"w\">               </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">else</span>\n<span class=\"w\">               </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">                   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"w\">               </span><span class=\"k\">else</span>\n<span class=\"w\">                   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">               </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"go\">foo (generic function with 1 method)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">JET</span><span class=\"o\">.</span><span class=\"nd\">@report_opt</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">No errors detected</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">JET</span><span class=\"o\">.</span><span class=\"nd\">@report_call</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">No errors detected</span>\n</code></pre></div>\n<p>But once the <code>a</code> and <code>b</code> are encapsulated in a struct, JET complains:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">mutable</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"kt\">Bar</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">}</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isless</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">Bar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">Bar</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">               </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">                   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"w\">               </span><span class=\"k\">else</span>\n<span class=\"w\">                   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">true</span>\n<span class=\"w\">               </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">else</span>\n<span class=\"w\">               </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">                   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"w\">               </span><span class=\"k\">else</span>\n<span class=\"w\">                   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span>\n<span class=\"w\">               </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">JET</span><span class=\"o\">.</span><span class=\"nd\">@report_opt</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isless</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">═════ 2 possible errors found ═════</span>\n<span class=\"go\">┌ isless(a::Bar, b::Bar) @ Main ./REPL[16]:12</span>\n<span class=\"go\">│┌ &lt;(x::Int64, y::Nothing) @ Base ./operators.jl:343</span>\n<span class=\"go\">││ runtime dispatch detected: isless(x::Int64, y::Nothing)</span>\n<span class=\"go\">│└────────────────────</span>\n<span class=\"go\">│┌ &lt;(x::Nothing, y::Int64) @ Base ./operators.jl:343</span>\n<span class=\"go\">││ runtime dispatch detected: isless(x::Nothing, y::Int64)</span>\n<span class=\"go\">│└────────────────────</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">JET</span><span class=\"o\">.</span><span class=\"nd\">@report_call</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isless</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">═════ 3 possible errors found ═════</span>\n<span class=\"go\">┌ isless(a::Bar, b::Bar) @ Main ./REPL[16]:12</span>\n<span class=\"go\">│┌ &lt;(x::Nothing, y::Nothing) @ Base ./operators.jl:343</span>\n<span class=\"go\">││ no matching method found `isless(::Nothing, ::Nothing)`: isless(x::Nothing, y::Nothing)</span>\n<span class=\"go\">│└────────────────────</span>\n<span class=\"go\">│┌ &lt;(x::Int64, y::Nothing) @ Base ./operators.jl:343</span>\n<span class=\"go\">││ no matching method found `isless(::Int64, ::Nothing)`: isless(x::Int64, y::Nothing)</span>\n<span class=\"go\">│└────────────────────</span>\n<span class=\"go\">│┌ &lt;(x::Nothing, y::Int64) @ Base ./operators.jl:343</span>\n<span class=\"go\">││ no matching method found `isless(::Nothing, ::Int64)`: isless(x::Nothing, y::Int64)</span>\n<span class=\"go\">│└────────────────────</span>\n</code></pre></div>\n<p>Using JET v0.8.9 on Julia v1.9.2.</p>\n<p>Any ideas?</p>",
        "id": 384909618,
        "sender_full_name": "Jesper Stemann Andersen",
        "timestamp": 1692046951
    },
    {
        "content": "<p>... I guess <code>JET.@report_opt</code> is already telling me, quite clearly, that it ends up in dynamic dispatch..., so of course making the Bar field type a type parameter <code>&lt;: Union{Int, Nothing}</code> works...</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">mutable</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"kt\">Bar</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">}}</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isless</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">Bar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">Bar</span><span class=\"p\">)</span>\n<span class=\"w\">                  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">                      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">                          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"w\">                      </span><span class=\"k\">else</span>\n<span class=\"w\">                          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">true</span>\n<span class=\"w\">                      </span><span class=\"k\">end</span>\n<span class=\"w\">                  </span><span class=\"k\">else</span>\n<span class=\"w\">                      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span>\n<span class=\"w\">                          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"w\">                      </span><span class=\"k\">else</span>\n<span class=\"w\">                          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span>\n<span class=\"w\">                      </span><span class=\"k\">end</span>\n<span class=\"w\">                  </span><span class=\"k\">end</span>\n<span class=\"w\">              </span><span class=\"k\">end</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">JET</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">JET</span><span class=\"o\">.</span><span class=\"nd\">@report_opt</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isless</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">No errors detected</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">JET</span><span class=\"o\">.</span><span class=\"nd\">@report_call</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isless</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">No errors detected</span>\n</code></pre></div>\n<p>... but that's not what I was looking for - I would like to be able to modify the field - make it a Nothing and vice versa...</p>",
        "id": 384911334,
        "sender_full_name": "Jesper Stemann Andersen",
        "timestamp": 1692047572
    },
    {
        "content": "<p>The issue is that currently, the Julia compiler doesn't realise that if you load the same field multiple times from the same struct, the field is of the same type. So, even though you checked that a.x is not nothing and b.x is not nothing, when you do the comparison, Julia has \"forgotten\" that you checked</p>",
        "id": 385000797,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1692075178
    },
    {
        "content": "<p>You solve it by storing them in a variable</p>",
        "id": 385000814,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1692075188
    },
    {
        "content": "<p>See more here: <a href=\"https://aviatesk.github.io/JET.jl/stable/jetanalysis/#no-matching-method-found-(x/y-union-split)\">https://aviatesk.github.io/JET.jl/stable/jetanalysis/#no-matching-method-found-(x/y-union-split)</a></p>",
        "id": 385001157,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1692075366
    },
    {
        "content": "<p>Right! I should’ve re-read the documentation for JET… Thanks!</p>",
        "id": 385004300,
        "sender_full_name": "Jesper Stemann Andersen",
        "timestamp": 1692076821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432905\">Jesper Stemann Andersen</span> has marked this topic as resolved.</p>",
        "id": 385012116,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692079787
    },
    {
        "content": "<p>worth noting that JET is correct in this specific case  -- <code>Bar</code> is mutable after all, so some other thread could write a <code>nothing</code> to <code>a.x</code> or <code>b.x</code> after your check. Only accessing the field once and storing that in a local variable <em>technically</em> changes the behaviour of your program</p>",
        "id": 385023523,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1692083507
    },
    {
        "content": "<p>Right ... I was also wondering whether that point should be added as a footnote to the JET documentation...</p>",
        "id": 385024699,
        "sender_full_name": "Jesper Stemann Andersen",
        "timestamp": 1692083815
    }
]