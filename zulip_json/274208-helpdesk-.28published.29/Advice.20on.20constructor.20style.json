[
    {
        "content": "<p>Consider a package that keeps some state consisting of objects of type <code>Object</code>. New objects are instantiated and given an ID with <code>Object(ID)</code>.</p>\n<p>Users can select a particular object. This can be done in at least two ways:</p>\n<ol>\n<li>Let <code>Object(ID)</code> return the existing object if <code>ID</code> already exists and a new object otherwise.</li>\n<li>Restrict <code>Object(ID)</code> to be a true constructor, which can only create new objects, and use another function (say) <code>object(ID)</code> to select existing objects.</li>\n</ol>\n<p>Which is better? Method 2 is arguably \"purer\" and more elegant, since constructors are used only to construct, but it probably requires more mental effort from users (\"am I constructing or am I selecting?\")</p>",
        "id": 344324854,
        "sender_full_name": "mbaz",
        "timestamp": 1679677697
    },
    {
        "content": "<p>As I recall, the Julia documentation hints that <code>Object</code> is expected to return a <em>new</em> object, but there are certainly packages around in the ecosystem that use constructors to access existing objects.  I myself have occasionally used them as \"getters\", though if I thought more carefully about it I'd probably regret that practice (<code>get(x, ::Type{Object})</code> seems better).  I think option 2 is probably better.</p>",
        "id": 344327787,
        "sender_full_name": "Expanding Man",
        "timestamp": 1679678471
    }
]