[
    {
        "content": "<p>I have some code which tends to hand without exiting or responding a lot of the time it's run (the code path it takes is random), and upon Ctrl-C'ing it or similar, I tend to find the top of the stacktrace looks like this:</p>\n<p><a href=\"/user_uploads/7178/TzizsW2LGqaTjEfhPLjcIjxU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/TzizsW2LGqaTjEfhPLjcIjxU/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/TzizsW2LGqaTjEfhPLjcIjxU/image.png\"></a></div><p>The code in question here is:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"s\">\"\"\"</span>\n<span class=\"s\">    cityindexunchecked(world, id)</span>\n\n<span class=\"s\">Get the index of a [`City`](@ref) into `world.cities` and `world.graph` from it's `id`.</span>\n\n<span class=\"s\">Returns `nothing` if the city isn't found.</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">cityindexunchecked</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">findfirst</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">cities</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"c\"># Convenience method:\"Los Angeles\", [\"San Francisco\", \"Chicago\", \"Mexico City\", \"Sydney\"]),</span>\n<span class=\"c\"># integers are not valid ids so we assume c is the index and return it</span>\n<span class=\"n\">cityindexunchecked</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">id</span>\n<span class=\"n\">cityindexunchecked</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">City</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cityindexunchecked</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"</span>\n<span class=\"s\">    cityindex(world, city[, error])</span>\n\n<span class=\"s\">Get the index of a [`City`](@ref) into `world.cities` and `world.graph` from it's `id`.</span>\n\n<span class=\"s\">Throws an error if the city isn't found.</span>\n<span class=\"s\">Pass the parameter `error` to override the error text.</span>\n<span class=\"s\">`id` may either be a [`City`](@ref) object or just some identifying object.</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">cityindex</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"City </span><span class=\"si\">$c</span><span class=\"s\"> not found\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cityindexunchecked</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nd\">@assert</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"nb\">nothing</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"k\">end</span>\n<span class=\"k\">export</span><span class=\"w\"> </span><span class=\"n\">cityindex</span>\n</code></pre></div>\n<p>Can this be the result of the potential string comparison in <code>cityindexunchecked</code>? The type of <code>id</code> is typically a string.</p>",
        "id": 365209179,
        "sender_full_name": "Laura Demkowicz-Duffy",
        "timestamp": 1686439495
    },
    {
        "content": "<p>My first guess would be that the culprit is the<code>$c</code> in <code>cityindex</code></p>",
        "id": 365215031,
        "sender_full_name": "mbaz",
        "timestamp": 1686443838
    },
    {
        "content": "<p>the stacktrace has <code>cityindex:62</code>, which is likely where your function definition originally is?</p>",
        "id": 365242636,
        "sender_full_name": "Sukera",
        "timestamp": 1686463739
    },
    {
        "content": "<p>if so, yes, the interpolation ALWAYS happens, not just when the error is thrown</p>",
        "id": 365242669,
        "sender_full_name": "Sukera",
        "timestamp": 1686463759
    },
    {
        "content": "<p>note also the docstring of <code>@assert</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">Warning</span>\n<span class=\"w\">  </span><span class=\"n\">│</span>\n<span class=\"w\">  </span><span class=\"n\">│</span><span class=\"w\">  </span><span class=\"n\">An</span><span class=\"w\"> </span><span class=\"n\">assert</span><span class=\"w\"> </span><span class=\"n\">might</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">various</span><span class=\"w\"> </span><span class=\"n\">optimization</span><span class=\"w\"> </span><span class=\"n\">levels</span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">Assert</span><span class=\"w\"> </span><span class=\"n\">should</span><span class=\"w\"> </span><span class=\"n\">therefore</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"n\">│</span><span class=\"w\">  </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">tool</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">authentication</span><span class=\"w\"> </span><span class=\"n\">verification</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">verifying</span><span class=\"w\"> </span><span class=\"n\">passwords</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">nor</span><span class=\"w\"> </span><span class=\"n\">should</span>\n<span class=\"w\">  </span><span class=\"n\">│</span><span class=\"w\">  </span><span class=\"n\">side</span><span class=\"w\"> </span><span class=\"n\">effects</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">work</span><span class=\"w\"> </span><span class=\"n\">correctly</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">inside</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">asserts</span><span class=\"o\">.</span>\n</code></pre></div>\n<p>So at various optimization levels, the <code>@assert</code> may be removed entirely, leading to a wrong result. I'd suggest the pattern</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"p\">(</span><span class=\"kt\">ArgumentError</span><span class=\"p\">(</span><span class=\"n\">LazyString</span><span class=\"p\">(</span><span class=\"s\">\"City \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\" not found\"</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>which will stay in your code across optimization levels and only interpolate the string when the error is actually thrown.</p>",
        "id": 365242864,
        "sender_full_name": "Sukera",
        "timestamp": 1686463874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477227\">Laura Demkowicz-Duffy</span> has marked this topic as resolved.</p>",
        "id": 365296375,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686483111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477227\">Laura Demkowicz-Duffy</span> has marked this topic as resolved.</p>",
        "id": 365296377,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686483112
    }
]