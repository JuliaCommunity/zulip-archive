[
    {
        "content": "<p>I have a project where I generate a lot of functions at runtime, use <a href=\"https://github.com/search?q=RuntimeGeneratedFunctions.jl&amp;type=Repositories\">RuntimeGeneratedFunctions.jl</a> on them, and store them in a dict for easy access. Then I wrote small wrapper functions to make typing them out easier.</p>\n<p>I was benchmarking and it looks like this organization scheme creates a lot of allocations on every function call.</p>\n<p>I checked <code>@code_warntype</code>, and sure enough some of the wrapper functions I made generated type uncertainty. Here's a quick demo:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n\n<span class=\"n\">dict</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span> <span class=\"o\">=&gt;</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@code_warntype</span> <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">](</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"c\"># no type uncertainty:</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Variables</span>\n<span class=\"c\">#  #self#::Core.Compiler.Const(a, false)</span>\n<span class=\"c\">#  x::Float64</span>\n<span class=\"c\">#</span>\n<span class=\"c\">#Body::Float64</span>\n<span class=\"c\">#1 ─ %1 = Core.apply_type(Base.Val, 2)::Core.Compiler.Const(Val{2}, false)</span>\n<span class=\"c\">#│   %2 = (%1)()::Core.Compiler.Const(Val{2}(), false)</span>\n<span class=\"c\">#│   %3 = Base.literal_pow(Main.:^, x, %2)::Float64</span>\n<span class=\"c\">#└──      return %3</span>\n\n<span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">](</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nd\">@code_warntype</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"c\"># type uncertainty!</span>\n<span class=\"c\"># Variables</span>\n<span class=\"c\">#  #self#::Core.Compiler.Const(b, false)</span>\n<span class=\"c\">#  x::Float64</span>\n<span class=\"c\">#</span>\n<span class=\"c\">#Body::Any</span>\n<span class=\"c\">#1 ─ %1 = Base.getindex(Main.dict, \"a\")::Any</span>\n<span class=\"c\">#│   %2 = (%1)(x)::Any</span>\n<span class=\"c\">#└──      return %2</span>\n</code></pre></div>\n<p>Is there a way to reduce the type uncertainty of <code>b</code>, or swap it for another notationally convenient object without type uncertainty?</p>",
        "id": 230125917,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1615600313
    },
    {
        "content": "<p>Do you constantly add key-value pairs dynamically in your use case? If not (i.e. if you can previously assume the amount of generated functions), I think you could just use a NamedTuple instead of a Dict.</p>\n<p>(Quick disclaimer: I have no experience with functions generated at runtime.)</p>",
        "id": 230325504,
        "sender_full_name": "Frederik Banning",
        "timestamp": 1615805797
    },
    {
        "content": "<p>This example mask the problem, because type instability in this case originates from the fact that <code>dict</code> is a global variable. So if you use <code>const dict = Dict(\"a\" =&gt; a)</code> then you'll see no type instabilities.</p>\n<p>But real problem is different and can be seen if we are introduce more functions:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">a1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n<span class=\"n\">a2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">3</span>\n<span class=\"n\">a3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">4</span>\n<span class=\"n\">a4</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">5</span>\n<span class=\"n\">a5</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">6</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"kd\">const</span> <span class=\"n\">dict</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"s\">\"a1\"</span> <span class=\"o\">=&gt;</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"s\">\"a2\"</span> <span class=\"o\">=&gt;</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"s\">\"a3\"</span> <span class=\"o\">=&gt;</span> <span class=\"n\">a3</span><span class=\"p\">,</span> <span class=\"s\">\"a4\"</span> <span class=\"o\">=&gt;</span> <span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"s\">\"a5\"</span> <span class=\"o\">=&gt;</span> <span class=\"n\">a5</span><span class=\"p\">)</span>\n  <span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"kt\">Function</span><span class=\"p\">}</span> <span class=\"n\">with</span> <span class=\"mi\">5</span> <span class=\"n\">entries</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>In this case, <code>dict</code> is a dict of functions and their types can't be predicted at compile time.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"s\">\"a1\"</span><span class=\"p\">](</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@code_warntype</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">MethodInstance</span> <span class=\"k\">for</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n  <span class=\"n\">from</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Main</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"n\">Arguments</span>\n  <span class=\"c\">#self#::Core.Const(b)</span>\n  <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">Body</span><span class=\"o\">::</span><span class=\"kt\">Any</span>\n<span class=\"mi\">1</span> <span class=\"n\">─</span> <span class=\"o\">%</span><span class=\"mi\">1</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">,</span> <span class=\"s\">\"a1\"</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Function</span>\n<span class=\"n\">│</span>   <span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Any</span>\n<span class=\"n\">└──</span>      <span class=\"k\">return</span> <span class=\"o\">%</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>This is reasonable, since compiler can't got through all functions and infer type for each possible function and possible argument type.</p>\n<p>You can help it by using type annotations</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"s\">\"a1\"</span><span class=\"p\">](</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"n\">T</span>\n<span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@code_warntype</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">MethodInstance</span> <span class=\"k\">for</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n  <span class=\"n\">from</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">T</span> <span class=\"kp\">in</span> <span class=\"n\">Main</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"n\">Static</span> <span class=\"n\">Parameters</span>\n  <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"kt\">Float64</span>\n<span class=\"n\">Arguments</span>\n  <span class=\"c\">#self#::Core.Const(b)</span>\n  <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">Body</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"mi\">1</span> <span class=\"n\">─</span> <span class=\"o\">%</span><span class=\"mi\">1</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">,</span> <span class=\"s\">\"a1\"</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Function</span>\n<span class=\"n\">│</span>   <span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Any</span>\n<span class=\"n\">│</span>   <span class=\"o\">%</span><span class=\"mi\">3</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">typeassert</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">static_parameter</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)))</span><span class=\"o\">::</span><span class=\"kt\">Float64</span>\n<span class=\"n\">└──</span>      <span class=\"k\">return</span> <span class=\"o\">%</span><span class=\"mi\">3</span>\n</code></pre></div>\n<p>So compiler will add runtime check of the return type, and it will slow down tight loops, but at least it remove type instability.</p>",
        "id": 230329198,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615807662
    },
    {
        "content": "<p>Thanks for the replies. <span class=\"user-mention\" data-user-id=\"303259\">@Frederik Banning</span>  is right that I just generate this dict once, so a NamedTuple would work equally well.  And <span class=\"user-mention\" data-user-id=\"272771\">@Andrey Oskin</span> is right that type annotations do help in my case.</p>\n<p>Instead of using wrapper functions, could macros help? I was thinking something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">a1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n<span class=\"n\">a2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">3</span>\n\n<span class=\"kd\">const</span> <span class=\"n\">ntup</span> <span class=\"o\">=</span> <span class=\"nd\">@NamedTuple</span><span class=\"p\">{</span><span class=\"n\">a1</span><span class=\"p\">,</span><span class=\"n\">a2</span><span class=\"p\">}([</span><span class=\"n\">a1</span><span class=\"p\">,</span><span class=\"n\">a2</span><span class=\"p\">])</span>\n\n<span class=\"n\">b1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ntup</span><span class=\"o\">.</span><span class=\"n\">a1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"k\">macro</span> <span class=\"n\">b2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">ntup</span><span class=\"o\">.</span><span class=\"n\">a2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">println</span><span class=\"p\">(</span><span class=\"nd\">@b2</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>From what I can tell there's no type instability or performance hit in <code>b2</code> vs <code>b1</code>.</p>",
        "id": 230356804,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1615819814
    },
    {
        "content": "<p>Then you need the same amount of macros  as you have original functions.<br>\nIn this case why not just use functions themselves? This macro is more or less equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kd\">const</span> <span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">a2</span>\n</code></pre></div>",
        "id": 230357160,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615819926
    },
    {
        "content": "<p>It's just aliasing.</p>",
        "id": 230357202,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615819938
    },
    {
        "content": "<p>If your functions are known at compile time, you gain nothing.<br>\nAnd if they are unknown in compile time, you can't use macros.</p>",
        "id": 230357288,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615819974
    },
    {
        "content": "<p>Ah thanks. How many functions I'll have and their names are known at compile time, the only thing generated at runtime are the exact expressions inside the functions.</p>\n<p>Now that I think more about it I guess I was also looking for a cost-free way to alias a more complicated function call. In practice to call one of my functions directly is (using a dict) like this <code>funcs[\"H\"](sol(t)...,vals...)</code> where <code>vals</code> are global constants and <code>sol</code> is an ODE solution object. I had written <code>H(t) = funcs[\"H\"](sol(t)...,vals...)</code> to save keystrokes later on, but that introduced the type instability we've been looking at. So it sounds like a macro would remove the type instability from the second step, since it's just an alias. And hopefully a NamedTuple removes some of the type instability from the first step. This way of using the <code>ODESolution</code> object actually has some as well, but type annotations might help.</p>",
        "id": 230361101,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1615821176
    },
    {
        "content": "<p>If it's just an alias, I would recommend to just use <code>const H = my_long_and_hard_to_type_function_name</code> and not introduce extra mechanisms/macros that you have to fight with later.</p>",
        "id": 230361810,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615821407
    },
    {
        "content": "<p>It's recommended way, I suppose.</p>",
        "id": 230361843,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615821421
    },
    {
        "content": "<p>It's the same as write <code>const Float64Q = Union{Nothing, Float64}</code> to deal with long type names.</p>",
        "id": 230362077,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615821487
    },
    {
        "content": "<p>As long as you do not export them it's fine.</p>",
        "id": 230362203,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615821508
    },
    {
        "content": "<p>So just to be clear, you're suggesting something like <code>const H(t) = funcs[\"H\"](sol(t)...,vals...)</code>?</p>",
        "id": 230362804,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1615821650
    },
    {
        "content": "<p>Ahhh....<br>\nNo, I don't :-) In this case you can just define <code>H(t) = &lt;initial_long_and_hard_to_type_function_name&gt;(sol(t)..., vals...)</code></p>\n<p><code>const</code> is needed when you are aliasing function names with the same signature. But here you create new function, so no <code>const</code> is needed.</p>",
        "id": 230363940,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615822068
    },
    {
        "content": "<p>But main idea is to avoid <code>funcs[\"H\"]</code> in the first place if possible.</p>",
        "id": 230364077,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615822107
    },
    {
        "content": "<p>You can write macro here, btw, which would do something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@bind</span> <span class=\"n\">alias</span> <span class=\"n\">long_and_hard_to_type_function_name</span>\n</code></pre></div>\n<p>and it will execute the line that I wrote before.</p>",
        "id": 230364261,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615822189
    },
    {
        "content": "<p>Ah I see. But <code>H(t) = &lt;initial_long_and_hard_to_type_function_name&gt;(sol(t)..., vals...)</code> is what I currently have and what seems to introduce type instability. If I type the whole thing out, I get less. I guess there's always <code>@bind H funcs[\"H\"]</code> to save a few keystrokes.</p>",
        "id": 230366864,
        "sender_full_name": "Robbie Rosati",
        "timestamp": 1615823067
    }
]