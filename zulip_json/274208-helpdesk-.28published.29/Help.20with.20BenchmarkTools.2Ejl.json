[
    {
        "content": "<p>I always forget when we need to use <code>$</code>. The results below vary a lot:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">LinearAlgebra</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">StaticArrays</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Distances</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">BenchmarkTools</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SVector</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">SVector</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"n\">SOneTo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"mf\">1.0</span>\n<span class=\"w\"> </span><span class=\"mf\">2.0</span>\n<span class=\"w\"> </span><span class=\"mf\">3.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SVector</span><span class=\"p\">(</span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6.0</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">SVector</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"n\">SOneTo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"mf\">4.0</span>\n<span class=\"w\"> </span><span class=\"mf\">5.0</span>\n<span class=\"w\"> </span><span class=\"mf\">6.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SVector</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"mf\">9.0</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">SVector</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"n\">SOneTo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"mf\">1.0</span>\n<span class=\"w\"> </span><span class=\"mf\">0.25</span>\n<span class=\"w\"> </span><span class=\"mf\">0.1111111111111111</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WeightedEuclidean</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span>\n<span class=\"kt\">WeightedEuclidean</span><span class=\"p\">{</span><span class=\"kt\">SVector</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">}}([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.1111111111111111</span><span class=\"p\">])</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Mahalanobis</span><span class=\"p\">(</span><span class=\"n\">Diagonal</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">))</span>\n<span class=\"kt\">Mahalanobis</span><span class=\"p\">{</span><span class=\"kt\">Diagonal</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">SVector</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">}}}([</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"mf\">0.1111111111111111</span><span class=\"p\">])</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"mf\">18.138</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"mf\">30.080</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">d1</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">y</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"mf\">3.026</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"mf\">19.406</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"mf\">30.923</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">d2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"mf\">3.093</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Apparently <code>d1</code> wins, in all scenarios, but how should I read these numbers:</p>",
        "id": 524001567,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749842168
    },
    {
        "content": "<p>The results with <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/Chairmarks\">Chairmarks.jl</a> are different:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@b</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"mf\">18.923</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@b</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"mf\">30.557</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@b</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">d1</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"mf\">3.235</span><span class=\"w\"> </span><span class=\"n\">ns</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@b</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"mf\">19.091</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@b</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"mf\">30.215</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@b</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">d2</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"mf\">3.198</span><span class=\"w\"> </span><span class=\"n\">ns</span>\n</code></pre></div>",
        "id": 524003090,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749843011
    },
    {
        "content": "<p>Appreciate any help interpreting these results.</p>",
        "id": 524003330,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749843105
    },
    {
        "content": "<p><code>$</code> means treat it like a local variable. If the computation will be carried out in an inner loop somewhere where all the variables are local, then interpolate everything.</p>\n<p>Can you explain what you see as different in the chairmarks results? they look remarkably similar to me, less than 1ns difference from their benchmarktools counterparts for each of them</p>",
        "id": 524012795,
        "sender_full_name": "Eric Hanson",
        "timestamp": 1749848010
    },
    {
        "content": "<p>They are pretty much the same, and I guess 1ns difference is irrelevant in general. Thank you for clarifying the use of $</p>",
        "id": 524012931,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749848091
    },
    {
        "content": "<p>Nowadays global variables may be types, so it often makes sense to pass a typed global variable to the benchmarked function <strong>without interpolation</strong>, to prevent unwanted constant folding.</p>",
        "id": 524018350,
        "sender_full_name": "Neven Sajko",
        "timestamp": 1749851423
    },
    {
        "content": "<p>Can you elaborate on that <span class=\"user-mention\" data-user-id=\"727071\">@Neven Sajko</span> ?</p>",
        "id": 524018562,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749851565
    },
    {
        "content": "<p>How the example above is affected by your comment?</p>",
        "id": 524018579,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749851576
    },
    {
        "content": "<p>When you do <code>@btime $d1($x, $y)</code> or <code>@btime $d2($x, $y)</code> above, you're more or less benchmarking a constant expression. This can be pointless, it's possibly not what you want to benchmark, because the compiler could potentially optimize away the whole thing, leaving you benchmarking nothing. The timing would still come up at around 1-3 ns due to measurement error.</p>\n<p>My suggestion is to instead use global variables directly when benchmarking, but those global variables should have a declared type. The compiler doesn't know the value of a global variable, so it will not be constant propagated (unless the type has only a single instance, as with <code>Nothing</code>, <code>Missing</code>, or <code>Val{SomeParameter}</code>). If some expression is intended to actually be constant during benchmarking, personally I still never use interpolation, preferring to use <code>const</code> and auxiliary functions where some arguments are constant. So my style is to run <code>@btime f(a, b, c)</code>, where <code>f</code> is a constant binding (usually just a global <code>function</code> constant), while <code>a</code>, <code>b</code>, etc., are typed global variables. That way it's more clear what's happening.</p>\n<p>Here's how I would perhaps have done the benchmark, assuming the metric functions are supposed to be compile-time constants, while the values of <code>x</code> and <code>y</code> should <em>not</em> be known to the compiler:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">LinearAlgebra</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StaticArrays</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Distances</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BenchmarkTools</span>\n<span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">SVector</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SVector</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"p\">)</span>\n<span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SVector</span><span class=\"p\">(</span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6.0</span><span class=\"p\">)</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SVector</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"mf\">9.0</span><span class=\"p\">)</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WeightedEuclidean</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Mahalanobis</span><span class=\"p\">(</span><span class=\"n\">Diagonal</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">))</span>\n<span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>There are also some tips specifically relevant to the floating-point code that's being benchmarked here: benchmarking merely a single call of the metric doesn't seem relevant, because that's not what happens in programs in the real world. In the real world, usually what you want is for the code to be vectorized by the compiler, which may happen if you're running the metric function in each iteration of a loop. So, to benchmark something like this, a more relevant experiment might be to benchmark a function which calls the metric for each point in a vector of points.</p>",
        "id": 524022186,
        "sender_full_name": "Neven Sajko",
        "timestamp": 1749854291
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"727071\">@Neven Sajko</span> . Very useful tips.</p>",
        "id": 524022406,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749854485
    },
    {
        "content": "<p>The usual trick to \"interpolate the type but not the value\" is <code>@btime f(($(Ref(x)))[])</code>, which isn't the most readable thing, so you may instead want to do <code>xref = Ref(x); @btime f(($xref)[])</code>.</p>\n<p>This is similar to doing <code>const xref = Ref(x)</code> and not interpolating, but without limiting the rest of your Julia session by adding a <code>const</code> to your global namespace. (Admittedly less of an issue with the new binding partitioning in 1.12, but even there you can't un-<code>const</code> a name, only rebind it to a different <code>const</code> value).</p>\n<p>It's also very similar to a typed global <code>x::MyType = ...</code> and no interpolation, but similarly avoids irreversibly attaching <code>MyType</code> to <code>x</code> for the rest of the Julia session. Also, the implementation of typed globals guarantees atomic reads and writes, which adds a tiny but nonzero extra cost to accessing them, compared to dereferencing a constant/interpolated <code>Ref</code>.</p>",
        "id": 524023332,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1749855268
    },
    {
        "content": "<p>I wonder if <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/BenchmarkTools\">BenchmarkTools.jl</a> or <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/Chairmarks\">Chairmarks.jl</a> could save users from these pitfalls. It is really tricky to get things right even as an experienced Julia programmer. You basically need to understand how the compiler works to do benchmarks correctly nowadays.</p>",
        "id": 524024323,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749856038
    },
    {
        "content": "<p>I don't think there's been any change over time except the introduction of typed globals, which gives you a third alternative to <code>const Ref(...)</code> or <code>($(Ref(...)))[]</code> but otherwise hasn't changed anything. (And the only effect of the binding partitioning in 1.12 is that you can change the value of a <code>const</code> later, which may reduce your hesitation to use <code>const</code> for one-off benchmarking values. It changes nothing about how <code>const</code> and benchmarking interact.)</p>",
        "id": 524025580,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1749856974
    },
    {
        "content": "<p>The point being, you've always needed some understanding of this to get microbenchmarks right.</p>",
        "id": 524025680,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1749857065
    },
    {
        "content": "<p>But honestly, I think the best way of addressing most of these things is to use <code>setup</code> more actively. You never need to interpolate values defined in <code>setup</code> (and it's not possible anyway).</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">setup</span><span class=\"o\">=</span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c\"># random value, compiler can only know the type</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c\"># fixed value but the compiler should only see the type, no constprop</span>\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"w\">  </span><span class=\"c\"># otherwise</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 524026015,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1749857319
    },
    {
        "content": "<p>Setup is a good suggestion. Will try to use it more.</p>",
        "id": 524026151,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1749857438
    }
]