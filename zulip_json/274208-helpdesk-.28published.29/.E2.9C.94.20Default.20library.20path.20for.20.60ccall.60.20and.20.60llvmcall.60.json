[
    {
        "content": "<p>Say I write something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">ccall</span><span class=\"p\">(</span><span class=\"ss\">:printf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Cstring</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"s\">\"hello there!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"go\">hello there!</span>\n<span class=\"go\">13</span>\n</code></pre></div>\n<p>i,e,. without explicitly specifying a path to a library… what determines the default set of paths Julia will search for the <code>printf </code>function?</p>",
        "id": 290691913,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658684870
    },
    {
        "content": "<p>(x-posted on slack, will update either if I get an answer)</p>",
        "id": 290691959,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658684900
    },
    {
        "content": "<p>it should check the usual library paths, since iirc it just delegates that to <code>dlsym</code></p>",
        "id": 290692251,
        "sender_full_name": "Sukera",
        "timestamp": 1658685370
    },
    {
        "content": "<p>or <code>LD_LIBRARY_PATH</code> on linux, or the other usual places for libraries, which is system dependent</p>",
        "id": 290692258,
        "sender_full_name": "Sukera",
        "timestamp": 1658685406
    },
    {
        "content": "<p>e.g. Windows also checks the current directory, IIRC</p>",
        "id": 290692261,
        "sender_full_name": "Sukera",
        "timestamp": 1658685416
    },
    {
        "content": "<p>Symbols in libraries dlopened with RTLD_GLOBAL are available without specifying the library (which is also a good way to get clashes between different libraries providing same symbols)</p>",
        "id": 290692269,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1658685439
    },
    {
        "content": "<p>Oh cool</p>",
        "id": 290692706,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658686091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306754\">Sukera</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Default.20library.20path.20for.20.60ccall.60.20and.20.60llvmcall.60/near/290692258\">said</a>:</p>\n<blockquote>\n<p>or <code>LD_LIBRARY_PATH</code> on linux, or the other usual places for libraries, which is system dependent</p>\n</blockquote>\n<p>I'm not sure this is relevant.  the library must be already dlopened in order to call a symbol without specifying the path, it isn't like <code>ccall</code> starts randomly dlopening all possible libraries it can find in <code>LD_LIBRARY_PATH</code></p>",
        "id": 290692788,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1658686210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269186\">Mosè Giordano</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Default.20library.20path.20for.20.60ccall.60.20and.20.60llvmcall.60/near/290692269\">said</a>:</p>\n<blockquote>\n<p>Symbols in libraries dlopened with RTLD_GLOBAL are available without specifying the library (which is also a good way to get clashes between different libraries providing same symbols)</p>\n</blockquote>\n<p>example:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">shell</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"w\"></span>\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">return</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">shell</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">fPIC</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">libfoo</span><span class=\"o\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Libdl</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">dlopen</span><span class=\"p\">(</span><span class=\"s\">\"./libfoo.so\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RTLD_GLOBAL</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"kt\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"mh\">0x0000000002aa3fd0</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@ccall</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"o\">::</span><span class=\"kt\">Cint</span><span class=\"w\"></span>\n<span class=\"mi\">42</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">julia</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"></span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Libdl</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">dlopen</span><span class=\"p\">(</span><span class=\"s\">\"./libfoo.so\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"kt\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"mh\">0x0000000000faf670</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@ccall</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"o\">::</span><span class=\"kt\">Cint</span><span class=\"w\"></span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"n\">julia</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">undefined</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"></span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290692947,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1658686465
    },
    {
        "content": "<p>Success! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Libdl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StaticMPI</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">dlopen</span><span class=\"p\">(</span><span class=\"s\">\"libmpi\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RTLD_GLOBAL</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"kt\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"mh\">0x00007ff9385475a0</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MPI_Init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">MPI_SUCCESS</span><span class=\"w\"></span>\n<span class=\"nb\">true</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290693126,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658686748
    },
    {
        "content": "<p>I must say I'm quite interested in the possibility of having a standalone MPI application written in julia.  on Fugaku I had lots of jobs dying because the system couldn't load a random library, especially in large jobs (~400 nodes, which they actually still call \"small\" jobs)</p>",
        "id": 290693256,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1658686927
    },
    {
        "content": "<p>just would be nice if it were the regular <code>MPI</code> package :/</p>",
        "id": 290693288,
        "sender_full_name": "Sukera",
        "timestamp": 1658686996
    },
    {
        "content": "<p>sure, it'd be nice if this whole static compilation wasn't an alien dialect <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 290693340,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1658687050
    },
    {
        "content": "<p>So far it seems to be working FWIW! All the usual caveats about no allocations, no dynamic dispatch, etc of course apply, but in HPC obsessively micromanaging your memory is kinda standard anyways... The one thing I'd still like is to intercept errors  and return a custom exit code instead of  having to avoid things that could error altogether.</p>",
        "id": 290693349,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658687090
    },
    {
        "content": "<p>BTW, <code>MPI.jl</code> does dlopen libmpi with <code>RTLD_GLOBAL</code> on unix systems: <a href=\"https://github.com/JuliaParallel/MPI.jl/blob/a8d4d6400d9f91677c72f261ae0eb4db4b04e1b2/src/MPI.jl#L110\">https://github.com/JuliaParallel/MPI.jl/blob/a8d4d6400d9f91677c72f261ae0eb4db4b04e1b2/src/MPI.jl#L110</a></p>",
        "id": 290693362,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1658687149
    },
    {
        "content": "<p>For posterity re the initial question, <code>dlopen</code>  was the key thing I was missing for making the symbols available to be <code>ccall</code>/ <code>llvmcall</code>'d  directly,  while <code>LD_LIBRARY_PATH </code> seems to be what gets used <em>during</em> the <code>dlopen</code> to find <code>libmpi</code> (i.e., if I didn't have <code>/opt/local/lib/mpich-mp</code> (my local MPICH install)  in my <code>LD_LIBRARY_PATH</code> already I think I'd have to write out the full thing in the dlopen above)</p>",
        "id": 290693405,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658687202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"293896\">Brenhin Keller</span> has marked this topic as resolved.</p>",
        "id": 290693418,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658687250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"293896\">Brenhin Keller</span> has marked this topic as unresolved.</p>",
        "id": 290693915,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658688015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"293896\">Brenhin Keller</span> has marked this topic as resolved.</p>",
        "id": 290693917,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658688017
    },
    {
        "content": "<p>You should be able to just stick the <code>dlopen</code> in your <code>__init__()</code></p>",
        "id": 290699843,
        "sender_full_name": "Mason Protter",
        "timestamp": 1658696806
    },
    {
        "content": "<p>Ooh, maybe I  should just have <a href=\"https://github.com/search?q=StaticMPI.jl&amp;type=Repositories\">StaticMPI.jl</a> do that by default with MPICH_jll so that people don't  get segfaults when they paste code into the repl without considering the implications  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 290700125,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658697234
    },
    {
        "content": "<p>A tradeoff between convenience and flexibility (if people want to dlopen their cluster's libmpi)</p>",
        "id": 290700188,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658697307
    },
    {
        "content": "<p>You could make the behaviour depend on an environment variable</p>",
        "id": 290700259,
        "sender_full_name": "Mason Protter",
        "timestamp": 1658697384
    },
    {
        "content": "<p>Could you use MPItrampoline?</p>",
        "id": 290701526,
        "sender_full_name": "Fredrik Ekre",
        "timestamp": 1658699199
    },
    {
        "content": "<p>Hmm, possibly — I should look into that</p>",
        "id": 290701758,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658699559
    },
    {
        "content": "<p>Huh, looks like <code>MPItrampoline_jll.is_available() == false</code> on my system.. I wonder how similar the MPItrampoline libmpi interface is to the MPICH one -- since currently I've been targeting that</p>",
        "id": 290710000,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1658712537
    },
    {
        "content": "<p>What I ended up going with:</p>\n<ul>\n<li>Check that no libmpi is already loaded, using</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">ccall</span><span class=\"p\">(</span><span class=\"ss\">:dlsym</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Cvoid</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Cstring</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"MPI_Init\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nb\">C_NULL</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>handle</code> is the (OS-dependent) pseudo-pointer <code>RTLD_DEFAULT</code></p>\n<ul>\n<li>If no libmpi is already loaded, dlopen the libmpi from MPICH_jll in  <code>__init__()</code></li>\n</ul>",
        "id": 291514151,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1659303885
    }
]