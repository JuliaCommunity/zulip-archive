[
    {
        "content": "<p>Hi, </p>\n<p>I'm interested in how to implement calculation of partial derivatives/marginal effects similar to the package marginaleffects in r. </p>\n<p>I translated some code from the excellent <a href=\"https://marginaleffects.com/vignettes/slopes.html\">documentation</a>, to simply calculate the marginal effect of hp for every unit in the dataset.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">GLM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RDatasets</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DataFrames</span>\n\n<span class=\"n\">mtcars</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dataset</span><span class=\"p\">(</span><span class=\"s\">\"datasets\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"mtcars\"</span><span class=\"p\">)</span>\n<span class=\"n\">rename!</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lowercase</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">)))</span>\n<span class=\"n\">lm_mod</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">glm</span><span class=\"p\">(</span><span class=\"nd\">@formula</span><span class=\"p\">(</span><span class=\"n\">mpg</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cyl</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">mtcars</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Normal</span><span class=\"p\">())</span>\n\n<span class=\"n\">partial_derivative</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eps</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:hp</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">.-</span><span class=\"w\"> </span><span class=\"n\">eps</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"ss\">:hp</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">d2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:hp</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">.+</span><span class=\"w\"> </span><span class=\"n\">eps</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"ss\">:hp</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">d1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"n\">round</span><span class=\"o\">.</span><span class=\"p\">((</span><span class=\"n\">p2</span><span class=\"o\">-</span><span class=\"n\">p1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">eps</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">digits</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">partial_derivative</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lm_mod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1e-4</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What would be a reasonable way to implemented this in a way that could give me unit-level marginaleffects for every variable in the model efficiently? <br>\nI have been looking at ForwardDiff, but haven't been able to figure out how to do it.</p>",
        "id": 438549401,
        "sender_full_name": "Edvin",
        "timestamp": 1715683823
    },
    {
        "content": "<p>Not sure I understand your question - are you just asking for how to do the <code>partial_derivative</code> function for every variable in the model? That would just be <code>partial_derivative(data, model, eps, var)</code> end than replace <code>var</code> with whatever variable you're interested in, or use the <code>StatsModels</code> API to extract all RHS variables and vall that function on all of them.</p>",
        "id": 438624211,
        "sender_full_name": "Nils",
        "timestamp": 1715708481
    },
    {
        "content": "<p>Not so much asking for ways to expand this function. But more so interested if there's some alternative implementation that would be faster/scale better with more variables and data.</p>",
        "id": 438629027,
        "sender_full_name": "Edvin",
        "timestamp": 1715710546
    },
    {
        "content": "<p>I was looking through the code for <a href=\"https://juliahub.com/ui/Packages/General/Effects\">Effects.jl</a> but couldn't really understand the implementation they are using there.</p>",
        "id": 438629277,
        "sender_full_name": "Edvin",
        "timestamp": 1715710655
    },
    {
        "content": "<p>Thanks for answering Nils, let's continue on the discourse (i xposted) there: <a href=\"https://discourse.julialang.org/t/how-to-implement-r-like-marginaleffects/114260\">https://discourse.julialang.org/t/how-to-implement-r-like-marginaleffects/114260</a></p>",
        "id": 438734190,
        "sender_full_name": "Edvin",
        "timestamp": 1715755020
    }
]