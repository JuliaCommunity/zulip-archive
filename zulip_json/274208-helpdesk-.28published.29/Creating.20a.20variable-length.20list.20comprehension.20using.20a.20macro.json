[
    {
        "content": "<p>I'm trying to create a list comprehension to create a list of tuples of length <code>k</code>, and I figured that macro is the way to do it.<br>\nAn example for k = 2 of the list comprehension i'm trying to get (for some given <code>n</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>The m-th index i_m would go from i_{m-1}+1 to n-k+m.</p>\n<p>I tried creating the following macro, but this seems way off:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">iterator_expressions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">        </span><span class=\"kt\">Expr</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"k\">quote</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"o\">:$</span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Expr</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"ss\">:comprehension</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"n\">iterator_expressions</span><span class=\"o\">...</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>for some reason i'm only getting a matrix of expressions, and I have no idea what i'm doing wrong. Please help!</p>",
        "id": 352515947,
        "sender_full_name": "Or Golan",
        "timestamp": 1682424050
    },
    {
        "content": "<p>Why do you need a macro for that? </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"n\">create_indices</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 352518859,
        "sender_full_name": "Leandro Mart√≠nez",
        "timestamp": 1682424825
    },
    {
        "content": "<p>because for <code>k=3</code> I need</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n</code></pre></div>",
        "id": 352519158,
        "sender_full_name": "Or Golan",
        "timestamp": 1682424912
    },
    {
        "content": "<p><del><code>collect(zip([s:s-k+n for s in 1:k]...))</code>?</del></p>",
        "id": 352519228,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1682424938
    },
    {
        "content": "<p>This will not generate the correct indices, but very likely you can adapt it to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">ntuple</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">                   </span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">i</span>\n<span class=\"w\">              </span><span class=\"k\">end</span>\n<span class=\"w\">              </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span>\n<span class=\"w\">           </span><span class=\"p\">]</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">create_indices</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>(in any case I'm sure a macro will only make things more complicated. If you can write the indexing correctly in a macro, it will be easier with a standar function)</p>",
        "id": 352520708,
        "sender_full_name": "Leandro Mart√≠nez",
        "timestamp": 1682425281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455681\">Leandro Mart√≠nez</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Creating.20a.20variable-length.20list.20comprehension.20using.20a.20macro/near/352520708\">said</a>:</p>\n<blockquote>\n<p>This will not generate the correct indices, but very likely you can adapt it to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">ntuple</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">                   </span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">i</span>\n<span class=\"w\">              </span><span class=\"k\">end</span>\n<span class=\"w\">              </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span>\n<span class=\"w\">           </span><span class=\"p\">]</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">create_indices</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>(in any case I'm sure a macro will only make things more complicated. If you can write the indexing correctly in a macro, it will be easier with a standar function)</p>\n</blockquote>\n<p>I'm not sure this is possible as the indices depend on each other:</p>\n<p>The m-th index i_m would go from i_{m-1}+1 to n-k+m.</p>",
        "id": 352523237,
        "sender_full_name": "Or Golan",
        "timestamp": 1682425840
    },
    {
        "content": "<p>Getting that kind of thing right is tricky, but it is trickier with a macro. In either case you need to figure out which is the (possible recursive) algorithm that will generate the correct sequence. And then, implementing that as a function is easier than as a macro.</p>",
        "id": 352555008,
        "sender_full_name": "Leandro Mart√≠nez",
        "timestamp": 1682433144
    },
    {
        "content": "<p>I think, you can write iterator with a somewhat complicated state. Update of the state can have some overhead of course,  but usually it should be overshadowed by main calculations.</p>",
        "id": 352584442,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1682439532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327072\">@Or Golan</span> It's not very clear to me what you're trying to do here, but here's me fixing the syntax errors in your macro. It at least correctly parses now, but I don't know if this is exactly the iteration layout you wanted, I left all the actual logic how you wrote it. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">iterator_expressions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">        </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">s</span><span class=\"o\">:$</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Expr</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"ss\">:comprehension</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">iterator_expressions</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">esc</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@create_indices</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">3√ó3 Matrix{Tuple{Int64, Int64}}:</span>\n<span class=\"go\"> (1, 2)  (1, 3)  (1, 4)</span>\n<span class=\"go\"> (2, 2)  (2, 3)  (2, 4)</span>\n<span class=\"go\"> (3, 2)  (3, 3)  (3, 4)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@create_indices</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">2√ó2√ó2 Array{Tuple{Int64, Int64, Int64}, 3}:</span>\n<span class=\"go\">[:, :, 1] =</span>\n<span class=\"go\"> (1, 2, 3)  (1, 3, 3)</span>\n<span class=\"go\"> (2, 2, 3)  (2, 3, 3)</span>\n\n<span class=\"go\">[:, :, 2] =</span>\n<span class=\"go\"> (1, 2, 4)  (1, 3, 4)</span>\n<span class=\"go\"> (2, 2, 4)  (2, 3, 4)</span>\n</code></pre></div>",
        "id": 352590381,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682441002
    },
    {
        "content": "<p>I suspect this isn't the logic you actually intended though because the example you have <code>[[i, j] for i=1:(n-k+1) for j=(k+i-1):(n-k+2)]</code> is different</p>",
        "id": 352591147,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682441184
    },
    {
        "content": "<p>But also that example you gave contracts what you said about \"The m-th index i_m would go from i_{m-1}+1 to n-k+m.\"</p>",
        "id": 352591863,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682441363
    },
    {
        "content": "<p>I'm trying to get all <code>k</code>-combinations from some collection of length <code>n</code></p>\n<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Creating.20a.20variable-length.20list.20comprehension.20using.20a.20macro/near/352591147\">said</a>:</p>\n<blockquote>\n<p>I suspect this isn't the logic you actually intended though because the example you have <code>[[i, j] for i=1:(n-k+1) for j=(k+i-1):(n-k+2)]</code> is different</p>\n</blockquote>\n<p>that's actually the same for <code>k=2</code> - <code>k+i-1 = i+1</code>.</p>\n<p>I started with a recursive function that does this, but I'm trying to reduce the number of allocations, so I thought that generating the list comprehension using a macro would be more efficient. Here is the recursive function:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">combs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span>\n<span class=\"w\">        </span><span class=\"n\">el</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">combs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">])</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"k\">end</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"n\">subcombs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">subcomb</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">subcombs</span>\n<span class=\"w\">                </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">combs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">subcomb</span><span class=\"p\">])</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">combs</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 352600339,
        "sender_full_name": "Or Golan",
        "timestamp": 1682443761
    },
    {
        "content": "<p>Your <code>combs</code> is a <code>Vector{Any}</code>, you should give it a concrete eltype</p>",
        "id": 352602023,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682444235
    },
    {
        "content": "<p>Just for fun and not in any way efficient:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reverse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">Filter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">issorted</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!&lt;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">))))</span>\n<span class=\"n\">create_indices</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 352602613,
        "sender_full_name": "Gunnar Farneb√§ck",
        "timestamp": 1682444389
    },
    {
        "content": "<p>Regarding the macro approach,</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"p\">([[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)]))</span>\n<span class=\"kt\">Expr</span>\n<span class=\"w\">  </span><span class=\"n\">head</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"n\">comprehension</span>\n<span class=\"w\">  </span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">      </span><span class=\"n\">head</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"n\">flatten</span>\n<span class=\"w\">      </span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">          </span><span class=\"n\">head</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"n\">generator</span>\n<span class=\"w\">          </span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n<span class=\"w\">            </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">              </span><span class=\"n\">head</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"n\">flatten</span>\n<span class=\"w\">              </span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n<span class=\"w\">                </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">            </span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">              </span><span class=\"n\">head</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">              </span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}((</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n<span class=\"w\">                </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">                </span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n</code></pre></div>\n<p>indicates that you would need to nest <code>flatten</code> and <code>generator</code> expressions.</p>\n<p>But I tend to agree with the opinion that an iterator should be the best approach for this problem.</p>",
        "id": 352603615,
        "sender_full_name": "Gunnar Farneb√§ck",
        "timestamp": 1682444662
    },
    {
        "content": "<p>Or you could just use <code>Combinatorics.combinations</code> of course. :-)</p>",
        "id": 352604810,
        "sender_full_name": "Gunnar Farneb√§ck",
        "timestamp": 1682445001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327072\">Or Golan</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Creating.20a.20variable-length.20list.20comprehension.20using.20a.20macro/near/352600339\">said</a>:</p>\n<blockquote>\n<p>I'm trying to get all <code>k</code>-combinations from some collection of length <code>n</code></p>\n<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Creating.20a.20variable-length.20list.20comprehension.20using.20a.20macro/near/352591147\">said</a>:</p>\n<blockquote>\n<p>I suspect this isn't the logic you actually intended though because the example you have <code>[[i, j] for i=1:(n-k+1) for j=(k+i-1):(n-k+2)]</code> is different</p>\n</blockquote>\n<p>that's actually the same for <code>k=2</code> - <code>k+i-1 = i+1</code>.</p>\n</blockquote>\n<p>Are you sure?</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">           </span><span class=\"p\">[[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"go\">10-element Vector{Vector{Int64}}:</span>\n<span class=\"go\"> [1, 2]</span>\n<span class=\"go\"> [1, 3]</span>\n<span class=\"go\"> [1, 4]</span>\n<span class=\"go\"> [1, 5]</span>\n<span class=\"go\"> [2, 3]</span>\n<span class=\"go\"> [2, 4]</span>\n<span class=\"go\"> [2, 5]</span>\n<span class=\"go\"> [3, 4]</span>\n<span class=\"go\"> [3, 5]</span>\n<span class=\"go\"> [4, 5]</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">iterator_expressions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">               </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">s</span><span class=\"o\">:$</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"kt\">Expr</span><span class=\"p\">(</span>\n<span class=\"w\">               </span><span class=\"ss\">:comprehension</span><span class=\"p\">,</span>\n<span class=\"w\">               </span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">),</span>\n<span class=\"w\">               </span><span class=\"p\">(</span><span class=\"n\">iterator_expressions</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">,</span>\n<span class=\"w\">           </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">esc</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"go\">@create_indices (macro with 1 method)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@create_indices</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">4√ó4 Matrix{Tuple{Int64, Int64}}:</span>\n<span class=\"go\"> (1, 2)  (1, 3)  (1, 4)  (1, 5)</span>\n<span class=\"go\"> (2, 2)  (2, 3)  (2, 4)  (2, 5)</span>\n<span class=\"go\"> (3, 2)  (3, 3)  (3, 4)  (3, 5)</span>\n<span class=\"go\"> (4, 2)  (4, 3)  (4, 4)  (4, 5)</span>\n</code></pre></div>",
        "id": 352605125,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682445083
    },
    {
        "content": "<p>Looks like you want the upper-triangle of what the macro is making</p>",
        "id": 352605689,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682445212
    },
    {
        "content": "<p>Yeah, the macro I tried writing was wrong, but in two dimensions. Thanks to you it is wrong only in one way, but when I tried to correct the logic I'm still way off:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">local</span><span class=\"w\"> </span><span class=\"n\">i0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">iterator_expressions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">        </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">:$</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Expr</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"ss\">:comprehension</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">iterator_expressions</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">esc</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>It's telling me that <code>i0</code> is not defined, and if I define it outside, it says that <code>i1</code> is not defined. I think there is something to do with hygiene here?</p>",
        "id": 352609800,
        "sender_full_name": "Or Golan",
        "timestamp": 1682446463
    },
    {
        "content": "<p>Here's how I'd do this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@generated</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Val</span><span class=\"p\">{</span><span class=\"kt\">k</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">k</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"o\">=:</span><span class=\"p\">(</span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">‚àà</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)))))</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old</span>\n<span class=\"w\">               </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"k\">quote</span>\n<span class=\"w\">                   </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">‚àà</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">lower</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"w\">                       </span><span class=\"o\">$</span><span class=\"n\">old</span>\n<span class=\"w\">                   </span><span class=\"k\">end</span>\n<span class=\"w\">               </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">quote</span>\n<span class=\"w\">               </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"o\">$</span><span class=\"kt\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"p\">}[]</span>\n<span class=\"w\">               </span><span class=\"o\">$</span><span class=\"n\">ex</span>\n<span class=\"w\">               </span><span class=\"n\">out</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n</code></pre></div>",
        "id": 352611523,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682446944
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Val</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">10-element Vector{Tuple{Int64, Int64}}:</span>\n<span class=\"go\"> (1, 2)</span>\n<span class=\"go\"> (1, 3)</span>\n<span class=\"go\"> (1, 4)</span>\n<span class=\"go\"> (1, 5)</span>\n<span class=\"go\"> (2, 3)</span>\n<span class=\"go\"> (2, 4)</span>\n<span class=\"go\"> (2, 5)</span>\n<span class=\"go\"> (3, 4)</span>\n<span class=\"go\"> (3, 5)</span>\n<span class=\"go\"> (4, 5)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Val</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">20-element Vector{Tuple{Int64, Int64, Int64}}:</span>\n<span class=\"go\"> (1, 3, 5)</span>\n<span class=\"go\"> (1, 3, 6)</span>\n<span class=\"go\"> (1, 3, 7)</span>\n<span class=\"go\"> (1, 3, 8)</span>\n<span class=\"go\"> (1, 4, 6)</span>\n<span class=\"go\"> (1, 4, 7)</span>\n<span class=\"go\"> (1, 4, 8)</span>\n<span class=\"go\"> (1, 5, 7)</span>\n<span class=\"go\"> (1, 5, 8)</span>\n<span class=\"go\"> (1, 6, 8)</span>\n<span class=\"go\"> (2, 4, 6)</span>\n<span class=\"go\"> (2, 4, 7)</span>\n<span class=\"go\"> (2, 4, 8)</span>\n<span class=\"go\"> (2, 5, 7)</span>\n<span class=\"go\"> (2, 5, 8)</span>\n<span class=\"go\"> (2, 6, 8)</span>\n<span class=\"go\"> (3, 5, 7)</span>\n<span class=\"go\"> (3, 5, 8)</span>\n<span class=\"go\"> (3, 6, 8)</span>\n<span class=\"go\"> (4, 6, 8)</span>\n</code></pre></div>",
        "id": 352611797,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682447009
    },
    {
        "content": "<p>Also something along these lines may help:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Cartesian</span><span class=\"o\">.</span><span class=\"nd\">@nloops</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">-&gt;</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"kt\">i_</span><span class=\"p\">{</span><span class=\"kt\">m</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">       </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Cartesian</span><span class=\"o\">.</span><span class=\"nd\">@ntuple</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 352614774,
        "sender_full_name": "aplavin",
        "timestamp": 1682447884
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> ! I was able to build exactly what I needed from this code.<br>\nIn case anyone else is interested:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@generated</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">create_indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Val</span><span class=\"p\">{</span><span class=\"kt\">k</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">k</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"o\">=:</span><span class=\"p\">(</span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:vect</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">‚àà</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)))))</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old</span>\n<span class=\"w\">        </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">quote</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">‚àà</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">lower</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"o\">$</span><span class=\"n\">old</span>\n<span class=\"w\">            </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">quote</span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">}[]</span>\n<span class=\"w\">        </span><span class=\"o\">$</span><span class=\"n\">ex</span>\n<span class=\"w\">        </span><span class=\"n\">out</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>By the way, why did you need to use <code>Val</code>?</p>",
        "id": 352618947,
        "sender_full_name": "Or Golan",
        "timestamp": 1682449092
    },
    {
        "content": "<p>Why are you storing vectors instead of Tuples?</p>",
        "id": 352619827,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682449347
    },
    {
        "content": "<blockquote>\n<p>By the way, why did you need to use Val?</p>\n</blockquote>\n<p>That's because generated functions operate on types rather than values, so to generate a different number of loops depending on <code>k</code>, I needed to lift <code>k</code> into the type domain using <code>Val</code></p>",
        "id": 352619983,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682449407
    },
    {
        "content": "<p>So how did the performance end up compared to <code>Combinatorics.combinations</code>?</p>",
        "id": 352624340,
        "sender_full_name": "Gunnar Farneb√§ck",
        "timestamp": 1682450903
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Combinatorics</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@generated</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">create_indices_tup</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Val</span><span class=\"p\">{</span><span class=\"kt\">k</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">k</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"o\">=:</span><span class=\"p\">(</span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">‚àà</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)))))</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old</span>\n<span class=\"w\">               </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"k\">quote</span>\n<span class=\"w\">                   </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">‚àà</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">lower</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"w\">                       </span><span class=\"o\">$</span><span class=\"n\">old</span>\n<span class=\"w\">                   </span><span class=\"k\">end</span>\n<span class=\"w\">               </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">quote</span>\n<span class=\"w\">               </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"o\">$</span><span class=\"kt\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"p\">}[]</span>\n<span class=\"w\">               </span><span class=\"o\">$</span><span class=\"n\">ex</span>\n<span class=\"w\">               </span><span class=\"n\">out</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@generated</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">create_indices_vec</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Val</span><span class=\"p\">{</span><span class=\"kt\">k</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">k</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foldr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"o\">=:</span><span class=\"p\">(</span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:vect</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">‚àà</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)))))</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old</span>\n<span class=\"w\">               </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"k\">quote</span>\n<span class=\"w\">                   </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"ss\">:i_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">‚àà</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">lower</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"w\">                       </span><span class=\"o\">$</span><span class=\"n\">old</span>\n<span class=\"w\">                   </span><span class=\"k\">end</span>\n<span class=\"w\">               </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"k\">quote</span>\n<span class=\"w\">               </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">}[]</span>\n<span class=\"w\">               </span><span class=\"o\">$</span><span class=\"n\">ex</span>\n<span class=\"w\">               </span><span class=\"n\">out</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">           </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">Combinatorics</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:$</span><span class=\"n\">n</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">k</span><span class=\"p\">))</span>\n<span class=\"w\">           </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">create_indices_vec</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">n</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"kt\">Val</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">k</span><span class=\"p\">))</span>\n<span class=\"w\">           </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">create_indices_tup</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">n</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"kt\">Val</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">k</span><span class=\"p\">))</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n<span class=\"go\">  356.250 ns (22 allocations: 1.30 KiB)</span>\n<span class=\"go\">  326.026 ns (13 allocations: 1.23 KiB)</span>\n<span class=\"go\">  122.733 ns (2 allocations: 272 bytes)</span>\n</code></pre></div>",
        "id": 352626670,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682451784
    },
    {
        "content": "<p>This is of course under the assumption that you can statically know the value of <code>k</code>.</p>",
        "id": 352626737,
        "sender_full_name": "Mason Protter",
        "timestamp": 1682451815
    },
    {
        "content": "<p>I used vec since I want to index a collection with it</p>",
        "id": 352709582,
        "sender_full_name": "Or Golan",
        "timestamp": 1682493453
    }
]