[
    {
        "content": "<p>I am stuck with a simple recursion algorithm, and would appreciate any help.</p>\n<p>Suppose we are given a data structure like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,[(</span><span class=\"mi\">2</span><span class=\"p\">,[(</span><span class=\"mi\">4</span><span class=\"p\">,[])]),(</span><span class=\"mi\">3</span><span class=\"p\">,[])]),</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,[(</span><span class=\"mi\">6</span><span class=\"p\">,[])])]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This data structure represents a forest of trees of geometries:</p>\n<p><a href=\"/user_uploads/7178/4cU8p3AAFnhBp5Or1RrQ6g4_/20230124_141753.jpg\">20230124_141753.jpg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/4cU8p3AAFnhBp5Or1RrQ6g4_/20230124_141753.jpg\" title=\"20230124_141753.jpg\"><img src=\"/user_uploads/7178/4cU8p3AAFnhBp5Or1RrQ6g4_/20230124_141753.jpg\"></a></div><p>I would like to convert this structure into a new structure:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,[]),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,[</span><span class=\"mi\">6</span><span class=\"p\">])]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>that emphasizes the parity of the circles.</p>\n<p>Namely, the circle 1 is odd and has inner circles 2 and 3 that are even, the circle 5 is odd and has inner circle 6 that is even, and the circle 4 is odd again without inner circles:</p>\n<p><a href=\"/user_uploads/7178/dooWY7lqA23CQuCj7qI6Cbvn/20230124_142342.jpg\">20230124_142342.jpg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/dooWY7lqA23CQuCj7qI6Cbvn/20230124_142342.jpg\" title=\"20230124_142342.jpg\"><img src=\"/user_uploads/7178/dooWY7lqA23CQuCj7qI6Cbvn/20230124_142342.jpg\"></a></div><p>Can you write a simple function that takes the input above and produces the desired output? I spent the whole morning trying to write it down, but my brain is not working today.</p>",
        "id": 323311620,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1674581532
    },
    {
        "content": "<p>Nothing like a good night of sleep <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span> </p>\n<p>Here is a solution with breadth-first-search:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">answer</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mapreduce</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vcat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">bfs</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">visited</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">frontier</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">root</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">isempty</span><span class=\"p\">(</span><span class=\"n\">frontier</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">popfirst!</span><span class=\"p\">(</span><span class=\"n\">frontier</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">seen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">vnode</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">visited</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">vnode</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">seen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">break</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">seen</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">frontier</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">visited</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 323521328,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1674662049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273172\">Júlio Hoffimann</span> has marked this topic as resolved.</p>",
        "id": 323548626,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674669162
    }
]