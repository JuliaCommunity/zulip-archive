[
    {
        "content": "<p>I'm currently loving the ability to finally get a little autocomplete sanity going in my <strong>Ju</strong>pyter notebooks by doing things like <code>import Parquet as pq; &lt;run cell&gt;; pq.&lt;tab&gt;</code>. However, I still spend most of my coding time in Python, and I recognize this approach might not be considered very elegant by Julia users. If it's just a matter of aesthetics, I don't mind being inelegant. My gripe with much of the pushback I've seen against Python-style import renaming is that while the compiler and type system know which function to call and what package it's in, I don't, and it's often helpful to my understanding of my own code see those little reminders of where functions come from (since where they come from informs me about what they do). </p>\n<p>My concern, though, is that I'm a Julia newbie and there are good beyond-aesthetic technical reasons to not abuse <code>import X as Y</code> that I don't understand. Is there something I'm probably missing here?</p>\n<p>Also, if it's generally actually okay to stylistically avoid naked <code>using</code> statements and always do <code>import PackageName as pn</code> instead for explicitness without losing too much conciseness, is it better Julia style to use uppercase (<code>import Parquet as PQ</code>) or lowercase (<code>import Parquet as pq</code>)? I have been using lowercase because everything is lowercase in Python, but I'm now wondering if uppercase is better, since Julia uses CamelCase for module names.</p>\n<p>Also, are there others out there who find the tab autocomplete and explicitness helpful? Are you Python programmers too, or is this maybe something that goes beyond comfort with a certain syntactical style?</p>",
        "id": 236356849,
        "sender_full_name": "Luke",
        "timestamp": 1619536634
    },
    {
        "content": "<p>Also I'm curious if folks have other tactics for autocomplete, code explicitness, and enabling easier removal of unused packages that I feel I rely on <code>import X as Y</code> for.</p>\n<p>One thought that comes to mind is Jupyter autocomplete could also be done with <code>using PackageName; PackageName.&lt;tab&gt;</code> and then after selecting a <code>function_name</code> one can delete the <code>PackageName.</code>part. If one is willing to be strict with oneself, one can add an explicit <code>using PackageName: function_name</code> import every time a new function is used, and later then delete the naked <code>using PackageName</code> line before committing the code, I guess, too.</p>",
        "id": 236359515,
        "sender_full_name": "Luke",
        "timestamp": 1619537515
    },
    {
        "content": "<p>I was a Python programmer. One of the problems with copying Pythons idioms over to Julia is that the Julian mechanism to distinguish public from private data is whether it's exported or not, and you can only tell which it is if you do <code>using</code>.<br>\nIn general, when it comes to autocomplete, I think Julia needs more work, but I'm pretty certain the ideal solution isn't a hierarchy of namespaces that you access with dot-syntax. Instead, I hope to have more intelligent tab-completion which calls <code>methodswith</code> and such with the correct types. At least if your concern is findability - \"what can I do with this type?\" or \"which functions are in this package?\".<br>\nWrt. explicitness, then yes, in package code, I think <code>import X as Y</code> is alright, but I would only actually use it if I know there is a risk of confusion, else I would just import the things explitly and individually.</p>",
        "id": 236689066,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1619708639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272650\">Jakob Nybo Nissen</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Not.20abusing.20import.20X.20as.20Y/near/236689066\">said</a>:</p>\n<blockquote>\n<p>the Julian mechanism to distinguish public from private data is whether it's exported or not, and you can only tell which it is if you do <code>using</code>.</p>\n</blockquote>\n<p>Ah! This makes so much sense. I guess in general I'm just used to things being clear from the way they're written (like the <code>_internal_function</code> vs. <code>stable_public_api_function</code> convention) in Python, and this leaves me struggling with Julia's habit of making these things clear by how they function (like whether something's exported and available when you are <code>using</code> it).</p>\n<blockquote>\n<p>In general, when it comes to autocomplete, I think Julia needs more work, but I'm pretty certain the ideal solution isn't a hierarchy of namespaces that you access with dot-syntax. Instead, I hope to have more intelligent tab-completion which calls <code>methodswith</code> and such with the correct types. At least if your concern is findability - \"what can I do with this type?\" or \"which functions are in this package?\".</p>\n</blockquote>\n<p>I agree that Julia should be able to do a lot, but my concern here is that it's hard to figure out the initial text that can be autocompleted when structs themselves don't possess functions and imports don't keep module names/aliases. It's easy to see how one can type <code>pkg.&lt;tab&gt;</code> to convey the idea \"I want to see the things inside <code>pkg</code> as a dropdown\", but how do you create the same user experience for triggering <code>methodswith</code>? Maybe select the name of a struct and hit tab to find functions that take it as a parameter? I think there is a pretty painful UX sacrifice made by Julia avoiding syntax that explicitly conveys one-to-one struct-function and module-function relationships that exist in abundance when we write code.</p>\n<blockquote>\n<p>Wrt. explicitness, then yes, in package code, I think <code>import X as Y</code> is alright, but I would only actually use it if I know there is a risk of confusion, else I would just import the things explitly and individually.</p>\n</blockquote>\n<p>I think the hard part here is constantly trying to make judgement calls about the risk of confusion. I yearn for a simple solution like in Python where I can just always use absolute imports and rely on aliases to keep my code clean and concise.</p>\n<p>I think you're right that ultimately individual imports is probably the best style. I think the VS Code plugin already lets you ctrl-click your way from a function name back to an explicit individual import, so it's not hard to find where things come from. What's tough is actually writing the code in this paradigm. Perhaps there's a middle ground for avoiding naked <code>using</code> statements... something like initially heavily using aliasing, and then refactoring to explicit imports. Maybe I could even write a little utility to automatically convert aliased imports to explicit imports...</p>",
        "id": 236723970,
        "sender_full_name": "Luke",
        "timestamp": 1619721536
    },
    {
        "content": "<p>Anyhow, thank you for taking the time to share your thoughts and advice, Jakob, this was very helpful to me!</p>",
        "id": 236724239,
        "sender_full_name": "Luke",
        "timestamp": 1619721649
    },
    {
        "content": "<p>Exactly, we should have <code>methodswith</code> autocompletion. Ideally, that would be even better than Python's because it would be insensitive to whether it's the first or second argument.</p>",
        "id": 236890143,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1619811567
    },
    {
        "content": "<p>I love the new syntax and I've mostly just read python code to learn things in the past, so maybe there is some natural beauty to it. My personal approach to public vs private functions has been <code>M._fxn</code> is private. <code>M.fxn</code> is usually documented and any breaking changes to that will be reflected in semver, but it isn't the purpose of the package and most people don't need it. Then I export a limited set of methods (usually those presented in the README). I know it is a bit subjective but I think it makes it easy to lazily discover internals through <code>M.&lt;tab&gt;</code> without having to search through docs whilst not polluting the <code>Main</code>.</p>",
        "id": 236910252,
        "sender_full_name": "Zachary P Christensen",
        "timestamp": 1619820350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269192\">Zachary P Christensen</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Not.20abusing.20import.20X.20as.20Y/near/236910252\">said</a>:</p>\n<blockquote>\n<p>I love the new syntax and I've mostly just read python code to learn things in the past, so maybe there is some natural beauty to it. My personal approach to public vs private functions has been <code>M._fxn</code> is private. <code>M.fxn</code> is usually documented and any breaking changes to that will be reflected in semver, but it isn't the purpose of the package and most people don't need it. Then I export a limited set of methods (usually those presented in the README). I know it is a bit subjective but I think it makes it easy to lazily discover internals through <code>M.&lt;tab&gt;</code> without having to search through docs whilst not polluting the <code>Main</code>.</p>\n</blockquote>\n<p>If I'm understanding you correctly, you explicitly mark \"be careful this function may change suddenly irrespective of the semver\" functions with an underscore in Julia so that regardless of how a user imports/explores your module, they're still able to see the warning in the first character of the function name? If so, this sounds really smart, and I'll have to start getting in the habit of that, too!</p>\n<p>More broadly, I think this idea underscores how there seems to be so little cost to just doing things \"simply\" by Python convention in Julia, even though tools like <code>methodswith</code> and dynamic dispatch are more powerful tools that handle situations which Python conventions don't.</p>\n<p>Bluntly put, right now Julia doesn't really have good autocomplete or auto \"where did this function get imported from?\", and even if it did, I don't know that I've really seen a clear argument as to why using the Python conventions is bad. If I <code>import X as Y</code> and title things <code>_private_function()</code>, it might make for easy to read, easy to write, effective Julia. And it's hard to see that even if Julia gets really slick autocomplete that code written in this style would do any real harm. I'm not saying I should lazily <code>export</code> nothing and expect others to also <code>import X as Y</code> my modules, but the more I think about it, the more it just feels okay to \"overuse\" import aliasing and Python private function naming convention in Julia even though the language comes with more complicated programmatic tools that could theoretically be used instead.</p>",
        "id": 236931876,
        "sender_full_name": "Luke",
        "timestamp": 1619839069
    },
    {
        "content": "<p>Yeah, I don't think there's anything wrong with that approach</p>",
        "id": 237258883,
        "sender_full_name": "Mason Protter",
        "timestamp": 1620094586
    }
]