[
    {
        "content": "<p>Hello:</p>\n<p>I implemented tryparse broadcast and coalesce methods<br>\non my dataframe. Now, the missing cells read 'nothing' so<br>\nthat the column no longer has a datatype. </p>\n<p>I would like to convert the cells that read 'nothing' to 'NaN'</p>\n<p>How might I achieve this?</p>",
        "id": 228214993,
        "sender_full_name": "QuBit",
        "timestamp": 1614598363
    },
    {
        "content": "<p>A very similar question came up on Slack last night.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">]</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mf\">20.0</span><span class=\"p\">,</span> <span class=\"mf\">30.0</span><span class=\"p\">]</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c\"># ok, now df is your data frame with `nothings`</span>\n<span class=\"c\"># and you want them to be NaNs</span>\n\n<span class=\"k\">function</span> <span class=\"n\">nan_all_nothings</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">isnothing</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span> <span class=\"o\">.=</span> <span class=\"nb\">NaN</span>\n  <span class=\"k\">return</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">nan_all_nothings</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">nan_all_nothings</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n<span class=\"mi\">3</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>       <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Union</span><span class=\"n\">…</span>  <span class=\"kt\">Union</span><span class=\"n\">…</span>\n<span class=\"n\">─────┼────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"mf\">1.0</span>       <span class=\"nb\">NaN</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"nb\">NaN</span>     <span class=\"mf\">20.0</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"mf\">3.0</span>       <span class=\"mf\">30.0</span>\n</code></pre></div>",
        "id": 228226034,
        "sender_full_name": "Jeffrey Sarnoff",
        "timestamp": 1614603870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278539\">Jeffrey Sarnoff</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Replacing.20'nothing'.20with.20NaN/near/228226034\">said</a>:</p>\n<blockquote>\n<p>A very similar question came up on Slack last night.</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">]</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mf\">20.0</span><span class=\"p\">,</span> <span class=\"mf\">30.0</span><span class=\"p\">]</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c\"># ok, now df is your data frame with `nothings`</span>\n<span class=\"c\"># and you want them to be NaNs</span>\n\n<span class=\"k\">function</span> <span class=\"n\">nan_all_nothings</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">isnothing</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span> <span class=\"o\">.=</span> <span class=\"nb\">NaN</span>\n  <span class=\"k\">return</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">nan_all_nothings</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">nan_all_nothings</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n<span class=\"mi\">3</span><span class=\"n\">×2</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>       <span class=\"n\">b</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Union</span><span class=\"n\">…</span>  <span class=\"kt\">Union</span><span class=\"n\">…</span>\n<span class=\"n\">─────┼────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"mf\">1.0</span>       <span class=\"nb\">NaN</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"nb\">NaN</span>     <span class=\"mf\">20.0</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"mf\">3.0</span>       <span class=\"mf\">30.0</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Good Day Jefrfrey, </p>\n<p>This worked! I would like to stream-line the <br>\ncode for this by applying the function you <br>\ncreated for eachcol(df) I attempted:</p>\n<p>nan_for_nothings(df[!,7:11])</p>\n<p>But am getting an index error. Any additional<br>\ntips? </p>\n<p>Thanks again,</p>",
        "id": 228258597,
        "sender_full_name": "QuBit",
        "timestamp": 1614615566
    },
    {
        "content": "<p>I guess this is related to your other question around <code>NaN</code>s as well - when working with DataFrames that have missing observations you should really be using <code>missing</code> instead of <code>nothing</code> or <code>NaN</code>. That's what <code>missing</code> is for, and why <code>passmissing</code> and <code>skipmissing</code> exist</p>",
        "id": 228268773,
        "sender_full_name": "Nils",
        "timestamp": 1614618882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Replacing.20'nothing'.20with.20NaN/near/228268773\">said</a>:</p>\n<blockquote>\n<p>I guess this is related to your other question around <code>NaN</code>s as well - when working with DataFrames that have missing observations you should really be using <code>missing</code> instead of <code>nothing</code> or <code>NaN</code>. That's what <code>missing</code> is for, and why <code>passmissing</code> and <code>skipmissing</code> exist</p>\n</blockquote>\n<p>Hi Nils, </p>\n<p>I was able to implement: </p>\n<p>for col in eachcol(ED4)<br>\n    replace!(col,NaN =&gt; 0)<br>\nend</p>\n<p>This approach helped to address the NaN<br>\nfill issue I was having when I applied the <br>\ndescribe method to the dataframe.</p>",
        "id": 228277599,
        "sender_full_name": "QuBit",
        "timestamp": 1614621909
    },
    {
        "content": "<p>Yes that works, but again <code>missing</code>s would be more natural - they can be used with <code>coalesce</code>, which is exactly built for this use case.</p>",
        "id": 228297257,
        "sender_full_name": "Nils",
        "timestamp": 1614629246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390081\">@qu bit</span>  I agree with <span class=\"user-mention\" data-user-id=\"269318\">@Nils</span> , use <code>missing</code></p>\n<p><code>nothing_is_missing(x) = x[isnothing.(x)] .= missing</code></p>\n<p>The dataframe's columns of interest need to allow values of type <code>Missing</code>.  <br>\nAsk someone who knows .. manipulating DataFrames .</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">nothing_is_missing</span><span class=\"p\">,</span> <span class=\"n\">eachcol</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"p\">]));</span>\n</code></pre></div>",
        "id": 228300410,
        "sender_full_name": "Jeffrey Sarnoff",
        "timestamp": 1614630488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278539\">Jeffrey Sarnoff</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Replacing.20'nothing'.20with.20NaN/near/228300410\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"390081\">qu bit</span>  I agree with <span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> , use <code>missing</code></p>\n<p><code>nothing_is_missing(x) = x[isnothing.(x)] .= missing</code></p>\n<p>The dataframe's columns of interest need to allow values of type <code>Missing</code>.  <br>\nAsk someone who knows .. manipulating DataFrames .</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">nothing_is_missing</span><span class=\"p\">,</span> <span class=\"n\">eachcol</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"p\">]));</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you Jeffrey. I attempted to apply your principle to converting <br>\nthe same column set to Float64 using: </p>\n<p>map(convert(DataFrame{Float64,1}, eachcol(ED4[!, 7:11])))</p>\n<p>I am returning the following error as: <br>\nTypeError: in Type{...} expression, expected UnionAll, got Type{DataFrames.DataFrame}</p>\n<p>If I use a Array{Float64,1} ... the error message returns: <br>\nMethodError: Cannot <code>convert</code> an object of type DataFrames.DataFrameColumns{DataFrames.DataFrame} to an object of type Array{Float64,1</p>\n<p>Any suggestions about it?</p>",
        "id": 228308087,
        "sender_full_name": "QuBit",
        "timestamp": 1614633611
    },
    {
        "content": "<p>The dataframe's columns of interest need to allow values of type Missing.<br>\n<strong>Ask someone who knows  manipulating DataFrames .</strong></p>",
        "id": 228328464,
        "sender_full_name": "Jeffrey Sarnoff",
        "timestamp": 1614642747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278539\">Jeffrey Sarnoff</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Replacing.20'nothing'.20with.20NaN/near/228328464\">said</a>:</p>\n<blockquote>\n<p>The dataframe's columns of interest need to allow values of type Missing.<br>\n<strong>Ask someone who knows  manipulating DataFrames .</strong></p>\n</blockquote>\n<p>Hi Jeffrey, </p>\n<p>Was able to solve it. There is a parameter in the CSV module and 'read'<br>\nmethod called missingstrings which I set to '---'. Problem and coding <br>\naverted!</p>",
        "id": 228328789,
        "sender_full_name": "QuBit",
        "timestamp": 1614642942
    },
    {
        "content": "<p>great -- meanwhile you can improve this (if it help)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">];</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">];</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">];</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">nothing_is_missing</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">-&gt;</span><span class=\"p\">(</span><span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">missing</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"n\">colidx</span> <span class=\"kp\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n          <span class=\"n\">df2</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"n\">colidx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nothing_is_missing</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"n\">colidx</span><span class=\"p\">])</span>\n       <span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span>\n<span class=\"mi\">4</span><span class=\"n\">×3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>       <span class=\"n\">b</span>       <span class=\"n\">c</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Union</span><span class=\"n\">…</span>  <span class=\"kt\">Union</span><span class=\"n\">…</span>  <span class=\"kt\">Union</span><span class=\"n\">…</span>\n<span class=\"n\">─────┼────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"mf\">1.0</span>     <span class=\"mf\">1.0</span>     <span class=\"mf\">1.0</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>                 <span class=\"mf\">2.0</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"mf\">3.0</span>     <span class=\"mf\">3.0</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"mf\">4.0</span>             <span class=\"mf\">4.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df2</span>\n<span class=\"mi\">4</span><span class=\"n\">×3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">a</span>          <span class=\"n\">b</span>          <span class=\"n\">c</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Float64</span><span class=\"o\">?</span>   <span class=\"kt\">Float64</span><span class=\"o\">?</span>   <span class=\"kt\">Float64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼─────────────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>       <span class=\"mf\">1.0</span>        <span class=\"mf\">1.0</span>        <span class=\"mf\">1.0</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">missing</span>    <span class=\"n\">missing</span>          <span class=\"mf\">2.0</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>       <span class=\"mf\">3.0</span>        <span class=\"mf\">3.0</span>  <span class=\"n\">missing</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>       <span class=\"mf\">4.0</span>  <span class=\"n\">missing</span>          <span class=\"mf\">4.0</span>\n</code></pre></div>",
        "id": 228332095,
        "sender_full_name": "Jeffrey Sarnoff",
        "timestamp": 1614644567
    }
]