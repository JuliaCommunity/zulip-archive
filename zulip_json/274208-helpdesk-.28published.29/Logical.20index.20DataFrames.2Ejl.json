[
    {
        "content": "<p>Is there a simple way to logically index a DataFrame?</p>\n<p>For example, if I want to keep every row that has a <code>1</code> and discard every row that has a <code>0</code> in the column <code>x</code></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">.==</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This returns a <code>BitArray</code> of <code>Bool</code> how would I use this <code>BitArray</code> to filter the entire DataFrame?</p>",
        "id": 226344756,
        "sender_full_name": "Dale Black",
        "timestamp": 1613363939
    },
    {
        "content": "<p>This seems to work! </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"n\">x</span> <span class=\"o\">=&gt;</span> <span class=\"n\">isequal</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 226344861,
        "sender_full_name": "Dale Black",
        "timestamp": 1613364113
    },
    {
        "content": "<p>Yes, that's the way - there's also the in-place version <code>filter!</code>, and <code>@view df[df.x .== 1, :]</code></p>",
        "id": 226359663,
        "sender_full_name": "Nils",
        "timestamp": 1613380493
    }
]