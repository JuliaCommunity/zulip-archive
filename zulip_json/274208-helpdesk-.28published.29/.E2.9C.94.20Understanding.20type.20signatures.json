[
    {
        "content": "<p>Can you please tell me why this doesn't match the 2nd candidate, and what I must do to get it to work?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">Practice</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">StaticArraysCore</span><span class=\"o\">.</span><span class=\"kt\">MArray</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"n\">SOneTo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"w\"></span>\n\n<span class=\"p\">(</span><span class=\"n\">Practice</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"kt\">MethodError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">StaticArraysCore</span><span class=\"o\">.</span><span class=\"kt\">MArray</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"n\">Closest</span><span class=\"w\"> </span><span class=\"n\">candidates</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Integer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">AbstractUnitRange</span><span class=\"p\">}}})</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">~/.</span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">asdf</span><span class=\"o\">-</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">installs</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"mf\">1.7.3</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"o\">/</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">522</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">StaticArraysCore</span><span class=\"o\">.</span><span class=\"kt\">MArray</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">N</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kt\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">N</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">~/.</span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">StaticArrays</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"n\">bAMi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">MVector</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">StaticArraysCore</span><span class=\"o\">.</span><span class=\"kt\">SArray</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">N</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">N</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kt\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">N</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">~/.</span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">StaticArrays</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"n\">bAMi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">SVector</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">...</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 287795711,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656464529
    },
    {
        "content": "<p>Unfortunately this particular method list and how it highlights on Zulip (and probably elsewhere too) makes the answer harder to find. The key is that candidates 2 and 3 match on <code>Type{M/SArray}</code> instead of <code>M/SArray</code>. Thus they'll match <code>ones(typeof(x))</code> but not <code>ones(x)</code>.</p>",
        "id": 287796647,
        "sender_full_name": "Brian Chen",
        "timestamp": 1656465493
    },
    {
        "content": "<p>That seems rather bizarre from a user standpoint.</p>",
        "id": 287796712,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656465577
    },
    {
        "content": "<p>That means runtime type checking is necessary, correct?</p>",
        "id": 287796723,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656465590
    },
    {
        "content": "<p>as is implied with typeof</p>",
        "id": 287796730,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656465599
    },
    {
        "content": "<p>Semantically it always happens, but more often than not it is elided completely by the compiler.</p>",
        "id": 287796797,
        "sender_full_name": "Brian Chen",
        "timestamp": 1656465654
    },
    {
        "content": "<p>e.g. if you define a function <code>indirection(::T) where T = ones(T)</code>.</p>",
        "id": 287796833,
        "sender_full_name": "Brian Chen",
        "timestamp": 1656465718
    },
    {
        "content": "<p>Hmm, ok. Though I get a \"Missing reference: T\" with that.</p>",
        "id": 287796954,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656465850
    },
    {
        "content": "<p>Ah nevermind. I see what I did. Thanks for the help.</p>",
        "id": 287797112,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656466040
    },
    {
        "content": "<p>I do think there's a UX argument for <code>Type</code>s printing out differently in method signatures than other parametric types, but I'm not sure how reasonable/feasible that is.</p>",
        "id": 287797237,
        "sender_full_name": "Brian Chen",
        "timestamp": 1656466199
    },
    {
        "content": "<p>Relatedly, I want to define a method analogous to <code>isone</code> for 1xN matrices, that checks if all their elements are ones. This seems to break expectations to add a method on an MVector, as I'm not checking the main diagonal of a matrix. Thoughts?</p>",
        "id": 287797456,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656466418
    },
    {
        "content": "<p>or rather analagous to <code>iszero</code></p>",
        "id": 287797528,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656466479
    },
    {
        "content": "<p>but defining for <code>isone</code> seems wrong.</p>",
        "id": 287797534,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656466491
    },
    {
        "content": "<p><code>isone</code> is typically only used for scalars - is there anything wrong with <code>all(isone, x)</code>?</p>",
        "id": 287848825,
        "sender_full_name": "Sukera",
        "timestamp": 1656507639
    },
    {
        "content": "<p>and since neither<code>isone</code> nor <code>SArray</code> are owned by you, defining a new <code>isone</code> method for <code>SArray</code> is definitely type piracy</p>",
        "id": 287848911,
        "sender_full_name": "Sukera",
        "timestamp": 1656507672
    },
    {
        "content": "<p>I did <code>isones(v::MathVector{T}) where {T} = v == ones(T)</code>. Notice the custom plural function name.</p>",
        "id": 287849116,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656507734
    },
    {
        "content": "<p>gotcha!</p>",
        "id": 287849204,
        "sender_full_name": "Sukera",
        "timestamp": 1656507766
    },
    {
        "content": "<p>that definition seems a little wasteful, since it'll allocate the <code>ones(T)</code> vector too, for comparison</p>",
        "id": 287849274,
        "sender_full_name": "Sukera",
        "timestamp": 1656507792
    },
    {
        "content": "<p>Yeah I realize that. I'm iteratively trying to make everything I write better as I read the Base/stdlib module docs, but if you have any suggestions, I'm all ears.</p>",
        "id": 287849368,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656507830
    },
    {
        "content": "<blockquote>\n<p><code>all(isone, x)</code></p>\n</blockquote>",
        "id": 287849441,
        "sender_full_name": "Sebastian Pfitzner",
        "timestamp": 1656507849
    },
    {
        "content": "<p>Ah I missed that. Thanks!</p>",
        "id": 287849514,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1656507890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374994\">Michael Fiano</span> has marked this topic as resolved.</p>",
        "id": 288101408,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656631751
    }
]