[
    {
        "content": "<p>can I run multiple different matrix multiplications in parallel, where I use multiple blas threads per matrix multiplication?</p>\n<p>It seems that if I run 4 blas threads, and spawn different threads doing matrix multiplications, that actually the multiplications are done serially, over those 4 threads.</p>",
        "id": 257808845,
        "sender_full_name": "Maarten",
        "timestamp": 1634367628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"335397\">Maarten</span> has marked this topic as resolved.</p>",
        "id": 257809330,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634368123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"335397\">Maarten</span> has marked this topic as unresolved.</p>",
        "id": 257809335,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634368128
    },
    {
        "content": "<p>I'm not sure if I understand your thread setup. What is the output of <code>Threads.nthreads()</code>?</p>",
        "id": 257812037,
        "sender_full_name": "Mark Kittisopikul",
        "timestamp": 1634370952
    },
    {
        "content": "<p>8 or so. I just want to verify that if I have 8 julia threads, where I spawn multiple different matrix contractions (with blas.set_num_threads(4)), that those mulitplications are done in parallel. It looks like they are done serially, and every individual one is done over those 4 blas threads.</p>",
        "id": 257901057,
        "sender_full_name": "Maarten",
        "timestamp": 1634459811
    },
    {
        "content": "<p>perhaps to clarify. What can I do to make parallelworker outperform serialworker:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">LinearAlgebra</span><span class=\"p\">,</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Threads</span><span class=\"p\">,</span><span class=\"n\">BenchmarkTools</span><span class=\"p\">;</span>\n\n<span class=\"k\">function</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">)</span>\n    <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">))</span> <span class=\"k\">do</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span>\n    <span class=\"k\">end</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">)</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">);</span>\n    <span class=\"nd\">@sync</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">)</span>\n        <span class=\"nd\">@Threads</span><span class=\"o\">.</span><span class=\"n\">spawn</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">As</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">Bs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">let</span>\n<span class=\"n\">BLAS</span><span class=\"o\">.</span><span class=\"n\">set_num_threads</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\n<span class=\"n\">As</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span><span class=\"mi\">3000</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n<span class=\"n\">Bs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span><span class=\"mi\">3000</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n\n\n<span class=\"nd\">@btime</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"o\">$</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n\n<span class=\"nd\">@btime</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"o\">$</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 257991362,
        "sender_full_name": "Maarten",
        "timestamp": 1634544313
    },
    {
        "content": "<p>That code is going to oversubscribe threads, so it will be slower.</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"k\">function</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">)</span>\n           <span class=\"n\">nt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"n\">nthreads</span><span class=\"p\">()</span><span class=\"o\">รท</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">รท</span> <span class=\"n\">BLAS</span><span class=\"o\">.</span><span class=\"n\">get_num_threads</span><span class=\"p\">();</span>\n           <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span> <span class=\"n\">nt</span><span class=\"p\">)</span>\n           <span class=\"nd\">@sync</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nt</span>\n               <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span> <span class=\"k\">begin</span>\n                   <span class=\"n\">Al</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"n\">As</span><span class=\"p\">;</span> <span class=\"n\">Bl</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"n\">Bs</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"n\">nt</span>\n                   <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">Al</span><span class=\"p\">))</span> <span class=\"o\">รท</span> <span class=\"n\">n</span>\n                   <span class=\"n\">stop</span> <span class=\"o\">=</span>    <span class=\"p\">(</span> <span class=\"n\">i</span>   <span class=\"o\">*</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">Al</span><span class=\"p\">))</span> <span class=\"o\">รท</span> <span class=\"n\">n</span>\n                   <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">Al</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">Bl</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span>\n                   <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">start</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">stop</span>\n                       <span class=\"n\">mul!</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">Al</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">Bl</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n                   <span class=\"k\">end</span>\n                   <span class=\"o\">$</span><span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">C</span>\n               <span class=\"k\">end</span>\n           <span class=\"k\">end</span>\n           <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">);</span>\n       <span class=\"k\">end</span>\n<span class=\"go\">parallelworker (generic function with 1 method)</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span> <span class=\"n\">Bs</span><span class=\"p\">);</span>\n<span class=\"go\">  0.597088 seconds (87.75 k allocations: 485.472 MiB, 6.26% compilation time)</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span> <span class=\"n\">Bs</span><span class=\"p\">);</span>\n<span class=\"go\">  0.542520 seconds (53 allocations: 480.655 MiB)</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span> <span class=\"n\">Bs</span><span class=\"p\">);</span>\n<span class=\"go\">  1.468851 seconds (39 allocations: 1.274 GiB, 0.96% gc time)</span>\n</code></pre></div>\n<p>Note that I'm only using <code>nt = (Threads.nthreads()รท 2) รท BLAS.get_num_threads()</code>.</p>",
        "id": 258025490,
        "sender_full_name": "chriselrod",
        "timestamp": 1634562395
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"n\">As</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span><span class=\"mi\">3000</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"p\">];</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">Bs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span><span class=\"mi\">3000</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"p\">];</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span> <span class=\"n\">Bs</span><span class=\"p\">);</span>\n<span class=\"go\">  3.940653 seconds (53 allocations: 480.655 MiB)</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span> <span class=\"n\">Bs</span><span class=\"p\">);</span>\n<span class=\"go\"> 15.268181 seconds (399 allocations: 13.344 GiB, 3.55% gc time)</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"n\">nthreads</span><span class=\"p\">(),</span> <span class=\"n\">BLAS</span><span class=\"o\">.</span><span class=\"n\">get_num_threads</span><span class=\"p\">()</span>\n<span class=\"go\">(36, 4)</span>\n</code></pre></div>",
        "id": 258025625,
        "sender_full_name": "chriselrod",
        "timestamp": 1634562455
    },
    {
        "content": "<p>I cannot replicate this</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">LinearAlgebra</span><span class=\"p\">,</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Threads</span><span class=\"p\">,</span><span class=\"n\">BenchmarkTools</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">)</span>\n          <span class=\"n\">nt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"n\">nthreads</span><span class=\"p\">()</span><span class=\"o\">รท</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">รท</span> <span class=\"n\">BLAS</span><span class=\"o\">.</span><span class=\"n\">get_num_threads</span><span class=\"p\">();</span>\n          <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span> <span class=\"n\">nt</span><span class=\"p\">)</span>\n          <span class=\"nd\">@sync</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nt</span>\n              <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"nd\">@spawn</span> <span class=\"k\">begin</span>\n                  <span class=\"n\">Al</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"n\">As</span><span class=\"p\">;</span> <span class=\"n\">Bl</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"n\">Bs</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"n\">nt</span>\n                  <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">Al</span><span class=\"p\">))</span> <span class=\"o\">รท</span> <span class=\"n\">n</span>\n                  <span class=\"n\">stop</span> <span class=\"o\">=</span>    <span class=\"p\">(</span> <span class=\"n\">i</span>   <span class=\"o\">*</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">Al</span><span class=\"p\">))</span> <span class=\"o\">รท</span> <span class=\"n\">n</span>\n                  <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">Al</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">Bl</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span>\n                  <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">start</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">stop</span>\n                      <span class=\"n\">mul!</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">Al</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">Bl</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n                  <span class=\"k\">end</span>\n                  <span class=\"o\">$</span><span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">C</span>\n              <span class=\"k\">end</span>\n          <span class=\"k\">end</span>\n          <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">);</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">parallelworker</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">)</span>\n          <span class=\"n\">nt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"n\">nthreads</span><span class=\"p\">()</span><span class=\"o\">รท</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">รท</span> <span class=\"n\">BLAS</span><span class=\"o\">.</span><span class=\"n\">get_num_threads</span><span class=\"p\">();</span>\n          <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span> <span class=\"n\">nt</span><span class=\"p\">)</span>\n          <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">nt</span>\n\n              <span class=\"n\">Al</span> <span class=\"o\">=</span> <span class=\"n\">As</span><span class=\"p\">;</span> <span class=\"n\">Bl</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nt</span>\n              <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">Al</span><span class=\"p\">))</span> <span class=\"o\">รท</span> <span class=\"n\">n</span>\n              <span class=\"n\">stop</span> <span class=\"o\">=</span>    <span class=\"p\">(</span> <span class=\"n\">i</span>   <span class=\"o\">*</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">Al</span><span class=\"p\">))</span> <span class=\"o\">รท</span> <span class=\"n\">n</span>\n              <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">Al</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">Bl</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span>\n              <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">start</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">stop</span>\n                  <span class=\"n\">mul!</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">Al</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">Bl</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n              <span class=\"k\">end</span>\n              <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">C</span>\n          <span class=\"k\">end</span>\n          <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">);</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">serialworker</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">As</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"p\">];</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Bs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"p\">];</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n  <span class=\"mf\">1.790027</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">4.18</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">215.780</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">61.53</span><span class=\"o\">%</span> <span class=\"n\">compilation</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.806896</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">29.02</span> <span class=\"n\">k</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">9.217</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">7.13</span><span class=\"o\">%</span> <span class=\"n\">compilation</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.700317</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mi\">22</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">7.631</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.700381</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">7.630</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"n\">nthreads</span><span class=\"p\">(),</span> <span class=\"n\">BLAS</span><span class=\"o\">.</span><span class=\"n\">get_num_threads</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">BLAS</span><span class=\"o\">.</span><span class=\"n\">set_num_threads</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.721815</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mi\">32</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">22.890</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">parallelworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.691697</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mi\">32</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">22.890</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.654302</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mi\">7</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">22.888</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">serialworker</span><span class=\"p\">(</span><span class=\"n\">As</span><span class=\"p\">,</span><span class=\"n\">Bs</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.663570</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mi\">7</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">22.888</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 258028804,
        "sender_full_name": "Maarten",
        "timestamp": 1634563796
    },
    {
        "content": "<p>I also don't understand how it would work. I have difficulty finding documentation on how the blas and julia threads play together, but it is my understanding that they kind of don't. Currently I'm getting really good results for my particular problem by using Strided and blas_num_threads(1), where strided then divide&amp;conquer's the matrix multiplications, and spawns appropriate mul! jobs.</p>",
        "id": 258029097,
        "sender_full_name": "Maarten",
        "timestamp": 1634563916
    },
    {
        "content": "<p>The entire point behind the design of Julia's multithreading system was to avoid this flaw in the way BLAS and other systems use threads</p>",
        "id": 258084014,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634584625
    },
    {
        "content": "<p>The whole problem with most multithreaded programs is that they suffer catastrophic performance losses if you nest them</p>",
        "id": 258084091,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634584662
    },
    {
        "content": "<p>That was part of why I was playing around with <a href=\"https://github.com/search?q=Gaius.jl&amp;type=Repositories\">Gaius.jl</a> because it won't suffer this slowdown</p>",
        "id": 258084198,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634584701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297129\">@Takafumi Arakaki (tkf)</span> has a branch of it that requires his TAPIR branch of Julia that is way faster</p>",
        "id": 258084407,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634584795
    },
    {
        "content": "<p>I looked at gaius, but it seems that the successor is octavian, which in turn builds on cheapthreads (polyester), which is then incompatible with Threads.@spawn :'(</p>",
        "id": 258087235,
        "sender_full_name": "Maarten",
        "timestamp": 1634585995
    },
    {
        "content": "<p>If TAPIR progresses well, then <a href=\"https://github.com/search?q=Gaius.jl&amp;type=Repositories\">Gaius.jl</a> might live on</p>",
        "id": 258087494,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634586089
    },
    {
        "content": "<p>giving Gaius a LRU cache, Tapir, and some more tuning would probably put it in the same ballpark as Octavian</p>",
        "id": 258087636,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634586128
    },
    {
        "content": "<p>Out of curiousity I will benchmark with gaius as is. This tapir is a different kind of scheduler? Is it a serious possible successor of the current scheduler?</p>",
        "id": 258087798,
        "sender_full_name": "Maarten",
        "timestamp": 1634586213
    },
    {
        "content": "<p>It's basically a way to make stronger guarantees to the compiler about what can possibly happen in multithreaded code <a href=\"https://github.com/JuliaLang/julia/pull/39773\">https://github.com/JuliaLang/julia/pull/39773</a></p>",
        "id": 258088139,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634586367
    },
    {
        "content": "<p>I'll bump the compat bounds on <a href=\"https://github.com/search?q=Gaius.jl&amp;type=Repositories\">Gaius.jl</a> so that it doesn't downgrade your other packages. It'll take a little while to appear though</p>",
        "id": 258089665,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634587047
    },
    {
        "content": "<p>it looks very cool!</p>",
        "id": 258089666,
        "sender_full_name": "Maarten",
        "timestamp": 1634587048
    },
    {
        "content": "<p><a href=\"https://github.com/JuliaRegistries/General/pull/46981\">https://github.com/JuliaRegistries/General/pull/46981</a></p>",
        "id": 258091324,
        "sender_full_name": "Mason Protter",
        "timestamp": 1634587563
    },
    {
        "content": "<p>thanks! it's crazy that it performs on par with openblas, which I assume is rather optimized for specific pc architectures</p>",
        "id": 258091694,
        "sender_full_name": "Maarten",
        "timestamp": 1634587686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"335397\">Maarten</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/multiple.20matrix.20multiplications.20in.20parallal/near/258087235\">said</a>:</p>\n<blockquote>\n<p>I looked at gaius, but it seems that the successor is octavian, which in turn builds on cheapthreads (polyester), which is then incompatible with Threads.@spawn :'(</p>\n</blockquote>\n<p>It is compatible with <code>Polyester.@batch</code>, though.</p>\n<p>The Tapir work definitely looks exciting, though.</p>",
        "id": 258097529,
        "sender_full_name": "chriselrod",
        "timestamp": 1634590079
    },
    {
        "content": "<p>I've just been playing with <a href=\"https://github.com/search?q=Gaius.jl&amp;type=Repositories\">Gaius.jl</a> a couple of days. I was trying to analyze the task DAG structure using <a href=\"https://github.com/tkf/TaskDAGAnalyzers.jl\">https://github.com/tkf/TaskDAGAnalyzers.jl</a><br>\n<a href=\"/user_uploads/7178/u8ErnFKT_YwYm-C-VFk4FPgf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/u8ErnFKT_YwYm-C-VFk4FPgf/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/u8ErnFKT_YwYm-C-VFk4FPgf/image.png\"></a></div>",
        "id": 258116843,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1634599019
    },
    {
        "content": "<p>If you look at a typical DAG like above, its width expands and shrinks a few times during execution. This is because GEMM is a complex mixture of parallel tasks and sequential dependencies. So, it's helpful if the scheduler helps you to run another GEMMs if your GEMM is in the middle of the sequential portion. But, at the same time, the scheduler shouldn't be destroying the memory locality of each library function invocation; i.e., the second GEMM should \"back off\" if the first GEMM starts executing the parallel portion in the DGA.</p>",
        "id": 258116881,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1634599051
    }
]