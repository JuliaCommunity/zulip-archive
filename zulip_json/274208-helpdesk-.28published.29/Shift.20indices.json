[
    {
        "content": "<p>Is there a function that easily shifts arrays of indices? For example, I have an array <code>x =[-2, -1, 0, 1, 2]</code> and want to make it into an array of indices <code>y =[4, 5, 1, 2, 3]</code>.</p>\n<p>I thought about Offset arrays, but I don't really need the whole array shifted and the shift of <code>x</code> changes depending on the input values.</p>",
        "id": 229493412,
        "sender_full_name": "Michael Alexander",
        "timestamp": 1615303302
    },
    {
        "content": "<p>Something like?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">mod1</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">.+</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 229498615,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1615305350
    },
    {
        "content": "<p>Have you see <a href=\"https://github.com/search?q=CircularArrays.jl&amp;type=Repositories\">CircularArrays.jl</a>? Not sure if this can totally address your usecase or not.</p>",
        "id": 229508902,
        "sender_full_name": "Mason Protter",
        "timestamp": 1615308184
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">CircularArrays</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">CircularVector</span><span class=\"p\">([</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"nb\">e</span><span class=\"p\">]);</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">getindex</span><span class=\"o\">.</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,),</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">.+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"o\">:</span><span class=\"n\">d</span>\n <span class=\"o\">:</span><span class=\"nb\">e</span>\n <span class=\"o\">:</span><span class=\"n\">a</span>\n <span class=\"o\">:</span><span class=\"n\">b</span>\n <span class=\"o\">:</span><span class=\"n\">c</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">getindex</span><span class=\"o\">.</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,),</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"o\">:</span><span class=\"n\">d</span>\n <span class=\"o\">:</span><span class=\"nb\">e</span>\n <span class=\"o\">:</span><span class=\"n\">a</span>\n <span class=\"o\">:</span><span class=\"n\">b</span>\n <span class=\"o\">:</span><span class=\"n\">c</span>\n</code></pre></div>",
        "id": 229509543,
        "sender_full_name": "Mason Protter",
        "timestamp": 1615308422
    },
    {
        "content": "<p><code>mod1</code> is perfect! Exactly fits the bill</p>\n<p>CircularArrays or OffsetArrays probably would work, but there is only one function that requires this shift and the rest are handled as regular arrays, so I was trying to avoid mixing array types.</p>",
        "id": 229514635,
        "sender_full_name": "Michael Alexander",
        "timestamp": 1615310088
    },
    {
        "content": "<p>Are there packages for shifting/circular arrays that respect linear algebra? For example, if I have a finite difference value vector numbered 0:n, I can multiply it by a matrix that has column indices 0:n as well. Or if I get the eigenvectors of a circularly defined Fourier transform matrix, they are circular vectors.</p>",
        "id": 230562339,
        "sender_full_name": "Toby Driscoll",
        "timestamp": 1615917673
    },
    {
        "content": "<p>Wow, I never realized that <a href=\"https://github.com/search?q=OffsetArrays.jl&amp;type=Repositories\">OffsetArrays.jl</a> didn't work with linear algebra. That's a little disappointing. It should at <em>least</em> deal with multiplication</p>",
        "id": 230563347,
        "sender_full_name": "Mason Protter",
        "timestamp": 1615918038
    }
]