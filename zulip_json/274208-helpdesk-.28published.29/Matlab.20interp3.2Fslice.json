[
    {
        "content": "<p>Does anyone know a seamless way to reimplement this <a href=\"https://www.mathworks.com/help/matlab/ref/interp3.html\"><code>interp3()</code></a> functionality in julia, specifically with the syntax as the first example below?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Vq</span> <span class=\"o\">=</span> <span class=\"n\">interp3</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"n\">Z</span><span class=\"p\">,</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"n\">Xq</span><span class=\"p\">,</span><span class=\"n\">Yq</span><span class=\"p\">,</span><span class=\"n\">Zq</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 277553240,
        "sender_full_name": "Dale Black",
        "timestamp": 1648935618
    },
    {
        "content": "<p>Or if this <a href=\"https://www.mathworks.com/help/matlab/ref/slice.html\"><code>slice()</code></a> functionality has a julia equivalent, that would be better/easier  <code>slice(X,Y,Z,V,xslice,yslice,zslice)</code></p>",
        "id": 277662533,
        "sender_full_name": "Dale Black",
        "timestamp": 1649022094
    },
    {
        "content": "<p>Doesn't <a href=\"https://github.com/search?q=Interpolations.jl&amp;type=Repositories\">Interpolations.jl</a> do the trick?</p>",
        "id": 277678540,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1649043953
    },
    {
        "content": "<p>Ahh okay, it does look like that's what I am after. I am just now realizing that it's not the missing functionality but that I don't quite understand my problem as well as I should. Are there any examples of multi-planar reformation in Julia that you know of because I haven't found any from the simple google searches and that's what I need</p>",
        "id": 277793816,
        "sender_full_name": "Dale Black",
        "timestamp": 1649106476
    },
    {
        "content": "<p>Not sure what that is but if  I understand it's just an interpolation? If you have your <code>X</code> ,<code>Y</code>, <code>Z</code>, <code>V</code>, <code>Xq</code>, <code>Yq</code>,  and <code>Zq</code> you should be able to just make the interpolation with the <a href=\"https://github.com/search?q=Interpolations.jl&amp;type=Repositories\">Interpolations.jl</a> package, right? Maybe make a small example of these and try to create the slices you're looking for?</p>",
        "id": 277819479,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1649124729
    },
    {
        "content": "<p>I guess I am confused about how <a href=\"https://github.com/search?q=Interpolations.jl&amp;type=Repositories\">Interpolations.jl</a> takes in all of the arguments <code>X</code>, <code>Y</code>, <code>Z</code>, <code>V</code>, <code>Xq</code>, <code>Yq</code>, <code>Zq</code>? For example</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">itp</span> <span class=\"o\">=</span> <span class=\"n\">interpolate</span><span class=\"p\">(</span><span class=\"n\">Xs</span><span class=\"p\">,</span> <span class=\"n\">Ys</span><span class=\"p\">,</span> <span class=\"n\">Zs</span><span class=\"p\">,</span> <span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">()))</span>\n<span class=\"n\">itp</span><span class=\"p\">(</span><span class=\"n\">Xq</span><span class=\"p\">,</span> <span class=\"n\">Yq</span><span class=\"p\">,</span> <span class=\"n\">Zq</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Doesn't work and I can't figure out what order of arguments I should be using if <code>X</code> <code>Y``Z</code> are the points and <code>Xq</code>, <code>Yq</code>, <code>Zq</code> are the query points</p>",
        "id": 277902381,
        "sender_full_name": "Dale Black",
        "timestamp": 1649174629
    },
    {
        "content": "<p>This is the error I get if this is helpful btw</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">interpolate</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">BSpline</span><span class=\"p\">{</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">Linear</span><span class=\"p\">{</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">Throw</span><span class=\"p\">{</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">OnGrid</span><span class=\"p\">}}})</span>\n\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n\n<span class=\"n\">interpolate</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"n\">NoInterp</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Interpolations</span><span class=\"o\">/</span><span class=\"n\">Glp9h</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">nointerp</span><span class=\"o\">/</span><span class=\"n\">nointerp</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">interpolate</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TWeights</span><span class=\"p\">},</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TC</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">IT</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">TWeights</span><span class=\"p\">,</span> <span class=\"kt\">TC</span><span class=\"p\">,</span> <span class=\"kt\">IT</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">NoInterp</span><span class=\"p\">,</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">NoInterp</span><span class=\"p\">,</span> <span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">BSpline</span><span class=\"p\">}}},</span> <span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">BSpline</span><span class=\"p\">}}</span> <span class=\"n\">at</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Interpolations</span><span class=\"o\">/</span><span class=\"n\">Glp9h</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">splines</span><span class=\"o\">/</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">splines</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">159</span>\n\n<span class=\"n\">interpolate</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TWeights</span><span class=\"p\">},</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TC</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">IT</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Real</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">Matched</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">TWeights</span><span class=\"p\">,</span> <span class=\"kt\">TC</span><span class=\"p\">,</span> <span class=\"kt\">IT</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">NoInterp</span><span class=\"p\">,</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">NoInterp</span><span class=\"p\">,</span> <span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">BSpline</span><span class=\"p\">}}},</span> <span class=\"kt\">Interpolations</span><span class=\"o\">.</span><span class=\"kt\">BSpline</span><span class=\"p\">}}</span> <span class=\"n\">at</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Interpolations</span><span class=\"o\">/</span><span class=\"n\">Glp9h</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">splines</span><span class=\"o\">/</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">splines</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">164</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">PlanarReformation</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span><span class=\"nd\">@Other</span><span class=\"o\">:</span> <span class=\"mi\">15</span>\n<span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span><span class=\"nd\">@Local</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 277902509,
        "sender_full_name": "Dale Black",
        "timestamp": 1649174666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269582\">@Mark Kittisopikul</span>  maybe the docs need a 2D and 3D examples?</p>",
        "id": 277962454,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1649205651
    },
    {
        "content": "<p>Otherwise, does this work for you?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"nb\">π</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"n\">ys</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"nb\">π</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">π</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">zs</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">ys</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"n\">zs</span><span class=\"p\">]</span>\n<span class=\"n\">itp</span> <span class=\"o\">=</span> <span class=\"n\">interpolate</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">()))</span> <span class=\"c\"># interpolate linearly between the data points</span>\n<span class=\"n\">stp</span> <span class=\"o\">=</span> <span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"n\">itp</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">,</span> <span class=\"n\">zs</span><span class=\"p\">)</span> <span class=\"c\"># re-scale to the actual domain</span>\n<span class=\"p\">[</span><span class=\"n\">itp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Xq</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">Yq</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"n\">Zq</span><span class=\"p\">]</span> <span class=\"c\"># &lt;- make your own Xq, Yq, Zq here</span>\n</code></pre></div>",
        "id": 277962501,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1649205713
    },
    {
        "content": "<p>Sorry for such a late response, I had some important deadlines. This example is super helpful and should be enough to help me get started I think!</p>",
        "id": 279320688,
        "sender_full_name": "Dale Black",
        "timestamp": 1650308390
    },
    {
        "content": "<p>Okay, so in the MatLab function, I can use 3 different 3D arrays as the sample points (<code>Xs</code> <code>Ys</code> and <code>Zs</code>) along with a 3D array <code>V</code>. <a href=\"https://github.com/search?q=Interpolations.jl&amp;type=Repositories\">Interpolations.jl</a> doesn't like this</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Xs</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">Ys</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">Zs</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n\n<span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>So if I have those arrays, is there a way to pass them into the <code>interpolate</code> function that makes sense? In matlab its just <code>interp3(Xs, Ys, Zs, V, ...)</code> which is what I am hoping to recreate in Julia</p>",
        "id": 279349843,
        "sender_full_name": "Dale Black",
        "timestamp": 1650327143
    },
    {
        "content": "<p>It looks like the <code>interp3</code> in MatLab takes the first 4 arguments <code>Xs</code>, <code>Ys</code>, <code>Zs</code> and <code>V</code> and then uses <a href=\"https://www.mathworks.com/help/matlab/ref/griddedinterpolant.html#d123e568858\">griddedInterpolant</a> to create a new interpolant <code>F</code> so I will look into that step first using <a href=\"https://github.com/search?q=Interpolations.jl&amp;type=Repositories\">Interpolations.jl</a></p>",
        "id": 279350625,
        "sender_full_name": "Dale Black",
        "timestamp": 1650327915
    },
    {
        "content": "<p>Are you using a regular grid? This surely error in MATLAB too:</p>\n<div class=\"codehilite\" data-code-language=\"Matlab\"><pre><span></span><code><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Xs</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Ys</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Zs</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Vs</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Xq</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Yq</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Zq</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Vq</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">interp3</span><span class=\"p\">(</span><span class=\"n\">Xs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ys</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Zs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Vs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Xq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Zq</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"s\">using</span><span class=\"w\"> </span><span class=\"s\">griddedInterpolant</span><span class=\"w\"></span>\n<span class=\"n\">Grid</span><span class=\"w\"> </span><span class=\"s\">arrays</span><span class=\"w\"> </span><span class=\"s\">must</span><span class=\"w\"> </span><span class=\"s\">have</span><span class=\"w\"> </span><span class=\"s\">NDGRID</span><span class=\"w\"> </span><span class=\"s\">structure.</span><span class=\"w\"></span>\n\n<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"s\">in</span><span class=\"w\"> </span><span class=\"s\">interp3</span><span class=\"w\"> </span><span class=\"s\">(line</span><span class=\"w\"> </span><span class=\"s\">144)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">griddedInterpolant</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">,</span><span class=\"n\">extrap</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 279366385,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1650347813
    },
    {
        "content": "<p>If your grid is regular, then no need to have full 3D arrays for x, y, and y: A vector suffices for each.</p>",
        "id": 279366418,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1650347868
    },
    {
        "content": "<p>Can you make a copy-pastable minimal working example (MWE) of MATLAB code that does not error? And then we can see if we can do the same with <a href=\"https://github.com/search?q=Interpolations.jl&amp;type=Repositories\">Interpolations.jl</a> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 279366501,
        "sender_full_name": "Benoit Pasquier",
        "timestamp": 1650347969
    },
    {
        "content": "<p>Here is a MWE in MatLab that I would like to reimplement in Julia</p>\n<div class=\"codehilite\" data-code-language=\"Matlab\"><pre><span></span><code><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Xs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ys</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Zs</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">meshgrid</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">56</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">56</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">plane_list</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">4225</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">plane</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">interp3</span><span class=\"p\">(</span><span class=\"n\">Xs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ys</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Zs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">plane_list</span><span class=\"p\">(:,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">plane_list</span><span class=\"p\">(:,</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">plane_list</span><span class=\"p\">(:,</span><span class=\"mi\">3</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"c\">% Result: size(plane) = 4225 x 1</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 279432480,
        "sender_full_name": "Dale Black",
        "timestamp": 1650385151
    },
    {
        "content": "<p>But it seems like the problem is coming from my misunderstanding of the regular grid usage in Julia?</p>",
        "id": 279432762,
        "sender_full_name": "Dale Black",
        "timestamp": 1650385286
    },
    {
        "content": "<p>What do you mean a vector will suffice for 3D regular grids? Is it something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">itp</span> <span class=\"o\">=</span> <span class=\"n\">interpolate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">Gridded</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">()))</span>\n</code></pre></div>\n<p>If so, that still isn't working (if I am even doing it right)</p>",
        "id": 279434129,
        "sender_full_name": "Dale Black",
        "timestamp": 1650385841
    },
    {
        "content": "<p>Nor is this</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">itp</span> <span class=\"o\">=</span> <span class=\"n\">interpolate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">Gridded</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">()))</span>\n</code></pre></div>",
        "id": 279434235,
        "sender_full_name": "Dale Black",
        "timestamp": 1650385896
    },
    {
        "content": "<p>Have you looked at the <a href=\"https://github.com/search?q=Interpolations.jl&amp;type=Repositories\">Interpolations.jl</a> docs? Specifically those on gridded interpolation <a href=\"http://juliamath.github.io/Interpolations.jl/latest/control/#Gridded-interpolation\">here</a>? Quoting from there:</p>\n<blockquote>\n<p>The general syntax is</p>\n<p><code>itp = interpolate(nodes, A, options...)</code></p>\n<p>where <code>nodes = (xnodes, ynodes, ...)</code> specifies the positions along each axis at which the array <code>A</code> is sampled for arbitrary (\"rectangular\") samplings.</p>\n</blockquote>",
        "id": 279525115,
        "sender_full_name": "Nils",
        "timestamp": 1650451055
    },
    {
        "content": "<p>In your case:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">itp</span> <span class=\"o\">=</span> <span class=\"n\">interpolate</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">Gridded</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">()));</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">itp</span><span class=\"p\">(</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">11.7</span><span class=\"p\">)</span>\n<span class=\"mf\">0.5487285843274945</span>\n</code></pre></div>",
        "id": 279525199,
        "sender_full_name": "Nils",
        "timestamp": 1650451101
    },
    {
        "content": "<p>Ahhhhhh how did I miss that. I will give it a shot later today but that looks like my answer haha. Thanks!</p>",
        "id": 279532933,
        "sender_full_name": "Dale Black",
        "timestamp": 1650456031
    }
]