[
    {
        "content": "<p>I am porting my labs code from Matlab to Julia and we have a Gamma Variate fitting function that I cannot seem to make work in Julia. </p>\n<p>The matlab code is simple enough</p>\n<div class=\"codehilite\" data-code-language=\"Matlab\"><pre><span></span><code><span class=\"nb\">gamma</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">@(</span><span class=\"n\">gm</span><span class=\"p\">,</span><span class=\"nb\">time</span><span class=\"p\">)(</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">aif_vec_new</span><span class=\"p\">(</span><span class=\"k\">end</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"w\"> </span><span class=\"p\">(((</span><span class=\"n\">time_vec_new</span><span class=\"p\">(</span><span class=\"k\">end</span><span class=\"p\">)</span><span class=\"o\">./</span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.^</span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">.*</span><span class=\"p\">(</span><span class=\"nb\">exp</span><span class=\"p\">(</span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.*</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">time_vec_new</span><span class=\"p\">(</span><span class=\"k\">end</span><span class=\"p\">)</span><span class=\"o\">./</span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)))))))</span><span class=\"o\">.*</span><span class=\"p\">((</span><span class=\"nb\">time</span><span class=\"o\">./</span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.^</span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">.*</span><span class=\"p\">(</span><span class=\"nb\">exp</span><span class=\"p\">(</span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.*</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"nb\">time</span><span class=\"o\">./</span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)))))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">gm</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">)</span>\n\n<span class=\"n\">gamma_coef</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">lsqcurvefit</span><span class=\"p\">(</span><span class=\"nb\">gamma</span><span class=\"p\">,</span><span class=\"n\">gm0</span><span class=\"p\">,</span><span class=\"n\">time_vec_new</span><span class=\"p\">,</span><span class=\"n\">aif_vec_new</span><span class=\"p\">,</span><span class=\"n\">gmlb</span><span class=\"p\">,</span><span class=\"n\">gmub</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>And the Julia equivalent looks something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">xdata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"mf\">1.1</span>\n<span class=\"w\">    </span><span class=\"mf\">2.2</span>\n<span class=\"w\">    </span><span class=\"mf\">3.3</span>\n<span class=\"w\">    </span><span class=\"mf\">4.4</span>\n<span class=\"w\">    </span><span class=\"mf\">5.5</span>\n<span class=\"w\">    </span><span class=\"mf\">6.6</span>\n<span class=\"w\">    </span><span class=\"mf\">7.7</span>\n<span class=\"w\">    </span><span class=\"mf\">8.8</span>\n<span class=\"w\">    </span><span class=\"mf\">9.9</span>\n<span class=\"w\">    </span><span class=\"mf\">11.0</span>\n<span class=\"w\">    </span><span class=\"mf\">12.1</span>\n<span class=\"w\">    </span><span class=\"mf\">13.2</span>\n<span class=\"w\">    </span><span class=\"mf\">14.3</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">ydata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"mf\">122.8</span>\n<span class=\"w\">    </span><span class=\"mf\">115.2</span>\n<span class=\"w\">    </span><span class=\"mf\">92.4</span>\n<span class=\"w\">    </span><span class=\"mf\">103.6</span>\n<span class=\"w\">    </span><span class=\"mf\">161.4</span>\n<span class=\"w\">    </span><span class=\"mf\">156.2</span>\n<span class=\"w\">    </span><span class=\"mf\">196.9</span>\n<span class=\"w\">    </span><span class=\"mf\">188.0</span>\n<span class=\"w\">    </span><span class=\"mf\">286.1</span>\n<span class=\"w\">    </span><span class=\"mf\">244.4</span>\n<span class=\"w\">    </span><span class=\"mf\">196.1</span>\n<span class=\"w\">    </span><span class=\"mf\">363.6</span>\n<span class=\"w\">    </span><span class=\"mf\">420.8</span>\n<span class=\"w\">    </span><span class=\"mf\">395.7</span>\n<span class=\"p\">]</span>\n\n\n<span class=\"n\">p0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">14.3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">104</span><span class=\"p\">]</span>\n<span class=\"n\">lb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">14.3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"n\">ub</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">14.3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">]</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">x_end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">14.3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y_end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">395</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">y_end</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(((</span><span class=\"n\">x_end</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.^</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_end</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])))))</span>\n\n<span class=\"w\">    </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.^</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">.*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">.*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">.-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))))</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">.*</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"o\">.+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">gamma_coef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">curve_fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xdata</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ydata</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lb</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">upper</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ub</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Where <code>model = gamma</code>, <code>xdata = time_vec_new</code>, <code>ydata = aif_vec_new</code>, <code>p0 = gm0</code>, <code>lb = gmlb</code>, and <code>up = gmub</code></p>\n<p>Unfortunately the Matlab code snippet fits the gamma function properly but the Julia <code>curve_fit</code> does not. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">ArgumentError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">matrix</span><span class=\"w\"> </span><span class=\"n\">contains</span><span class=\"w\"> </span><span class=\"n\">Infs</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">NaNs</span>\n\n<span class=\"n\">chkfinite</span><span class=\"nd\">@lapack</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">86</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"sa\">var</span><span class=\"s\">\"#getrf!#1\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"n\">LAPACK</span><span class=\"o\">.</span><span class=\"n\">getrf!</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span><span class=\"nd\">@lapack</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">559</span>\n<span class=\"n\">getrf!</span><span class=\"nd\">@lapack</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">557</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"c\">#lu!#170@lu.jl:81[inlined]</span>\n<span class=\"n\">lu!</span><span class=\"nd\">@lu</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">80</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"c\">#lu#176@lu.jl:299[inlined]</span>\n<span class=\"n\">lu</span><span class=\"nd\">@lu</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">298</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"o\">\\</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span><span class=\"nd\">@generic</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1115</span>\n<span class=\"sa\">var</span><span class=\"s\">\"#levenberg_marquardt#10\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">LsqFit</span><span class=\"o\">.</span><span class=\"n\">levenberg_marquardt</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">NLSolversBase</span><span class=\"o\">.</span><span class=\"kt\">OnceDifferentiable</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span><span class=\"nd\">@levenberg_marquardt</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">126</span>\n<span class=\"n\">levenberg_marquardt</span><span class=\"nd\">@levenberg_marquardt</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"c\">#lmfit#15@curve_fit.jl:68[inlined]</span>\n<span class=\"n\">lmfit</span><span class=\"nd\">@curve_fit</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">67</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"sa\">var</span><span class=\"s\">\"#lmfit#14\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:lower</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:upper</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}}}},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">LsqFit</span><span class=\"o\">.</span><span class=\"n\">lmfit</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">LsqFit</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#18#20\"</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Main</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"workspace#118\"</span><span class=\"o\">.</span><span class=\"kt\">model</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span><span class=\"nd\">@curve_fit</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">64</span>\n<span class=\"n\">lmfit</span><span class=\"nd\">@curve_fit</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">46</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"sa\">var</span><span class=\"s\">\"#curve_fit#16\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:lower</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:upper</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}}}},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">LsqFit</span><span class=\"o\">.</span><span class=\"n\">curve_fit</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"workspace#118\"</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span><span class=\"nd\">@curve_fit</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">118</span>\n<span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"nd\">@Local</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>The only thing that is potentially different between these two is the underlying mechanics of <code>curve_fit</code> vs <code>lsqcurvefit</code> from Matlab, as far as I can tell. Does anyone have familiarity with the LsqFit that might be able to point out the issue?</p>",
        "id": 389931256,
        "sender_full_name": "Dale Black",
        "timestamp": 1694198323
    },
    {
        "content": "<p><del>I also found <code>Gamma</code> from <a href=\"https://github.com/search?q=Distributions.jl&amp;type=Repositories\">Distributions.jl</a>. I am not sure if this could be useful instead of the LsqFit approach</del></p>",
        "id": 389933745,
        "sender_full_name": "Dale Black",
        "timestamp": 1694199420
    },
    {
        "content": "<p><del>Actually it looks like this is a simple enough approach that <em>should work</em></del></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xdata</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ydata</span><span class=\"p\">)</span>\n\n<span class=\"n\">gamma_model</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">glm</span><span class=\"p\">(</span><span class=\"nd\">@formula</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Gamma</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">LogLink</span><span class=\"p\">())</span>\n\n<span class=\"n\">gamma_fit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">gamma_model</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Edit, does not quite work</p>",
        "id": 389938834,
        "sender_full_name": "Dale Black",
        "timestamp": 1694201721
    },
    {
        "content": "<p>I guess, what is the simplest way to fit a curve like this</p>\n<p><a href=\"/user_uploads/7178/MV00N1saRczqHybDsvh5r6e3/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/MV00N1saRczqHybDsvh5r6e3/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/MV00N1saRczqHybDsvh5r6e3/image.png\"></a></div>",
        "id": 389960063,
        "sender_full_name": "Dale Black",
        "timestamp": 1694213576
    },
    {
        "content": "<p>Where <code>Bolus Tracking</code> are the data points to be fit</p>",
        "id": 389960082,
        "sender_full_name": "Dale Black",
        "timestamp": 1694213594
    },
    {
        "content": "<p>Kind of fixed it. The original problem was division by zero </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">gamma_model2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">gm1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">14.307</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">14.307</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y_end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">395</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">y_end</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(((</span><span class=\"n\">x_end</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gm1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">eps</span><span class=\"p\">()))</span><span class=\"o\">^</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">x_end</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gm1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">eps</span><span class=\"p\">()))))</span>\n<span class=\"w\">        </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ifelse</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">.==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gm1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">eps</span><span class=\"p\">()))</span><span class=\"o\">.^</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">.*</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">.*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">.-</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gm1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">eps</span><span class=\"p\">())))</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">.*</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"o\">.+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n\n<span class=\"w\">    </span><span class=\"c\"># Data points</span>\n<span class=\"w\">    </span><span class=\"n\">x_data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.35</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.05</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.75</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.45</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.85</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">14.307</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">y_data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">122.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">115.2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">92.4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">103.6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">161.4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">156.2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">196.9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">188.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">286.1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">244.4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">196.1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">363.6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">420.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">395.7</span><span class=\"p\">]</span>\n\n<span class=\"w\">    </span><span class=\"c\"># Initial guess and bounds for the remaining parameters</span>\n<span class=\"w\">    </span><span class=\"n\">initial_guess</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">104.0</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">lb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">100.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">ub</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">100.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">200.0</span><span class=\"p\">]</span>\n\n<span class=\"w\">    </span><span class=\"c\"># Curve fitting</span>\n<span class=\"w\">    </span><span class=\"n\">fit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">curve_fit</span><span class=\"p\">(</span><span class=\"n\">gamma_model2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y_data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">initial_guess</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"n\">lb</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"n\">ub</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">gamma_fit2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gamma_model2</span><span class=\"p\">(</span><span class=\"n\">x_data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fit</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>And this is a little closer to the goal<br>\n<a href=\"/user_uploads/7178/QvBeMtDcDleL-iftJ9HGFunN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/QvBeMtDcDleL-iftJ9HGFunN/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/QvBeMtDcDleL-iftJ9HGFunN/image.png\"></a></div>",
        "id": 389963472,
        "sender_full_name": "Dale Black",
        "timestamp": 1694216198
    },
    {
        "content": "<p>Not quite your question, but I tried out different lsq solvers last year and found (the pretty new) <a href=\"https://juliahub.com/ui/Packages/General/NonlinearSolve\">NonlinearSolve.jl</a> the best and most flexible. It's part of the SciML ecosystem so good bus factor.</p>",
        "id": 420691184,
        "sender_full_name": "Romeo Valentin",
        "timestamp": 1707497167
    }
]