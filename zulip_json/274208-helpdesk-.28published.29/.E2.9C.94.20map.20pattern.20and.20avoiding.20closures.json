[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272612\">Alec</span> has marked this topic as resolved.</p>",
        "id": 527900486,
        "sender_full_name": "Notification Bot",
        "timestamp": 1752070947
    },
    {
        "content": "<p>I use this pattern so frequently that I'd like to put it in a package for easy use. The macro itself and also reexport the components of <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/MicroCollections\">MicroCollections.jl</a> and <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/BangBang\">BangBang.jl</a>.</p>\n<ol>\n<li>Any concerns with me doing this?</li>\n<li><span class=\"user-mention\" data-user-id=\"269150\">@Mason Protter</span> would you want to 'own' this package and publish it?</li>\n<li>Call the package something like <code>MapUnroll</code>?</li>\n</ol>\n<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> <a href=\"#narrow/channel/274208-helpdesk-.28published.29/topic/.E2.9C.94.20map.20pattern.20and.20avoiding.20closures/near/525509467\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Of course it's a bit awful to have to write the loop body twice. Sometimes I wish we had a macro <code>@pushalloc for i in 1:n</code> which would expand to something like this -- separate the first iteration, find every <code>push!</code> and allocate space using the first time's types. But I never wrote one.</p>\n</blockquote>\n<p>What I use for stuff like this is an <code>@unroll</code> macro:</p>\n<p><div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">unroll</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:for</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"only works on for loops\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"This loop pattern isn't supported\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">esc</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"nd\">@gensym</span><span class=\"w\"> </span><span class=\"n\">loopend</span>\n<span class=\"w\">    </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"nd\">@label</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">loopend</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">goto</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"nd\">@goto</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">loopend</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">itr</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"n\">unrolled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"w\">        </span><span class=\"k\">quote</span>\n<span class=\"w\">            </span><span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nd\">@goto</span><span class=\"w\"> </span><span class=\"n\">loopend</span>\n<span class=\"w\">            </span><span class=\"o\">$</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">next</span>\n<span class=\"w\">            </span><span class=\"o\">$</span><span class=\"n\">body</span>\n<span class=\"w\">            </span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">append!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unrolled</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">remainder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">quote</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"o\">$</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">next</span>\n<span class=\"w\">            </span><span class=\"o\">$</span><span class=\"n\">body</span>\n<span class=\"w\">            </span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"nd\">@label</span><span class=\"w\"> </span><span class=\"n\">loopend</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">remainder</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">out</span>\n<span class=\"k\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 527901403,
        "sender_full_name": "Alec",
        "timestamp": 1752071231
    },
    {
        "content": "<p>That's a good idea! I don't particularly want to own it, and I'd have no problem with you publishing and owning it. However, if you want we can put it in the JuliaFolds2 organization, and make you a co-owner.</p>",
        "id": 527902969,
        "sender_full_name": "Mason Protter",
        "timestamp": 1752071710
    }
]