[
    {
        "content": "<p>Hi all, I have quite a heavyweight function call which hangs fairly non-deterministically (the function is a Monte Carlo Tree Search). I've tried determining the problem with tools like Profile, but they seem to depend on the function terminating. I'm hesitant to pull out the debugger for this kind of code with a very deep call stack - is there a tool, julia or otherwise, which could help me find where it's spending all it's time?</p>",
        "id": 364884423,
        "sender_full_name": "Laura Demkowicz-Duffy",
        "timestamp": 1686322879
    },
    {
        "content": "<p>Maybe this helps:</p>\n<blockquote>\n<p>A fixed duration cpu profile can now be triggered by the user during running tasks without Profile being loaded first and the report will show during execution. On MacOS &amp; FreeBSD press ctrl-t or raise a SIGINFO. For other platforms raise a SIGUSR1 i.e. % kill -USR1 $julia_pid. Not currently available on windows (<a href=\"https://github.com/JuliaLang/julia/issues/43179\">#43179</a>).</p>\n</blockquote>\n<p>(from the v1.8 release notes)</p>",
        "id": 364886929,
        "sender_full_name": "Felix Kastner",
        "timestamp": 1686323366
    },
    {
        "content": "<p>if you know that it's hanging, you can spam CTRL+C to force-throw an interrupt, which should print a stacktrace</p>",
        "id": 364886930,
        "sender_full_name": "Sukera",
        "timestamp": 1686323366
    },
    {
        "content": "<p>profiling-by-stacktrace works, because statistically speaking you're going to hit the hottest code most of the time</p>",
        "id": 364887189,
        "sender_full_name": "Sukera",
        "timestamp": 1686323415
    },
    {
        "content": "<p>Interesting. Does Julia employ a statistical or deterministic cpu profiler?</p>",
        "id": 364887703,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686323522
    },
    {
        "content": "<p>the builtin is statistical</p>",
        "id": 364888416,
        "sender_full_name": "Sukera",
        "timestamp": 1686323651
    },
    {
        "content": "<p>if you want CPU statistics, you'd need something like <a href=\"https://github.com/search?q=LIKWID.jl&amp;type=Repositories\">LIKWID.jl</a> or <a href=\"https://github.com/search?q=MCAnalyzer.jl&amp;type=Repositories\">MCAnalyzer.jl</a>, if you want to go the simulation route</p>",
        "id": 364888694,
        "sender_full_name": "Sukera",
        "timestamp": 1686323703
    },
    {
        "content": "<p>I was curious because the language I'm used to has both builtin. The <strong>latter</strong> (edit) is not very \"modern\" but is used to profile a selection of functions, with instrumentation, rather than taking samples of everything.</p>",
        "id": 364889144,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1686323797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269770\">Felix Kastner</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Profiling.20Code.20that.20Hangs/near/364886929\">said</a>:</p>\n<blockquote>\n<p>Maybe this helps:</p>\n<blockquote>\n<p>A fixed duration cpu profile can now be triggered by the user during running tasks without Profile being loaded first and the report will show during execution. On MacOS &amp; FreeBSD press ctrl-t or raise a SIGINFO. For other platforms raise a SIGUSR1 i.e. % kill -USR1 $julia_pid. Not currently available on windows (<a href=\"https://github.com/JuliaLang/julia/issues/43179\">#43179</a>).</p>\n</blockquote>\n<p>(from the v1.8 release notes)</p>\n</blockquote>\n<p>That's a really cool feature, thanks for bringing that to my attention!</p>",
        "id": 364899611,
        "sender_full_name": "Laura Demkowicz-Duffy",
        "timestamp": 1686325966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477227\">Laura Demkowicz-Duffy</span> has marked this topic as resolved.</p>",
        "id": 364906058,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686327298
    }
]