[
    {
        "content": "<p>Is there some good intuition for the last result of this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"kt\">AA</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">issametype</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">AA</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"w\"></span>\n<span class=\"n\">issametype</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">issametype</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">AA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"w\"></span>\n<span class=\"n\">issametype</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">issametype</span><span class=\"p\">(</span><span class=\"kt\">AA</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">}(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\">#Ok, types are the same</span><span class=\"w\"></span>\n<span class=\"nb\">true</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">issametype</span><span class=\"p\">(</span><span class=\"kt\">AA</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">}(),</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># Ok, types are not the same</span><span class=\"w\"></span>\n<span class=\"nb\">false</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">issametype</span><span class=\"p\">(</span><span class=\"kt\">AA</span><span class=\"p\">{</span><span class=\"kt\">Integer</span><span class=\"p\">}(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># Uhm...?</span><span class=\"w\"></span>\n<span class=\"nb\">true</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It happens to do what I want in this case, but I though I needed to define <code>issametype</code> like this: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">issametype</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">AA</span><span class=\"p\">{</span><span class=\"kt\">T1</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">T1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">T2</span><span class=\"o\">&lt;:</span><span class=\"kt\">T1</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to get the same result as above.</p>",
        "id": 285062065,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1654472640
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"></span>\n<span class=\"nb\">true</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 285079122,
        "sender_full_name": "Sukera",
        "timestamp": 1654495916
    },
    {
        "content": "<p>so <code>(AA{Integer}(), 1)</code> matches <code>issametype(::AA{Integer}, ::Integer)</code></p>",
        "id": 285079180,
        "sender_full_name": "Sukera",
        "timestamp": 1654495953
    },
    {
        "content": "<p>the <code>T</code> in your definition is not constrained to concrete types, after all</p>",
        "id": 285079196,
        "sender_full_name": "Sukera",
        "timestamp": 1654495986
    },
    {
        "content": "<p>Makes perfect sense. I guess I tripped up on how one is used to writing e.g. <code>isinteger(::AA{&lt;:Integer}) = true</code>, since <code>AA{Integer}</code> is concrete and forgot about the other argument.</p>",
        "id": 285085062,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1654502556
    }
]