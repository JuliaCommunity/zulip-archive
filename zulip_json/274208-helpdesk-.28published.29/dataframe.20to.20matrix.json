[
    {
        "content": "<p>Suppose I have a dataframe like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"sc\">'a'</span><span class=\"o\">:</span><span class=\"sc\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"k\">do</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n           <span class=\"p\">(;</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"n\">rand</span><span class=\"p\">())</span>\n       <span class=\"k\">end</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">|&gt;</span> <span class=\"n\">DataFrame</span>\n<span class=\"mi\">9</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">x</span>     <span class=\"n\">y</span>      <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Char</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">1</span>  <span class=\"mf\">0.74997</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">1</span>  <span class=\"mf\">0.828512</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">1</span>  <span class=\"mf\">0.840793</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">2</span>  <span class=\"mf\">0.97316</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">2</span>  <span class=\"mf\">0.329049</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">2</span>  <span class=\"mf\">0.963159</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.263909</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.0101475</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.162562</span>\n</code></pre></div>\n<p>Is there a natural way to kinda disaggregate this back into a matrix? I.e. I want one dimension of the array to correspond to the unique values of the <code>x</code> column, another dimension to correspond to the unique values of the <code>y</code> column, and then entries of the matrix would be the corresponding entries in the dataframe</p>",
        "id": 277345144,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648763744
    },
    {
        "content": "<p>I could do this like so:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)))</span> <span class=\"k\">do</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n           <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">only</span><span class=\"p\">(</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">row</span> <span class=\"o\">-&gt;</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">))</span>\n           <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">z</span>\n       <span class=\"k\">end</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mf\">0.71842</span>   <span class=\"mf\">0.992283</span>   <span class=\"mf\">0.102177</span>\n <span class=\"mf\">0.901056</span>  <span class=\"mf\">0.481119</span>   <span class=\"mf\">0.835783</span>\n <span class=\"mf\">0.921512</span>  <span class=\"mf\">0.0621665</span>  <span class=\"mf\">0.822107</span>\n</code></pre></div>\n<p>but this is very inefficient, and I suspect there's a smart way to do this that I'm not seeing</p>",
        "id": 277345421,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648763885
    },
    {
        "content": "<p>Here is one way:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">DataFrames</span><span class=\"p\">,</span> <span class=\"n\">AxisKeys</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"sc\">'a'</span><span class=\"o\">:</span><span class=\"sc\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"k\">do</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n                  <span class=\"p\">(;</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"n\">rand</span><span class=\"p\">())</span>\n              <span class=\"k\">end</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">|&gt;</span> <span class=\"n\">DataFrame</span>\n<span class=\"mi\">9</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">x</span>     <span class=\"n\">y</span>      <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Char</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">1</span>  <span class=\"mf\">0.972967</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">1</span>  <span class=\"mf\">0.255974</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">1</span>  <span class=\"mf\">0.0945194</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">2</span>  <span class=\"mf\">0.621327</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">2</span>  <span class=\"mf\">0.0908171</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">2</span>  <span class=\"mf\">0.763769</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.342196</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.187913</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.972685</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">wrapdims</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"ss\">:z</span><span class=\"p\">,</span> <span class=\"ss\">:x</span><span class=\"p\">,</span> <span class=\"ss\">:y</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">dimensional</span> <span class=\"n\">KeyedArray</span><span class=\"p\">(</span><span class=\"n\">NamedDimsArray</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span> <span class=\"n\">with</span> <span class=\"n\">keys</span><span class=\"o\">:</span>\n<span class=\"o\">↓</span>   <span class=\"n\">x</span> <span class=\"o\">∈</span> <span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Char</span><span class=\"p\">}</span>\n<span class=\"o\">→</span>   <span class=\"n\">y</span> <span class=\"o\">∈</span> <span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span>\n<span class=\"n\">And</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n         <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"sc\">'a'</span><span class=\"p\">)</span>    <span class=\"mf\">0.972967</span>     <span class=\"mf\">0.621327</span>     <span class=\"mf\">0.342196</span>\n  <span class=\"p\">(</span><span class=\"sc\">'b'</span><span class=\"p\">)</span>    <span class=\"mf\">0.255974</span>     <span class=\"mf\">0.0908171</span>    <span class=\"mf\">0.187913</span>\n  <span class=\"p\">(</span><span class=\"sc\">'c'</span><span class=\"p\">)</span>    <span class=\"mf\">0.0945194</span>    <span class=\"mf\">0.763769</span>     <span class=\"mf\">0.972685</span>\n</code></pre></div>\n<p>But am far from an expert at these things. I don't know if this is efficient or not.</p>",
        "id": 277348332,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1648765626
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"sc\">'a'</span><span class=\"o\">:</span><span class=\"sc\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"k\">do</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n                  <span class=\"p\">(;</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n              <span class=\"k\">end</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">|&gt;</span> <span class=\"n\">DataFrame</span><span class=\"p\">);</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"p\">;</span><span class=\"n\">df</span>\n<span class=\"mi\">9</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">x</span>     <span class=\"n\">y</span>      <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Char</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Int64</span>\n<span class=\"n\">─────┼────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">1</span>      <span class=\"mi\">1</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">1</span>      <span class=\"mi\">2</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">1</span>      <span class=\"mi\">3</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">2</span>      <span class=\"mi\">4</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">2</span>      <span class=\"mi\">5</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">2</span>      <span class=\"mi\">6</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span> <span class=\"n\">a</span>         <span class=\"mi\">3</span>      <span class=\"mi\">7</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span> <span class=\"n\">b</span>         <span class=\"mi\">3</span>      <span class=\"mi\">8</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span> <span class=\"n\">c</span>         <span class=\"mi\">3</span>      <span class=\"mi\">9</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">unstack</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"ss\">:x</span><span class=\"p\">,</span><span class=\"ss\">:y</span><span class=\"p\">,</span><span class=\"ss\">:z</span><span class=\"p\">),</span> <span class=\"n\">Not</span><span class=\"p\">(</span><span class=\"ss\">:x</span><span class=\"p\">))</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"mi\">1</span>       <span class=\"mi\">2</span>       <span class=\"mi\">3</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span><span class=\"o\">?</span>  <span class=\"kt\">Int64</span><span class=\"o\">?</span>  <span class=\"kt\">Int64</span><span class=\"o\">?</span>\n<span class=\"n\">─────┼────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>      <span class=\"mi\">1</span>       <span class=\"mi\">4</span>       <span class=\"mi\">7</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>      <span class=\"mi\">2</span>       <span class=\"mi\">5</span>       <span class=\"mi\">8</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>      <span class=\"mi\">3</span>       <span class=\"mi\">6</span>       <span class=\"mi\">9</span>\n</code></pre></div>",
        "id": 277348526,
        "sender_full_name": "jar",
        "timestamp": 1648765777
    },
    {
        "content": "<p>Nice, thanks guys. AxisKeys is a very slick solution. It's about an order of magnitude slower than <span class=\"user-mention\" data-user-id=\"326776\">@jar</span>'s solution, but also an order of magnitude faster than my attempt with <code>filter</code>.</p>",
        "id": 277349535,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648766481
    },
    {
        "content": "<p>My problem with Jar's solution though is that it's not a dense matrix at the end, but rather a collection of vectors</p>",
        "id": 277349643,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648766524
    },
    {
        "content": "<p>The fastest method I've fouind so far is</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)),</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)))</span>\n    <span class=\"n\">gdf</span> <span class=\"o\">=</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"ss\">:x</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">sdf</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">gdf</span><span class=\"p\">)</span>\n        <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">z</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">arr</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>but it's ugly and not very generic</p>",
        "id": 277349689,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648766562
    },
    {
        "content": "<p>How does something like <code>Matrix{Float64}(unstack(df, :x,:y,:z)[:, 2:end])</code> perform?</p>",
        "id": 277349858,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1648766673
    },
    {
        "content": "<p>Seems about as fast as Jar's solution</p>",
        "id": 277350129,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648766854
    },
    {
        "content": "<p>Thanks guys!</p>",
        "id": 277351535,
        "sender_full_name": "Mason Protter",
        "timestamp": 1648767760
    }
]