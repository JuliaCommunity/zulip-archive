[
    {
        "content": "<p>There's a particular pattern I use frequently, but I've realized that it creates some type instability (due to a closure, IIUC). That pattern is to declare some helper variables, and then <code>map</code> over a range/collection and return a vector of a custom struct. </p>\n<p>Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">D</span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"kt\">B</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">A</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">B</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.</span>\n\n<span class=\"w\">    </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I could do something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.</span>\n\n<span class=\"w\">    </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">D</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"kt\">Int64</span><span class=\"p\">}}(</span><span class=\"nb\">undef</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">output</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>But:</p>\n<ol>\n<li>The <code>map</code> approach is a lot cleaner.</li>\n<li>In my real examples, <code>D</code> can be a pretty complex parametric type and pre-allocating the right concrete output type can be difficult manage.</li>\n</ol>\n<p><strong>Are there any other patterns or ways to avoid the type instability that don't require a lot of forethought about pre-allocating the right output container?</strong></p>\n<p>(My MWE is a simplified version of the <code>(d::DeferredAnnuity)(curve)</code> function from my new <a href=\"https://juliaactuary.org/posts/autodiff_alm/#liability-modeling\">blogpost here</a>.)</p>",
        "id": 525441431,
        "sender_full_name": "Alec",
        "timestamp": 1750740653
    },
    {
        "content": "<p>Taking your question at face value, the reason for the type instability is that <code>x</code> is defined in one function but mutated in another (in the closure). The compiler then is not able to infer the type of <code>x</code>. Some ways to fix that:</p>\n<ul>\n<li>\n<p>declare the type of <code>x</code>, like <code>x::Float64 = 0.</code></p>\n</li>\n<li>\n<p>make <code>x</code> something like a <code>Ref{Float64}</code>, or <code>Box{Float64}</code> (from <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/ZeroDimensionalArrays\">ZeroDimensionalArrays.jl</a>)</p>\n</li>\n</ul>",
        "id": 525446712,
        "sender_full_name": "Neven Sajko",
        "timestamp": 1750745172
    },
    {
        "content": "<p>However I think there may be other problems with your code.</p>",
        "id": 525446783,
        "sender_full_name": "Neven Sajko",
        "timestamp": 1750745211
    },
    {
        "content": "<p>The <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/Transducers\">Transducers.jl</a> way would be to write</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Transducers</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">Scan</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">nothing</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">        </span><span class=\"n\">x′</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">x′</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x′</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span>\n</code></pre></div>",
        "id": 525464518,
        "sender_full_name": "Mason Protter",
        "timestamp": 1750753068
    },
    {
        "content": "<p>Or if we're allowed to use the fact that <code>x</code> is stored in the previous iteration's <code>.a</code> field, you could write it with <code>Base.accumulate</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"o\">=</span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I only brought in <a href=\"https://juliaregistries.github.io/General/packages/redirect_to_repo/Transducers\">Transducers.jl</a> for the composition of <code>Map</code> with <code>Scan</code>. I guess you could also do it with <code>Iterators.accumulate</code> / <code>Iterators.map</code>.</p>",
        "id": 525465821,
        "sender_full_name": "Mason Protter",
        "timestamp": 1750753549
    },
    {
        "content": "<p>Whenever I write something clever like this with accumulate, I'm proud of myself, later horrified when I have to read it...</p>\n<p><code>Ref</code> etc got mentioned, but someone ought to say that technically <code>map</code> claims not to guarantee order. </p>\n<p>Another possible pattern is just to <code>push!</code> repeatedly:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo_ref</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n<span class=\"w\">           </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">               </span><span class=\"n\">x</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[],</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">foo_ref</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo_1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sizehint!</span><span class=\"p\">([</span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c\"># sizehint! optional</span>\n\n<span class=\"w\">           </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span>\n<span class=\"w\">               </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">))</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n\n<span class=\"w\">           </span><span class=\"n\">out</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">foo_1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Of course it's a bit awful to have to write the loop body twice. Sometimes I wish we had a macro <code>@pushalloc for i in 1:n</code> which would expand to something like this -- separate the first iteration, find every <code>push!</code> and allocate space using the first time's types. But I never wrote one.</p>",
        "id": 525498944,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1750765455
    },
    {
        "content": "<blockquote>\n<p>Of course it's a bit awful to have to write the loop body twice. Sometimes I wish we had a macro <code>@pushalloc for i in 1:n</code> which would expand to something like this -- separate the first iteration, find every <code>push!</code> and allocate space using the first time's types. But I never wrote one.</p>\n</blockquote>\n<p>What I use for stuff like this is an <code>@unroll</code> macro:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">unroll</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:for</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"only works on for loops\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"This loop pattern isn't supported\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">esc</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"nd\">@gensym</span><span class=\"w\"> </span><span class=\"n\">loopend</span>\n<span class=\"w\">    </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"nd\">@label</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">loopend</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">goto</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"nd\">@goto</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">loopend</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">itr</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"n\">unrolled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"w\">        </span><span class=\"k\">quote</span>\n<span class=\"w\">            </span><span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nd\">@goto</span><span class=\"w\"> </span><span class=\"n\">loopend</span>\n<span class=\"w\">            </span><span class=\"o\">$</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">next</span>\n<span class=\"w\">            </span><span class=\"o\">$</span><span class=\"n\">body</span>\n<span class=\"w\">            </span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">append!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unrolled</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">remainder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">quote</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"o\">$</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">next</span>\n<span class=\"w\">            </span><span class=\"o\">$</span><span class=\"n\">body</span>\n<span class=\"w\">            </span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"nd\">@label</span><span class=\"w\"> </span><span class=\"n\">loopend</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">remainder</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">out</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 525509467,
        "sender_full_name": "Mason Protter",
        "timestamp": 1750768952
    },
    {
        "content": "<p>Combined with BangBang / MicroCollections, you can avoid type instability and still be generic:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">BangBang</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MicroCollections</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo_bang</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">UndefVector</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{}}(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">           </span><span class=\"nd\">@unroll</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span>\n<span class=\"w\">               </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">setindex!!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"n\">out</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo_bang</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">  11.934 ns (2 allocations: 128 bytes)</span>\n<span class=\"go\">4-element Vector{D{Float64, Int64}}:</span>\n<span class=\"go\"> D{Float64, Int64}(2.718281828459045, 1)</span>\n<span class=\"go\"> D{Float64, Int64}(10.107337927389695, 2)</span>\n<span class=\"go\"> D{Float64, Int64}(30.19287485057736, 3)</span>\n<span class=\"go\"> D{Float64, Int64}(84.7910248837216, 4)</span>\n</code></pre></div>",
        "id": 525509693,
        "sender_full_name": "Mason Protter",
        "timestamp": 1750769029
    },
    {
        "content": "<p>Had a go at writing the dumb one I imagined:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo_mac</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">           </span><span class=\"nd\">@pusher</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span>\n<span class=\"w\">               </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">))</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">foo_mac</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo_mac</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">D</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}(</span><span class=\"mf\">2.718281828459045</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}(</span><span class=\"mf\">10.107337927389695</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}(</span><span class=\"mf\">30.19287485057736</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>defined:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"s\">\"\"\"</span>\n<span class=\"s\">    @pusher out = for i in ...</span>\n\n<span class=\"s\">Looks for `push!(out, x)` in the body of a given `for` loop,</span>\n<span class=\"s\">and replaces the first iteration with `out = [x]` to create the vector.</span>\n<span class=\"s\">Not very smart, may be fooled by nested loops, and by `push!(out, x, y)`.</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"k\">macro</span><span class=\"w\"> </span><span class=\"n\">pusher</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Meta</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"expects @pusher out = for i in ...\"</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">args</span>\n<span class=\"w\">  </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"expects @pusher out = for i in ...\"</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Meta</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:for</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"expects @pusher out = for i in ...\"</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">top</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">args</span>\n<span class=\"w\">  </span><span class=\"n\">Meta</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"expects @pusher out = for i in ...\"</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">.</span><span class=\"n\">args</span>\n<span class=\"w\">  </span><span class=\"nd\">@gensym</span><span class=\"w\"> </span><span class=\"n\">rest</span>\n<span class=\"w\">  </span><span class=\"n\">firstbody</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">_firstbody!</span><span class=\"p\">(</span><span class=\"n\">firstbody</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">quote</span>\n<span class=\"w\">    </span><span class=\"o\">$</span><span class=\"n\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">peel</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">$</span><span class=\"n\">firstbody</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">rest</span>\n<span class=\"w\">      </span><span class=\"o\">$</span><span class=\"n\">body</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"w\">    </span><span class=\"o\">$</span><span class=\"n\">out</span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">esc</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">_firstbody!</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"o\">.</span><span class=\"n\">isexpr</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:call</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:push!</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">out</span>\n<span class=\"w\">    </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c\"># apparently you can mutate this</span>\n<span class=\"w\">    </span><span class=\"n\">empty!</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:vect</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"k\">elseif</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">Expr</span>\n<span class=\"w\">    </span><span class=\"n\">foreach</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">_firstbody!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 525510352,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1750769246
    },
    {
        "content": "<p>Yours is more clever about allocating exactly the right amount of space, thanks to <code>UndefVector{Union{}}(n)</code> I guess:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo_bang</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c\"># same as @btime foo2(100); with Vector{}(undef, ...)</span>\n<span class=\"w\">  </span><span class=\"mf\">415.415</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">1.62</span><span class=\"w\"> </span><span class=\"n\">KiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo_mac</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c\"># repeated simple push!</span>\n<span class=\"w\">  </span><span class=\"mf\">636.364</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">3.98</span><span class=\"w\"> </span><span class=\"n\">KiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo_1</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c\"># sizehint! then push!... could be added to @pusher macro</span>\n<span class=\"w\">  </span><span class=\"mf\">487.031</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">1.67</span><span class=\"w\"> </span><span class=\"n\">KiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c\"># original map with Core.Box</span>\n<span class=\"w\">  </span><span class=\"mf\">19.417</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">307</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">8.00</span><span class=\"w\"> </span><span class=\"n\">KiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 525512055,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1750769772
    },
    {
        "content": "<p>I get the same performance if I delete the macro in <code>foo_bang(n)</code>, i.e. just call <code>out = setindex!!(out, D(x, i), i)</code> in the plain loop without unrolling.</p>",
        "id": 525512880,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1750769996
    },
    {
        "content": "<p>that probably works out due to small union optimizations and branch prediction</p>",
        "id": 525514321,
        "sender_full_name": "Mason Protter",
        "timestamp": 1750770396
    },
    {
        "content": "<p>the reason for the unroll is to make sure the loop body is able to know the concrete type of <code>out</code></p>",
        "id": 525514465,
        "sender_full_name": "Mason Protter",
        "timestamp": 1750770430
    },
    {
        "content": "<p>I guess that's right. Both versions infer to return <code>out::Union{Vector{D{Float64, Int64}}, UndefVector{...}}</code> but inside the loop the unrolled one should be more certain.</p>",
        "id": 525515257,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1750770664
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kt\">Any</span><span class=\"p\">[]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo_bang</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">UndefVector</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{}}(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">foo_mac</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">MethodError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 525515282,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1750770670
    },
    {
        "content": "<p>yeah. Might want a length check to eliminate the 0-arg path and make the final return concrete.</p>",
        "id": 525515537,
        "sender_full_name": "Mason Protter",
        "timestamp": 1750770740
    },
    {
        "content": "<p>Y'all are amazingly helpful as always! I <a href=\"https://juliaactuary.org/posts/autodiff_alm/#appendix-even-more-performance-advanced\">updated the blog post</a> with the more advanced unrolling version which was 3x faster on a large AD calculation after making the function type stable.</p>",
        "id": 525823340,
        "sender_full_name": "Alec",
        "timestamp": 1750912993
    }
]