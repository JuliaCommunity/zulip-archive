[
    {
        "content": "<p>Hi everyone, I'm just starting to learn Julia (coming from the Python deep learning world). I was wondering if there's an equivalent of <code>??</code> (for showing current function's source code) when working with Julia in Jupyter Notebooks. I tried <code>@code_string</code> from the \"CodeTracking\" package but it doesn't always work. I also tried the <code>@less</code>macro but it always shows me the entire module instead of just the current function.</p>",
        "id": 262951352,
        "sender_full_name": "Gary Lai",
        "timestamp": 1638137670
    },
    {
        "content": "<p>There's been an <a href=\"https://github.com/JuliaLang/julia/issues/2625\">open issue</a> about this for several yaers, the CodeTracking package seems to be the current recommendation there. Does it not reliably work even with <a href=\"https://github.com/search?q=Revise.jl&amp;type=Repositories\">Revise.jl</a> loaded too? I haven't used it since I don't use a notebook much.</p>",
        "id": 262952390,
        "sender_full_name": "Sundar R",
        "timestamp": 1638139242
    },
    {
        "content": "<p>There's also the <code>@edit</code> macro, in case you weren't aware - which also loads the entire file, but in an external editor, so it might be easier to navigate.</p>",
        "id": 262952449,
        "sender_full_name": "Sundar R",
        "timestamp": 1638139355
    },
    {
        "content": "<p>Here's a quick and dirty <code>@showsource</code> macro I just wrote, to show you some number of lines (that you can specify) starting from the function's beginning: <a href=\"https://gist.github.com/digital-carver/7fec89a2bb19e07066ad64abbb75c870\">https://gist.github.com/digital-carver/7fec89a2bb19e07066ad64abbb75c870</a> (assumes you have <code>head</code> and <code>tail</code> commands available on your system - if on Windows, you can install GNU utilities or find them within your git installation, and add their path to PATH).</p>",
        "id": 262954821,
        "sender_full_name": "Sundar R",
        "timestamp": 1638142740
    },
    {
        "content": "<p>I have an idea for a smarter version that tries to detect the end of the function, but it's pretty late here so that's gonna have to wait till late tomorrow. It'll still be hacky (i.e. based on line patterns rather than source code analysis), but should be good enough for interactive usage.</p>",
        "id": 262954900,
        "sender_full_name": "Sundar R",
        "timestamp": 1638142871
    }
]