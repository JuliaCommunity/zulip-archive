[
    {
        "content": "<p>scalex(α) = ((x,y),) -&gt; (α*x, y)</p>",
        "id": 246546950,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1626759555
    },
    {
        "content": "<p>Ah, that <code>,</code> in the outer parens denotes that you want to construct a tuple:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),)</span>\n<span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n<span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n<span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 246547108,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1626759765
    },
    {
        "content": "<p>And in the context of this function definition seems to denote that you mean to pull a tuple of <code>(x,y)</code> _out_ of the argument to <code>scalex</code>. I.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">scalex</span><span class=\"p\">(</span><span class=\"n\">α</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">),)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">α</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">scalex</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">scalex</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">scalex</span><span class=\"p\">(</span><span class=\"n\">α</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">α</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">scalex</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">scalex</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">scalex</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#5#6\"</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#5#6\"</span><span class=\"p\">)(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 246547281,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1626759994
    },
    {
        "content": "<p>i can see it happening, but not why. </p>\n<ol>\n<li>Is it related to the function being a lambda expressions on the arguments?</li>\n<li>Why use a lambda expression here?</li>\n</ol>\n<p>I was just tinkering with tuple arguments and the splat operator, and was going really well until I saw that comma:<br>\n    f₈(x,y,z) = 5sin(x<em>y) + 2</em>y/4z<br>\n    f₈(v)=f₈(v...)<br>\nand<br>\n    f₉((x,y,z)) = 5sin(x<em>y) + 2</em>y/4z<br>\n    f₉(x,y,z)=f₉((x,y,z))<br>\n    w = (1,2,3)<br>\n    f₉(w...),f₉(w)</p>",
        "id": 246547632,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1626760462
    },
    {
        "content": "<p>Yeah, so</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">),)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">α</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>is just fancy lambda syntax equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"p\">(</span><span class=\"n\">tpl</span><span class=\"p\">)</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">tpl</span>\n    <span class=\"k\">return</span> <span class=\"n\">α</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>and the whole thing is equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">scalex</span><span class=\"p\">(</span><span class=\"n\">α</span><span class=\"p\">)</span>\n    <span class=\"k\">function</span> <span class=\"p\">(</span><span class=\"n\">tpl</span><span class=\"p\">)</span>\n       <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">tpl</span>\n       <span class=\"k\">return</span> <span class=\"n\">α</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 246548435,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1626761413
    },
    {
        "content": "<p>OK thanks... I can see the tuple literal with the lonely <code>,</code> being equivalent to the function parameters declaration.</p>",
        "id": 246550216,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1626763414
    },
    {
        "content": "<p>A tuple of one element takes a trailing comma. Otherwise the parentheses would be interpreted as grouping operations together.</p>",
        "id": 247293555,
        "sender_full_name": "Patrick Toche",
        "timestamp": 1627360662
    }
]