[
    {
        "content": "<p>Hi Everyone.  This is my first time using this forum....</p>",
        "id": 258837397,
        "sender_full_name": "Jeffrey Vasel",
        "timestamp": 1635015153
    },
    {
        "content": "<p>Here is my current situation:<br>\nWhen I ccall my C function from Julia, the C function has to do some initial work that takes a lot of time.  Then it processes the data Julia sent to it.<br>\nA very short time later, Julia has some new data.  Julia then ccall the C function again.  The C function has to do the same initial work again causing a delay before it can process the new data Julia sent to it.<br>\nIdeally, I would like to be able to send new data from Julia to the C program without having to restart the C program with another ccall.<br>\nSo, I thought perhaps I can have C \"callback\" a Julia function and retrieve data from the Julia function back into the C program.<br>\nWhat are your thoughts?</p>",
        "id": 258837492,
        "sender_full_name": "Jeffrey Vasel",
        "timestamp": 1635015282
    },
    {
        "content": "<p>Hey Jeffrey, welcome. </p>\n<p>Have you considered just setting a flag in the C function that determines if you repeat the setup work? E.g. you could make it so that it caches the setup work somewhere, and then when Julia calls the C function, it either calls the version that does the setup work, or it calls the version that fetches the setup work from last time</p>",
        "id": 258838116,
        "sender_full_name": "Mason Protter",
        "timestamp": 1635016278
    },
    {
        "content": "<p>But I think doing mutual callbacks would probably work too</p>",
        "id": 258838120,
        "sender_full_name": "Mason Protter",
        "timestamp": 1635016295
    },
    {
        "content": "<p>Hi Mason!  </p>\n<p>The mutual callback sounds interesting.  I have C sending Julia data via a callback but is it possible for Julia to send data to C via this same callback?</p>",
        "id": 258838363,
        "sender_full_name": "Jeffrey Vasel",
        "timestamp": 1635016698
    },
    {
        "content": "<p><a href=\"https://julialang.org/blog/2013/05/callback/\">https://julialang.org/blog/2013/05/callback/</a></p>",
        "id": 258853597,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1635041048
    },
    {
        "content": "<p>I have an example of the classic mutual fibonacci recurrence in <a href=\"https://github.com/GunnarFarneback/DynamicallyLoadedEmbedding.jl/blob/2df94e871b4967f96fe41427fcecd529685f1fb0/c/main.c#L6-L19\">https://github.com/GunnarFarneback/DynamicallyLoadedEmbedding.jl/blob/2df94e871b4967f96fe41427fcecd529685f1fb0/c/main.c#L6-L19</a> and <a href=\"https://github.com/GunnarFarneback/DynamicallyLoadedEmbedding.jl/blob/2df94e871b4967f96fe41427fcecd529685f1fb0/src/julia_cfunctions.jl#L3-L14\">https://github.com/GunnarFarneback/DynamicallyLoadedEmbedding.jl/blob/2df94e871b4967f96fe41427fcecd529685f1fb0/src/julia_cfunctions.jl#L3-L14</a>.</p>",
        "id": 258870786,
        "sender_full_name": "Gunnar Farnebäck",
        "timestamp": 1635070218
    },
    {
        "content": "<p>Also see here for a refinement callback for triangulations:<br>\n<a href=\"https://github.com/JuliaGeometry/Triangulate.jl/blob/master/src/ctriangulateio.jl\">https://github.com/JuliaGeometry/Triangulate.jl/blob/master/src/ctriangulateio.jl</a>   and  <a href=\"https://github.com/JuliaGeometry/Triangulate.jl/blob/master/deps/src/triwrap.c\">https://github.com/JuliaGeometry/Triangulate.jl/blob/master/deps/src/triwrap.c</a></p>",
        "id": 258889580,
        "sender_full_name": "j-fu",
        "timestamp": 1635097469
    },
    {
        "content": "<p>Wow!!! Lots of good material...I need a bit more time to delve into it...I will circle back with you all soon though...thx!</p>",
        "id": 258900457,
        "sender_full_name": "Jeffrey Vasel",
        "timestamp": 1635112592
    }
]