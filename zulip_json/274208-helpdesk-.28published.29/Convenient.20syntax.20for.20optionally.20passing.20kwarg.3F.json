[
    {
        "content": "<p>Quite often I want to optionally pass a kwarg based on some condition, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">()</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>But this quickly becomes verbose if there are many other args to <code>f</code> (and potentially other \"optional\" kwargs).</p>\n<p>The above example can be turned into a one-liner, for instance like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(;))</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>But that doesn't read very nicely.</p>\n<p>Another approach, which scales better to situations where <code>f</code> takes more arguments, would be:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">kwargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Pair</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"kt\">Any</span><span class=\"p\">}[]</span>\n<span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>But it involves creating a temporary a Vector (or Dict) with <code>Any</code>s. So it doesn't feel great either.</p>\n<p>Is there a better way?</p>",
        "id": 443265927,
        "sender_full_name": "Rasmus Henningsson",
        "timestamp": 1717756696
    },
    {
        "content": "<p>I usually define the kwargs in all branches of the code, and always pass them. If a function accepts kwargs, it probably has a default that can be passed anyways:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">default_a</span><span class=\"p\">()</span>\n\n<span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># always forward some value</span>\n</code></pre></div>",
        "id": 443275251,
        "sender_full_name": "JÃºlio Hoffimann",
        "timestamp": 1717758609
    },
    {
        "content": "<p>Yes, that's a good solution and it often works.<br>\nBut sometimes there is no default value, or I don't want to specify the default (it can be complicated or defined in a dependency). So it would be nice to be able  handle these situations as well.</p>",
        "id": 443278791,
        "sender_full_name": "Rasmus Henningsson",
        "timestamp": 1717760027
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 443346965,
        "sender_full_name": "jar",
        "timestamp": 1717784300
    },
    {
        "content": "<p>No, that's not what I want. That could also be written compactly as:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What I want is to not pass the kwarg at all in one of the cases.</p>",
        "id": 443352366,
        "sender_full_name": "Rasmus Henningsson",
        "timestamp": 1717786004
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(;(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">,))</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(;(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">,))</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 443373114,
        "sender_full_name": "jar",
        "timestamp": 1717791968
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(;(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">(;)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(;(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">(;)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 443373747,
        "sender_full_name": "jar",
        "timestamp": 1717792090
    },
    {
        "content": "<blockquote>\n<p>if there are many other args toÂ <code>f</code>Â (and potentially other \"optional\" kwargs).</p>\n</blockquote>\n<p>This happens indeed, and I personally prefer to fully build the kwargs namedtuple and only then pass it to the function. This makes it more convenient to have eg some keywords depending on others.</p>\n<p>Here's a nice simple and readable way to do that:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Accessors</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DataPipes</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nd\">@p</span><span class=\"w\"> </span><span class=\"k\">let</span>\n<span class=\"w\">           </span><span class=\"p\">(;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">           </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 443388676,
        "sender_full_name": "aplavin",
        "timestamp": 1717798502
    },
    {
        "content": "<p>I hate to be critical but to me that's neither nice, nor simple, nor readable.</p>\n<p>For these situations I generally just resort to some variation of</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">kwargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(;)</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span>\n<span class=\"w\">    </span><span class=\"n\">kwargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 443443811,
        "sender_full_name": "Gunnar FarnebÃ¤ck",
        "timestamp": 1717837009
    },
    {
        "content": "<p>I usually just use an if statement like Gunnar's as well. I personally don't have no idea how to read that Accessors syntax.. If you have <code>kwargs</code> in the function signature (where the other function is being called, not the <code>f</code> in these examples) you can also work with that object directly and delete/add keys to it.</p>",
        "id": 443448814,
        "sender_full_name": "Daniel VandenHeuvel",
        "timestamp": 1717841392
    },
    {
        "content": "<blockquote>\n<p>resort to some variation of ...</p>\n</blockquote>\n<p>This is not type-stable though, so only suitable for pieces when performance doesn't matter.</p>",
        "id": 443468951,
        "sender_full_name": "aplavin",
        "timestamp": 1717853827
    },
    {
        "content": "<blockquote>\n<p>I personally don't have no idea how to read that Accessors syntax..</p>\n</blockquote>\n<p>Of course, any syntax requires some familiarity to be readable and understandable :)<br>\nIn this specific case, code looks reasonably nice even without Accessors:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nd\">@p</span><span class=\"w\"> </span><span class=\"k\">let</span>\n<span class=\"w\">           </span><span class=\"p\">(;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">(;</span><span class=\"n\">__</span><span class=\"o\">...</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"n\">__</span><span class=\"o\">...</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n</code></pre></div>\n<p>although the intent is arguably more clean with <code>@insert</code>. Also, it has <code>@delete</code>/<code>@set</code>/<code>@modify</code> for more complex usecases.</p>",
        "id": 443469417,
        "sender_full_name": "aplavin",
        "timestamp": 1717854087
    },
    {
        "content": "<blockquote>\n<p>This is not type-stable though, so only suitable for pieces when performance doesn't matter.</p>\n</blockquote>\n<p>Yes, of course. Is that any different with your proposal?</p>",
        "id": 443473113,
        "sender_full_name": "Gunnar FarnebÃ¤ck",
        "timestamp": 1717855462
    },
    {
        "content": "<p>Ehm... Surely it's type stable for reasonable conditions (not <code>rand(Bool)</code> :) ). I wouldn't have suggested a non-type-stable solution here without a major caveat/disclaimer.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nd\">@p</span><span class=\"w\"> </span><span class=\"k\">let</span>\n<span class=\"w\">                  </span><span class=\"p\">(;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                  </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">                  </span><span class=\"n\">ndims</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">                  </span><span class=\"n\">haskey</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:somekey</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nd\">@insert</span><span class=\"w\"> </span><span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">               </span><span class=\"k\">end</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@code_warntype</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mykey</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n<span class=\"o\">&lt;...&gt;</span>\n<span class=\"n\">Body</span><span class=\"o\">::</span><span class=\"nd\">@NamedTuple</span><span class=\"p\">{</span><span class=\"kt\">a</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">b</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">d</span><span class=\"o\">::</span><span class=\"nd\">@NamedTuple</span><span class=\"p\">{</span><span class=\"kt\">mykey</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">}}</span>\n<span class=\"o\">&lt;...&gt;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@code_warntype</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">;;],</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mykey</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">somekey</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;...&gt;</span>\n<span class=\"n\">Body</span><span class=\"o\">::</span><span class=\"nd\">@NamedTuple</span><span class=\"p\">{</span><span class=\"kt\">a</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">b</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">c</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">}</span>\n<span class=\"o\">&lt;...&gt;</span>\n</code></pre></div>",
        "id": 443531499,
        "sender_full_name": "aplavin",
        "timestamp": 1717887418
    },
    {
        "content": "<p>There's some middle ground between <code>rand()</code> and conditions that can be determined from the input types though. Anyway I don't think it's that often it's critical because</p>\n<ol>\n<li>If you only have one or two conditions, <code>kwargs</code> will be a small union and union splitting will apply.</li>\n<li>As soon as you make the function call you have passed a function barrier.</li>\n</ol>\n<p>But sure, if this happens on the way to a frequently called function, you should review what it does to performance.</p>",
        "id": 443578101,
        "sender_full_name": "Gunnar FarnebÃ¤ck",
        "timestamp": 1717926620
    },
    {
        "content": "<p>I don't see how this <code>f</code> is  helping if the user needs to pass in a namedtuple in the first place? If you had that, you would just splat it in. If you don't have that, and you need to construct a namedtuple with variable number of keys depending on a <code>Bool</code>, well then that's by definition type-unstable (the type of the output depends on a runtime value).</p>",
        "id": 443730496,
        "sender_full_name": "Eric Hanson",
        "timestamp": 1718013802
    }
]