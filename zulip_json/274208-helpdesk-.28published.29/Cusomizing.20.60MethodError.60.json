[
    {
        "content": "<p>This has been bugging me in the back of my mind for ages now. Does anyone know of a way that issues like <a href=\"https://github.com/MasonProtter/LegibleLambdas.jl/issues/6\">https://github.com/MasonProtter/LegibleLambdas.jl/issues/6</a> can be fixed? </p>\n<p>Basically, I have a callable <code>struct</code> which stores a function and an expression, and is supposed to print that expression when you <code>show</code> the struct. I'd like errormessages to be able to use this info, but I'm not sure if there's a way or not. I see that <a href=\"https://docs.julialang.org/en/v1/base/base/#Base.Experimental.register_error_hint\">https://docs.julialang.org/en/v1/base/base/#Base.Experimental.register_error_hint</a> exists, but I'm not sure it's applicable here</p>",
        "id": 244498432,
        "sender_full_name": "Mason Protter",
        "timestamp": 1625093270
    },
    {
        "content": "<p>Type treason? <a href=\"https://github.com/JuliaLang/julia/issues/22363#issuecomment-308472359\">https://github.com/JuliaLang/julia/issues/22363#issuecomment-308472359</a></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">ShowExpr</span><span class=\"p\">{</span><span class=\"kt\">Tag</span><span class=\"p\">}</span> <span class=\"k\">end</span>\n\n<span class=\"k\">const</span> <span class=\"n\">COUNTER</span> <span class=\"o\">=</span> <span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">const</span> <span class=\"n\">EXPRS</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"kt\">Any</span><span class=\"p\">}()</span>\n\n<span class=\"k\">macro</span> <span class=\"n\">showexpr</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">COUNTER</span><span class=\"p\">[]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">EXPRS</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ex</span>\n    <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"kt\">ShowExpr</span><span class=\"p\">{</span><span class=\"o\">$</span><span class=\"kt\">tag</span><span class=\"p\">}())</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">::</span><span class=\"kt\">IO</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">ShowExpr</span><span class=\"p\">{</span><span class=\"kt\">Tag</span><span class=\"p\">}})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">Tag</span><span class=\"p\">}</span>\n    <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"p\">,</span> <span class=\"s\">\"typeof(@showexpr \"</span><span class=\"p\">,</span> <span class=\"n\">EXPRS</span><span class=\"p\">[</span><span class=\"n\">Tag</span><span class=\"p\">],</span> <span class=\"s\">\")\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">::</span><span class=\"kt\">IO</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">ShowExpr</span><span class=\"p\">{</span><span class=\"kt\">Tag</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">Tag</span><span class=\"p\">}</span>\n    <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"p\">,</span> <span class=\"s\">\"@showexpr \"</span><span class=\"p\">,</span> <span class=\"n\">EXPRS</span><span class=\"p\">[</span><span class=\"n\">Tag</span><span class=\"p\">])</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Horrible code <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 244506133,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1625099861
    },
    {
        "content": "<p>If I'm understanding properly, I <em>do</em> think that Julia needs special handling of <code>MethodError</code>.  Julia is based upon generic programming, and we expect users to hook into a given library's algorithms by implementing function methods for their types.   When a user gets a traceback, one normally thinks something's wrong, when in fact, for <code>MethodError</code>, they've not done anything <em>wrong</em> so much as they are not done implementing. For those unfamiliar with Julia giving a <code>MethodError</code> traceback without really explaining what it means seems a bit hostile.</p>",
        "id": 244645289,
        "sender_full_name": "Clark C. Evans",
        "timestamp": 1625187209
    }
]