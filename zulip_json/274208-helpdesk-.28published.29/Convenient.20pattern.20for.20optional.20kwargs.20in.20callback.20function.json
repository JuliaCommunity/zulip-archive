[
    {
        "content": "<p>Here is a situation that pops up for me every now and then: I have a function which takes a callback function from the end user which needs to support a wide variety of options, for example like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">my_library_function</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"c\"># Stuff...</span>\n<span class=\"n\">customization</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">lots</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">keyword</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">)</span>\n<span class=\"c\"># More stuff</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Is there a way (e.g. in <code>my_library_function</code>) to make it so that the end user can supply a function with this signature:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">end_users_callback</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">the_only_kwarg_they_need_for_this_particular_customization</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c\"># Stuff....</span>\n</code></pre></div>\n<p>Note that I want the end user to be able to omit slurping the kwargs or else there would be no need for me to post this :)</p>\n<p>I know the best way is probably to not have those options, but for the sake of brevity, assume this is not applicable here.</p>\n<p>One option is to have a signature where the optional arguments are supplied as one big named tuple so users just pick out what they want, e.g. like this</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">end_users_callback</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"p\">)</span>\n<span class=\"n\">flag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">the_only_kwarg_they_need_for_this_particular_customization</span>\n<span class=\"c\"># Stuff ...</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>But I'm wondering if there is an even more convenient way to do it.</p>",
        "id": 482126655,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1731490216
    },
    {
        "content": "<p>I would design the callback to take optional stuff in a single argument that could be either a named tuple, a dictionary, or a struct, whatever works best.</p>",
        "id": 482130162,
        "sender_full_name": "Gunnar Farneb√§ck",
        "timestamp": 1731491273
    },
    {
        "content": "<p>Passing a named tuple (or any struct for that matter) and selecting specific values from it is quite convenient.<br>\nTry this</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">end_users_callback</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">the_only_kwarg_they_need_for_this_particular_customization</span><span class=\"p\">))</span>\n<span class=\"c\"># Stuff ...</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>instead of </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">end_users_callback</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"p\">)</span>\n<span class=\"n\">flag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">the_only_kwarg_they_need_for_this_particular_customization</span>\n<span class=\"c\"># Stuff ...</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Reads almost like kwargs :)</p>",
        "id": 482165869,
        "sender_full_name": "aplavin",
        "timestamp": 1731502526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373536\">aplavin</span> <a href=\"#narrow/channel/274208-helpdesk-.28published.29/topic/Convenient.20pattern.20for.20optional.20kwargs.20in.20callback.20function/near/482165869\">said</a>:</p>\n<blockquote>\n<p>Try this</p>\n</blockquote>\n<p>Thats a nice one! I somehow thought that destructuring requires that you collect all members. I'll add this as a tip in the documentation.</p>",
        "id": 482196151,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1731511052
    }
]