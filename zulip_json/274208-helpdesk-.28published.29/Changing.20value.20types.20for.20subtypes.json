[
    {
        "content": "<p>I am having some trouble getting the typing working for some code that involves a parametric abstract Foo{T} type with several concrete subtypes Bar1{T}, Bar2{T}, ...</p>\n<p>The type parameter is intended as a value (e.g., Symbol) used for dispatch and otherwise is unused. I would like to be able to override the parameter as needed by calling Foo{S} on a value x::Foo{T}, but I need this to call the correct subtype constructor.</p>\n<p>I can do this for each subtype individually, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">}(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Bar1</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"kt\">Bar1</span><span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">}(</span><span class=\"o\">...</span><span class=\"n\">something</span> <span class=\"n\">with</span> <span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Instead, I would prefer to do this all at once by introducing a type parameter for the subtype. I tried the following but got errors either way :</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">}(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Bar</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">Bar</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"o\">&lt;:</span><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}}</span> <span class=\"o\">=</span> <span class=\"kt\">Bar</span><span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">}(</span><span class=\"o\">...</span><span class=\"n\">something</span> <span class=\"n\">with</span> <span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I get: Invalid type parameter name Bar{T}</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">Foo</span><span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">}(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Bar</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">Bar</span><span class=\"o\">&lt;:</span><span class=\"kt\">Foo</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"kt\">Bar</span><span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">}(</span><span class=\"o\">...</span><span class=\"n\">something</span> <span class=\"n\">with</span> <span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I get: TypeError:... expected UnionAll, got a value of type TypeVar</p>\n<p>Any suggestions for the right syntax or alternate approaches are appreciated. Thanks!</p>",
        "id": 248553508,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1628209049
    }
]