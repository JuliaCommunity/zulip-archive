[
    {
        "content": "<p>What's going on here? Appearently the last named function in the <code>let</code> is treated as a toplevel function definition, but the second is not... on the other hand, the first assignment only points to the second method. What is the underlying logic of this?</p>\n<p>EDIT: I got a method wrong in the example, see below for the corrected version.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar3</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">fn2</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span>\n           <span class=\"n\">fn2</span>\n       <span class=\"k\">end</span>\n<span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar3#14\"</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">bar3</span><span class=\"p\">)})</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar3</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">fn2</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span>\n           <span class=\"n\">fn2</span>\n       <span class=\"k\">end</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">bar3</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"n\">bar3</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">35</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar3#15\"</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">bar3</span><span class=\"p\">)})(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">35</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">35</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">bar3</span><span class=\"p\">)</span>\n<span class=\"c\"># 1 method for generic function \"bar3\":</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">bar3</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">Main</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">35</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">bar3</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar4</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">fn2</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar4</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"hi\"</span><span class=\"p\">);</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span> <span class=\"k\">end</span>\n           <span class=\"n\">fn2</span>\n       <span class=\"k\">end</span>\n<span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar4#17\"</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">bar4</span><span class=\"p\">)})</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">hi</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">bar4</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"n\">bar4</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar4#17\"</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">bar4</span><span class=\"p\">)})(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n</div></div>",
        "id": 263764435,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1638704808
    },
    {
        "content": "<p>What are you trying to achieve? <code>fn2</code> declaraion is incorrect, since <code>fn(x)</code> is not defined.</p>",
        "id": 263771235,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1638714941
    },
    {
        "content": "<p>Ok, may be it's slightly different issue, but you can see similar error, even if you change named functions to anonymous</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">fn2</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n                  <span class=\"n\">fn2</span>\n              <span class=\"k\">end</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#7#9\"</span><span class=\"p\">)(</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#7#9\"</span><span class=\"p\">)(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 263771471,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1638715244
    },
    {
        "content": "<p>Nothing really to achieve concretely, I just was thinking about something like this during writing a macro. And I don't understand the behaviour. </p>\n<p>The issue is not with the missing method of <code>fn</code> (stupid me, I just forgot the first argument), but about why the named function creates a (globally visible) function at top level only with one method. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar6</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">fn2</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar6</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span>\n           <span class=\"n\">fn2</span>\n       <span class=\"k\">end</span>\n<span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar6#34\"</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">bar6</span><span class=\"p\">)})</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">bar6</span><span class=\"p\">)</span>\n<span class=\"c\"># 1 method for generic function \"bar6\":</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">bar6</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">Main</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">57</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar7</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">fn2</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar7</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">bar7</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span>\n           <span class=\"n\">fn2</span>\n       <span class=\"k\">end</span>\n<span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar7#35\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar7#35\"</span><span class=\"p\">)(</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar7#35\"</span><span class=\"p\">)(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">61</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar7#35\"</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">61</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">62</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">bar7</span><span class=\"p\">)</span>\n<span class=\"c\"># 1 method for generic function \"bar7\":</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">bar7</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">Main</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">61</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Why is <code>bar7</code> treated as a closure within the second part of the let-block, whereas the first method is leaked outside?</p>",
        "id": 263774075,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1638718752
    },
    {
        "content": "<p>This is on 1.7.0, BTW.</p>",
        "id": 263774237,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1638719025
    },
    {
        "content": "<p>In non-global scope, named functions don't work at all:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">outer</span><span class=\"p\">()</span>\n           <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">let</span> <span class=\"n\">fun1</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar8</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">fun2</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar8</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">fun1</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span>\n               <span class=\"n\">fun2</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">outer</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">outer</span><span class=\"p\">()</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">UndefVarError</span><span class=\"o\">:</span> <span class=\"n\">fun1</span> <span class=\"n\">not</span> <span class=\"n\">defined</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">outer</span><span class=\"p\">()</span>\n   <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">./</span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">70</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">71</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">let</span> <span class=\"n\">fun1</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar8</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">fun2</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"n\">bar8</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">fun1</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span>\n           <span class=\"n\">fun2</span>\n       <span class=\"k\">end</span>\n<span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">var</span><span class=\"s\">\"#bar8#40\"</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">bar8</span><span class=\"p\">)})</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"n\">outer</span><span class=\"p\">()</span>\n           <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">let</span> <span class=\"n\">fun3</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">fun4</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">fun3</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n               <span class=\"n\">fun4</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">outer</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">outer</span><span class=\"p\">()</span>\n<span class=\"c\">#42 (generic function with 1 method)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">outer</span><span class=\"p\">()(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n</code></pre></div>\n<p>I always thought that a named function at non-global scope behaved just like a closure with a specifed name (which gets mangled into the generated symbol), but appearently it does make a difference.</p>",
        "id": 263774639,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1638719607
    }
]