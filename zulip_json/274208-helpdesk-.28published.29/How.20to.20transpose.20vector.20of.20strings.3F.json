[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s\">\"bar\"</span><span class=\"p\">]</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"s\">\"foo\"</span>\n <span class=\"s\">\"bar\"</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span><span class=\"o\">'</span>\n<span class=\"mi\">1</span><span class=\"o\">×</span><span class=\"mi\">2</span> <span class=\"n\">adjoint</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">})</span> <span class=\"n\">with</span> <span class=\"n\">eltype</span> <span class=\"kt\">Union</span><span class=\"p\">{}</span><span class=\"o\">:</span>\n<span class=\"n\">Error</span> <span class=\"n\">showing</span> <span class=\"n\">value</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">Adjoint</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">adjoint</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"n\">adjoint</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">SuiteSparse</span><span class=\"o\">.</span><span class=\"n\">CHOLMOD</span><span class=\"o\">.</span><span class=\"kt\">FactorComponent</span><span class=\"p\">{</span><span class=\"kt\">Tv</span><span class=\"p\">,</span> <span class=\"ss\">:L</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"kt\">Tv</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">buildworker</span><span class=\"o\">/</span><span class=\"n\">worker</span><span class=\"o\">/</span><span class=\"n\">package_linux64</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">SuiteSparse</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">cholmod</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1175</span>\n  <span class=\"n\">adjoint</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">SuiteSparse</span><span class=\"o\">.</span><span class=\"n\">CHOLMOD</span><span class=\"o\">.</span><span class=\"kt\">FactorComponent</span><span class=\"p\">{</span><span class=\"kt\">Tv</span><span class=\"p\">,</span> <span class=\"ss\">:U</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"kt\">Tv</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">buildworker</span><span class=\"o\">/</span><span class=\"n\">worker</span><span class=\"o\">/</span><span class=\"n\">package_linux64</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">SuiteSparse</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">cholmod</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1176</span>\n  <span class=\"n\">adjoint</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">SuiteSparse</span><span class=\"o\">.</span><span class=\"n\">CHOLMOD</span><span class=\"o\">.</span><span class=\"kt\">FactorComponent</span><span class=\"p\">{</span><span class=\"kt\">Tv</span><span class=\"p\">,</span> <span class=\"ss\">:PtL</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"kt\">Tv</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">buildworker</span><span class=\"o\">/</span><span class=\"n\">worker</span><span class=\"o\">/</span><span class=\"n\">package_linux64</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">SuiteSparse</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">cholmod</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1177</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n</code></pre></div>",
        "id": 245815824,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1626178972
    },
    {
        "content": "<p>Type piracy? :-)</p>",
        "id": 245816634,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1626179385
    },
    {
        "content": "<p><a href=\"https://discourse.julialang.org/t/transpose-of-an-array-of-strings/40431\">https://discourse.julialang.org/t/transpose-of-an-array-of-strings/40431</a></p>",
        "id": 245816859,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1626179487
    },
    {
        "content": "<p>Depending on task, you can either use <code>permutedims</code> or add <code>transpose</code> for strings.</p>",
        "id": 245816924,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1626179516
    }
]