[
    {
        "content": "<p>I'm trying to splat a <code>Dict{Symbol, Any}</code> into a struct that I created with <code>@kwdef</code>, it looks like I've defined the method: <code>MyStruct(; abc)</code>, but it's not interpreting the splat as keyword arguments, instead as positional arguments.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"nd\">@kwdef</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"kt\">MyStruct</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"n\">abc</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">MyStruct</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c\"># 3 methods for type constructor:</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">493</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">abc</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">Untitled</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">abc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">Untitled</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:abc</span><span class=\"o\">=&gt;</span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">MethodError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cannot</span><span class=\"w\"> </span><span class=\"sb\">`convert`</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"kt\">Pair</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"w\"></span>\n<span class=\"n\">Closest</span><span class=\"w\"> </span><span class=\"n\">candidates</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Number</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">TwicePrecision</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">twiceprecision</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">273</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">...</span><span class=\"w\"></span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">abc</span><span class=\"o\">::</span><span class=\"kt\">Pair</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">Untitled</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Untitled</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 309505440,
        "sender_full_name": "Hannes",
        "timestamp": 1668377906
    },
    {
        "content": "<p>You need to do <code>MyStruct(; x...)</code> so that julia knows you're splatting as keyword aguments, not regular arguments</p>",
        "id": 309505508,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668377981
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"p\">(;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"go\">MyStruct(123)</span>\n</code></pre></div>",
        "id": 309505586,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668378025
    },
    {
        "content": "<p>Maybe this helps clear it up:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"got arguments: \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"got keyword arguments: \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"go\">got arguments: (:abc =&gt; 123,)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(;</span><span class=\"n\">x</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"go\">got keyword arguments: Base.Pairs(:abc =&gt; 123)</span>\n</code></pre></div>",
        "id": 309505812,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668378192
    },
    {
        "content": "<p>Ah, of course, so obvious in hindsight! Thanks!</p>",
        "id": 309508486,
        "sender_full_name": "Hannes",
        "timestamp": 1668380317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269805\">Hannes</span> has marked this topic as resolved.</p>",
        "id": 309508768,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668380547
    },
    {
        "content": "<p>Happy to help <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 309509458,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668381183
    },
    {
        "content": "<p>My rule of thumb is: _always_ start keyword arguments with semicolon and you don't need to remember about these corner cases</p>",
        "id": 309531259,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1668401307
    },
    {
        "content": "<p>imho kwargs should require <code>;</code></p>",
        "id": 309531390,
        "sender_full_name": "jar",
        "timestamp": 1668401450
    }
]