[
    {
        "content": "<p>I'm thinking of having a family of methods where I check to see if the world age they were compiled with is earlier than X and if so call <code>invokelatest</code>, but I can't see an easy way to check the world age of a method. Might somebody know how best to do this?</p>",
        "id": 310359675,
        "sender_full_name": "Timothy",
        "timestamp": 1668587603
    },
    {
        "content": "<p>Probably not the best way, but so far this has worked for me:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">NoFutureWarn</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"kt\">FutureFunction</span><span class=\"p\">{</span><span class=\"kt\">F</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">FutureFunction</span><span class=\"p\">)(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c\"># try_advance_world_age! does not mutate anything in this version as those parts are stripped out here</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c\"># I had some caching logic which only makes sense in the application this was used for so that</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c\"># this code will never be called for f.f again if world age could be advanced</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fnew</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">try_advance_world_age!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"n\">fnew</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c\"># The world age has advanced and f.f is now safe to use</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">fnew</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nd\">@warn</span><span class=\"w\">  </span><span class=\"s\">\"Calling </span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"s\"> from a future world age. This is quite slow and should be avoided if possible.</span>\n<span class=\"s\">            This warning will only display once.\"</span><span class=\"w\"> </span><span class=\"n\">maxlog</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">NoFutureWarn</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">FutureFunction</span><span class=\"p\">)(</span><span class=\"o\">::</span><span class=\"kt\">NoFutureWarn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">invokelatest</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">get_current_world</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">ccall</span><span class=\"p\">(</span><span class=\"ss\">:jl_get_tls_world_age</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n\n<span class=\"n\">try_advance_world_age!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">try_advance_world_age!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">FutureFunction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">currentworld</span><span class=\"o\">=</span><span class=\"n\">get_current_world</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">fmethod</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fmethod</span><span class=\"o\">.</span><span class=\"n\">primary_world</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">currentworld</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Not sure if it can be made type stable(r) in some way. It was only used in a very specific application and in that context it was fast enough.</p>",
        "id": 310376340,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1668594115
    },
    {
        "content": "<p>Thanks, this has helped me get halfway to where I want, I think.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">relevant_world_age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">get_world_counter</span><span class=\"p\">())</span><span class=\"w\"></span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">update_world_age!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">relevant_world_age</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Ref</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">get_world_counter</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">invokerelevant</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fmethod</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># help! this function is made up, I don't know what to do here</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">fmethod</span><span class=\"o\">.</span><span class=\"n\">primary_world</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">relevant_world_age</span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">invokelatest</span><span class=\"p\">(</span><span class=\"n\">fmethod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fmethod</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The idea is that this would act like <code>invokelatest</code> but only when necessary.</p>\n<p>I think the main issue now is <code>getmethod</code> (which doesn't actually exist). One could probably use <code>first(methods(f, Tuple{typeof(args)...}))</code>, but since half the point of this is to be lightweight I'm not sure if that's a good fit.</p>\n<p>I'm also aware that you can't call methods :( so imagine <code>f</code> in place of <code>fmethod</code> in the invocation lines.</p>",
        "id": 310455231,
        "sender_full_name": "Timothy",
        "timestamp": 1668618068
    },
    {
        "content": "<p>you want <code>methods</code></p>",
        "id": 310456514,
        "sender_full_name": "Sukera",
        "timestamp": 1668618421
    },
    {
        "content": "<p>(the function, not the concept)</p>",
        "id": 310456629,
        "sender_full_name": "Sukera",
        "timestamp": 1668618453
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">help</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"w\"></span>\n<span class=\"n\">search</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"w\"> </span><span class=\"n\">methodswith</span><span class=\"w\"> </span><span class=\"kt\">Method</span><span class=\"w\"> </span><span class=\"kt\">MethodError</span><span class=\"w\"> </span><span class=\"n\">hasmethod</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">types</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"k\">module</span><span class=\"p\">])</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">Return</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">specified</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"w\"> </span><span class=\"n\">whose</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">If</span><span class=\"w\"> </span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">specified</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">module</span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">specified</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">Julia</span><span class=\"w\"> </span><span class=\"mf\">1.4</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">│</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">│</span><span class=\"w\">  </span><span class=\"n\">At</span><span class=\"w\"> </span><span class=\"n\">least</span><span class=\"w\"> </span><span class=\"n\">Julia</span><span class=\"w\"> </span><span class=\"mf\">1.4</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">specifying</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">module</span><span class=\"o\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">See</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"nd\">@which</span><span class=\"o\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310456688,
        "sender_full_name": "Sukera",
        "timestamp": 1668618465
    },
    {
        "content": "<p>As I understand it, <code>methods</code> just gives the list of methods with compatible function signatures. Here we want <em>the</em> method that will be invoked.</p>",
        "id": 310458650,
        "sender_full_name": "Timothy",
        "timestamp": 1668619034
    },
    {
        "content": "<p>If <code>first</code> is good enough, is there anything better than this approach?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@generated</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">argtypes</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">F</span><span class=\"w\"> </span><span class=\"o\">&lt;:</span><span class=\"w\"> </span><span class=\"kt\">Function</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">argtypes</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310459808,
        "sender_full_name": "Timothy",
        "timestamp": 1668619427
    },
    {
        "content": "<p>Oh, and is there any way this could handle kwargs?</p>",
        "id": 310459882,
        "sender_full_name": "Timothy",
        "timestamp": 1668619444
    },
    {
        "content": "<p><code>methods</code> takes two arguments</p>",
        "id": 310459986,
        "sender_full_name": "Sukera",
        "timestamp": 1668619486
    },
    {
        "content": "<p>first the function, second an optional signature</p>",
        "id": 310460000,
        "sender_full_name": "Sukera",
        "timestamp": 1668619494
    },
    {
        "content": "<p>e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"c\"># 1 method for generic function \"+\" from Base:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt8</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">87</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310460059,
        "sender_full_name": "Sukera",
        "timestamp": 1668619514
    },
    {
        "content": "<p>keyword arguments don't participate in dispatch, so you don't use them for method selection</p>",
        "id": 310460209,
        "sender_full_name": "Sukera",
        "timestamp": 1668619563
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">kwfunc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"></span>\n<span class=\"n\">kwfunc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">kwfunc</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c\"># 1 method for generic function \"kwfunc\" from Main:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">kwfunc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">kwfunc</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sig</span><span class=\"w\"></span>\n<span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">kwfunc</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Any</span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">kwfunc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,))</span><span class=\"w\"></span>\n<span class=\"c\"># 1 method for generic function \"kwfunc\" from Main:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">kwfunc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310460317,
        "sender_full_name": "Sukera",
        "timestamp": 1668619598
    },
    {
        "content": "<p>Ok, so I take it there's probably nothing better than my <code>getmethod</code> implementation above?</p>",
        "id": 310460372,
        "sender_full_name": "Timothy",
        "timestamp": 1668619616
    },
    {
        "content": "<p>I think your <code>invokerelevant</code> already is <code>invokelatest</code></p>",
        "id": 310460452,
        "sender_full_name": "Sukera",
        "timestamp": 1668619648
    },
    {
        "content": "<p>but yes</p>",
        "id": 310460474,
        "sender_full_name": "Sukera",
        "timestamp": 1668619655
    },
    {
        "content": "<p>in general, if <code>methods</code> returns only a single argument, that is the method that will be called with arguments of that type</p>",
        "id": 310460648,
        "sender_full_name": "Sukera",
        "timestamp": 1668619696
    },
    {
        "content": "<p>if it returns an empty list, you get a MethodError (there's no method after all)</p>",
        "id": 310460693,
        "sender_full_name": "Sukera",
        "timestamp": 1668619711
    },
    {
        "content": "<p>if it returns a list with more than one thing, it's an ambiguity</p>",
        "id": 310460733,
        "sender_full_name": "Sukera",
        "timestamp": 1668619726
    },
    {
        "content": "<p>so the <code>getmethod</code> you're thinking of is already <code>methods</code></p>",
        "id": 310460861,
        "sender_full_name": "Sukera",
        "timestamp": 1668619777
    },
    {
        "content": "<p>I'm under the impression that doing <code>invokelatest</code> all the time in a whole bunch of places isn't a great idea.</p>",
        "id": 310461370,
        "sender_full_name": "Timothy",
        "timestamp": 1668619921
    },
    {
        "content": "<p>indeed! :)</p>",
        "id": 310461470,
        "sender_full_name": "Sukera",
        "timestamp": 1668619940
    },
    {
        "content": "<p>there's currently no way around the forced type instability</p>",
        "id": 310461504,
        "sender_full_name": "Sukera",
        "timestamp": 1668619952
    },
    {
        "content": "<p>after all, the whole purpose of <code>invokelatest</code>is to call possibly-changed code, with a possibly-changed return type</p>",
        "id": 310461569,
        "sender_full_name": "Sukera",
        "timestamp": 1668619976
    },
    {
        "content": "<p>by proxy, your <code>invokerelevant</code> has the same issue since it uses <code>invokelatest</code> internally</p>",
        "id": 310461623,
        "sender_full_name": "Sukera",
        "timestamp": 1668619997
    },
    {
        "content": "<p>Mmm, the idea with <code>invokelatest</code> is that at least I can avoid it unintentionally triggering.</p>",
        "id": 310461951,
        "sender_full_name": "Timothy",
        "timestamp": 1668620099
    },
    {
        "content": "<p>Since in this situation I'm writing a package that supports lazy-loaded packages, and when doing so can bump the minimum world age.</p>",
        "id": 310462061,
        "sender_full_name": "Timothy",
        "timestamp": 1668620131
    },
    {
        "content": "<p>Do you know about <a href=\"https://github.com/search?q=Requires.jl&amp;type=Repositories\">Requires.jl</a>?</p>",
        "id": 310462187,
        "sender_full_name": "Sukera",
        "timestamp": 1668620175
    },
    {
        "content": "<p>people tend to not like using it, because it causes MASSIVE amounts of invalidations &amp; recompilation</p>",
        "id": 310462254,
        "sender_full_name": "Sukera",
        "timestamp": 1668620206
    },
    {
        "content": "<p>I do, but this is working a little differently. Instead of executing code when a package is loaded, we're loading a package when code is executed <em>if the package is not already loaded</em>.</p>",
        "id": 310463060,
        "sender_full_name": "Timothy",
        "timestamp": 1668620440
    },
    {
        "content": "<p>The idea is that this way a package can be written with say ~20 \"soft dependencies\" and if the user executes something that needs package X and X <em>can</em> be loaded, then this package will do so.</p>",
        "id": 310463258,
        "sender_full_name": "Timothy",
        "timestamp": 1668620515
    },
    {
        "content": "<p>sounds like <a href=\"https://github.com/JuliaLang/julia/pull/47040\">https://github.com/JuliaLang/julia/pull/47040</a></p>",
        "id": 310465481,
        "sender_full_name": "Sukera",
        "timestamp": 1668621227
    },
    {
        "content": "<p>There is some overlap. For reference, this is the code for loading packages on-demand I have: <a href=\"https://github.com/tecosaur/DataToolkitBase.jl/blob/main/src/model/usepkg.jl\">https://github.com/tecosaur/DataToolkitBase.jl/blob/main/src/model/usepkg.jl</a></p>\n<p>It basically lets you do this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foobar</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nd\">@use</span><span class=\"w\"> </span><span class=\"n\">JSON3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">JSON3</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310468569,
        "sender_full_name": "Timothy",
        "timestamp": 1668622219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400021\">Timothy</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Get.20world.20age.20of.20method/near/310461370\">said</a>:</p>\n<blockquote>\n<p>I'm under the impression that doing <code>invokelatest</code> all the time in a whole bunch of places isn't a great idea.</p>\n</blockquote>\n<p>Actually, <code>invokelatest</code> is very very fast unless the worldage has actually changed.</p>",
        "id": 310476130,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668624678
    },
    {
        "content": "<p>cf <a href=\"#narrow/stream/225542-helpdesk/topic/.E2.9C.94.20world.20age/near/308193385\">https://julialang.zulipchat.com/#narrow/stream/225542-helpdesk/topic/.E2.9C.94.20world.20age/near/308193385</a></p>",
        "id": 310476365,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668624739
    },
    {
        "content": "<p>Hmm, is there any potential issue/overhead when the world age changes but nothing relevant has changed?</p>",
        "id": 310527654,
        "sender_full_name": "Timothy",
        "timestamp": 1668645665
    },
    {
        "content": "<p>Hard to measure, but that's what I attempted to probe here: <a href=\"#narrow/stream/225542-helpdesk/topic/.E2.9C.94.20world.20age/near/308194057\">https://julialang.zulipchat.com/#narrow/stream/225542-helpdesk/topic/.E2.9C.94.20world.20age/near/308194057</a></p>",
        "id": 310527818,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668645762
    },
    {
        "content": "<p><del>What I saw was that at least relative to the performance cost of an <code>eval</code>, there was no measurable cost to <code>invokelatest</code> if there's no relative change.</del></p>",
        "id": 310527866,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668645802
    },
    {
        "content": "<p><del>Sorry, what I actually saw there was that irrelevant changes to the world-age <em>do</em> have a substantial impact.</del></p>",
        "id": 310528048,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668645915
    },
    {
        "content": "<p>Annnd wait, that's wrong again. I actually measured it poorly.</p>",
        "id": 310528185,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668646004
    },
    {
        "content": "<p>Here is a better comparison:<br>\nPure eval creating a function:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"nd\">@eval</span><span class=\"w\"> </span><span class=\"n\">blargh</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"c\">#+end_src</span><span class=\"w\"></span>\n\n<span class=\"c\">#+RESULTS:</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"w\"> </span><span class=\"n\">samples</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">evaluation</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">169.600</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\">  </span><span class=\"mf\">7.494</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"mf\">93.67</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">     </span><span class=\"mf\">174.199</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">              </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">    </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">180.871</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"mf\">80.589</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">0.39</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\">  </span><span class=\"mf\">0.94</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">██▅▄▂▁</span><span class=\"w\">                                                       </span><span class=\"n\">▂</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">███████▇▇▇▇███▇█▇▅▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▃▄▅▃▁▄▃▄▅▁▄▄▅</span><span class=\"w\"> </span><span class=\"n\">█</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mi\">170</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">        </span><span class=\"n\">Histogram</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\">       </span><span class=\"mi\">428</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">6.63</span><span class=\"w\"> </span><span class=\"n\">KiB</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">126.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310528214,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668646029
    },
    {
        "content": "<p>And <code>invokelatest</code> on top of that <code>eval</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\">#+begin_src julia</span><span class=\"w\"></span>\n<span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">advance_worldage</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nd\">@eval</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">invokelatest</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"n\">advance_worldage</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"c\">#+end_src</span><span class=\"w\"></span>\n\n<span class=\"c\">#+RESULTS:</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"w\"> </span><span class=\"n\">samples</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">evaluation</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">168.360</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\">  </span><span class=\"mf\">9.291</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"mf\">97.52</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">     </span><span class=\"mf\">173.700</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">              </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">    </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">182.926</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"mf\">98.141</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">0.50</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\">  </span><span class=\"mf\">0.98</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">▇█▅▃▂▁▁</span><span class=\"w\">    </span><span class=\"n\">▂▁▁▂▁▁</span><span class=\"w\">                                            </span><span class=\"n\">▂</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">██████████████████▆▆▅▃▄▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▅▆▄▃▄▄▃▃▄▅▄</span><span class=\"w\"> </span><span class=\"n\">█</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mi\">168</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">        </span><span class=\"n\">Histogram</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\">       </span><span class=\"mi\">424</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">6.63</span><span class=\"w\"> </span><span class=\"n\">KiB</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">126.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310528276,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668646074
    },
    {
        "content": "<p>So my conclusion I guess remains that I don't see any significant overhead to <code>invokelatest</code> if the change doesn't actually affect the method table of the function being called, or any of it's downstream callees</p>",
        "id": 310528431,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668646172
    },
    {
        "content": "<p>And in case you worry that maybe the <code>eval</code>ing the same body many times doesn't change the worldage, I did check the world-age before and after the benchmark, and the difference was <code>38684</code>.</p>",
        "id": 310528698,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668646335
    },
    {
        "content": "<p>So think <code>invokelatest</code> is always doing the smart thing here.</p>",
        "id": 310529009,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668646569
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"374994\">@Michael Fiano</span>, this might be of interest. Turns out the overhead I was attributing to <code>invokelatest</code> before was actually just that <code>eval</code>ing a function is heavier than <code>eval</code>ing a variable binding.</p>",
        "id": 310531745,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668648768
    },
    {
        "content": "<p>It's interesting that <code>invokelatest</code> seems to have the exact same overhead as my <code>invokerecent</code> (20.4us and 20.8us over a baseline of 12.5us in one test case)</p>",
        "id": 310532117,
        "sender_full_name": "Timothy",
        "timestamp": 1668649089
    },
    {
        "content": "<p>Probably because they're essentially doing the same thing</p>",
        "id": 310532137,
        "sender_full_name": "Mason Protter",
        "timestamp": 1668649112
    },
    {
        "content": "<p>Mmm, though it seems like the bulk of the overhead comes from my <code>getmethod</code>.</p>",
        "id": 310532202,
        "sender_full_name": "Timothy",
        "timestamp": 1668649178
    },
    {
        "content": "<p>Just for reference, benchmarks (from a different machine)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"w\"> </span><span class=\"n\">samples</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">996</span><span class=\"w\"> </span><span class=\"n\">evaluations</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">23.710</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\">  </span><span class=\"mf\">2.325</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"mf\">96.48</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">     </span><span class=\"mf\">28.759</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">              </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">     </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">33.361</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"mf\">93.276</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">11.35</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\">  </span><span class=\"mf\">4.01</span><span class=\"o\">%</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"n\">▂▄▆▅▅▆██▅▁</span><span class=\"w\">                             </span><span class=\"n\">▁▁▁</span><span class=\"w\">              </span><span class=\"n\">▂</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">███████████████████▇▇▆▆▅▄▅▄▄▅▅▄▄▅▅▄▅▄▄▄▄▄▆████▇▇▆▅▅▄▄▃▄▇▇▇▇</span><span class=\"w\"> </span><span class=\"n\">█</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mf\">23.7</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">      </span><span class=\"n\">Histogram</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\">      </span><span class=\"mf\">51.7</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">1.</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">invokelatest</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"w\"> </span><span class=\"n\">samples</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">988</span><span class=\"w\"> </span><span class=\"n\">evaluations</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">46.141</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\">  </span><span class=\"mf\">2.463</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"mf\">96.64</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">     </span><span class=\"mf\">49.425</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">              </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">    </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">54.329</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"mf\">94.346</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">7.05</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\">  </span><span class=\"mf\">3.97</span><span class=\"o\">%</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"n\">▃▅▅▅▆█▇▅▂▁▁▁▁</span><span class=\"w\">                             </span><span class=\"n\">▁▁▁</span><span class=\"w\">              </span><span class=\"n\">▂</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">▅██████████████▇█▇▇▆▆▇▆▆▅▆▆▄▄▃▃▁▄▃▄▁▃▄▄▃▁▆█████▇▆▅▆▅▄▅▆▇▇▇▇</span><span class=\"w\"> </span><span class=\"n\">█</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mf\">46.1</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">      </span><span class=\"n\">Histogram</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\">        </span><span class=\"mi\">76</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">1.</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"n\">invokerecent</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"w\"> </span><span class=\"n\">samples</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">989</span><span class=\"w\"> </span><span class=\"n\">evaluations</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">44.554</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\">  </span><span class=\"mf\">2.475</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"mf\">96.14</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">     </span><span class=\"mf\">47.411</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">              </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">    </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">52.438</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"mf\">94.743</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">7.34</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\">  </span><span class=\"mf\">3.98</span><span class=\"o\">%</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"n\">▆▆▆▇██▇▆▄▃▃▂▁▁</span><span class=\"w\">                            </span><span class=\"n\">▁▂▂▁</span><span class=\"w\">             </span><span class=\"n\">▃</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">██████████████████▇▇▆▆▆▅▆▆▆▃▃▁▄▄▄▁▁▁▁▁▃▃▁▅█████▇█▆▅▃▄▃▅▇███</span><span class=\"w\"> </span><span class=\"n\">█</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mf\">44.6</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">      </span><span class=\"n\">Histogram</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\">      </span><span class=\"mf\">73.4</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">1.</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"w\"> </span><span class=\"n\">samples</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">997</span><span class=\"w\"> </span><span class=\"n\">evaluations</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">20.349</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\">  </span><span class=\"mf\">2.378</span><span class=\"w\"> </span><span class=\"n\">μs</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">…</span><span class=\"w\"> </span><span class=\"mf\">97.64</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">     </span><span class=\"mf\">24.670</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">              </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">     </span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"mf\">29.012</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"mf\">93.224</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">  </span><span class=\"n\">┊</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mf\">12.67</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">±</span><span class=\"w\">  </span><span class=\"mf\">3.90</span><span class=\"o\">%</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">▁▃▄▅▅▅▄▃▆█▇▅▁</span><span class=\"w\">  </span><span class=\"n\">▁</span><span class=\"w\">                                            </span><span class=\"n\">▂</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">█████████████▇█████▇▆▆▆▆▄▄▅▂▄▄▄▄▄▅▅▄▄▃▅▆▇█████▆▅▅▅▃▃▄▆▆▆▇▇▇</span><span class=\"w\"> </span><span class=\"n\">█</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mf\">20.3</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\">      </span><span class=\"n\">Histogram</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\">      </span><span class=\"mf\">47.4</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"w\"> </span><span class=\"n\">estimate</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">1.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310533263,
        "sender_full_name": "Timothy",
        "timestamp": 1668650178
    },
    {
        "content": "<p>Hmm, if I add the package re-run bits the overhead grows from ~10ns to ~40ns per call.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">invokerecent</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">primary_world</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">RECENT_WORLD_AGE</span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">invokelatest</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"n\">PkgRequiredRerunNeeded</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">update_recency!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">invokerecent</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rethrow</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Might anyone have any suggestions with this?</p>",
        "id": 310649566,
        "sender_full_name": "Timothy",
        "timestamp": 1668703244
    },
    {
        "content": "<p>Hmm, it looks like I can get much better performance (back to 10ns overhead instead of 30ns) is I return the error instead of throwing it.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">invokerecent2</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">primary_world</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">RECENT_WORLD_AGE</span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">invokelatest</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"n\">PkgRequiredRerunNeeded</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">update_recency!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">invokerecent</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">kwargs</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">res</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310776274,
        "sender_full_name": "Timothy",
        "timestamp": 1668763018
    },
    {
        "content": "<p>that's not surprising - stack unwinding &amp; setting up a function for that is expensive</p>",
        "id": 310777209,
        "sender_full_name": "Sukera",
        "timestamp": 1668763385
    },
    {
        "content": "<p>(relatively speaking)</p>",
        "id": 310777223,
        "sender_full_name": "Sukera",
        "timestamp": 1668763390
    },
    {
        "content": "<p>What I can't see here is the impact this has on type inference</p>",
        "id": 310777490,
        "sender_full_name": "Timothy",
        "timestamp": 1668763481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306754\">Sukera</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/Get.20world.20age.20of.20method/near/310777209\">said</a>:</p>\n<blockquote>\n<p>that's not surprising - stack unwinding &amp; setting up a function for that is expensive</p>\n</blockquote>\n<p>I'm not surprised that raising an exception is so expensive, but I am surprised at how much of an impact just adding a <code>try ... catch end</code> block has.</p>",
        "id": 310777628,
        "sender_full_name": "Timothy",
        "timestamp": 1668763539
    },
    {
        "content": "<p>I wonder if the situation could be any nicer if Julia had first-class delimited continuations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 310777919,
        "sender_full_name": "Timothy",
        "timestamp": 1668763665
    },
    {
        "content": "<p>It seems like there are a few ways this could be done well with LLVM, Chez-like segmented stacks (<a href=\"https://llvm.org/docs/SegmentedStacks.html\">https://llvm.org/docs/SegmentedStacks.html</a>) look interesting but seem to complicate GC.</p>",
        "id": 310778189,
        "sender_full_name": "Timothy",
        "timestamp": 1668763777
    },
    {
        "content": "<p>That link seems more related to ensuring different <em>threads</em>  can grow their stack dynamically</p>",
        "id": 310779646,
        "sender_full_name": "Sukera",
        "timestamp": 1668764313
    },
    {
        "content": "<p>(which is not a problem in single threaded code)</p>",
        "id": 310779658,
        "sender_full_name": "Sukera",
        "timestamp": 1668764322
    },
    {
        "content": "<p>Oh, that link is about segmented stacks existing in LLVM, for how segmented stacks can be used to implement delimited continuations see other resources like <a href=\"https://legacy.cs.indiana.edu/~dyb/pubs/stack.pdf\">https://legacy.cs.indiana.edu/~dyb/pubs/stack.pdf</a></p>",
        "id": 310780303,
        "sender_full_name": "Timothy",
        "timestamp": 1668764557
    },
    {
        "content": "<p>Hmm, I seem to have hit the latest challenge in this endeavour, a good <code>getmethod</code> implementation for types not functions. E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Foo</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">x</span><span class=\"w\"></span>\n\n<span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c\"># function I'd like to define</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For reference, this seems to work nicely with functions</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@generated</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">argtypes</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">F</span><span class=\"w\"> </span><span class=\"o\">&lt;:</span><span class=\"w\"> </span><span class=\"kt\">Function</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">argtypes</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This takes ~10ns.<br>\nI can do</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">typeof</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but that takes ~500ns, which seems like a bit much.</p>",
        "id": 310863286,
        "sender_full_name": "Timothy",
        "timestamp": 1668789777
    },
    {
        "content": "<p>because julia is not specializing <code>getmethod</code> on <code>t</code>, and neither should you</p>",
        "id": 310863758,
        "sender_full_name": "Sukera",
        "timestamp": 1668789919
    },
    {
        "content": "<p><a href=\"https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing\">https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing</a></p>",
        "id": 310863837,
        "sender_full_name": "Sukera",
        "timestamp": 1668789944
    },
    {
        "content": "<p>I take it you're talking about the <code>getmethod(::F, ...)</code> implementation? That works nicely, it's the type instance one I'm trying to improve.</p>",
        "id": 310870050,
        "sender_full_name": "Timothy",
        "timestamp": 1668791672
    },
    {
        "content": "<p>no, I'm talking about the <code>getmethod(t, args...)</code> one</p>",
        "id": 310876538,
        "sender_full_name": "Sukera",
        "timestamp": 1668793626
    },
    {
        "content": "<p>your generated function does specialize, since you parametrize (per my link)</p>",
        "id": 310876605,
        "sender_full_name": "Sukera",
        "timestamp": 1668793647
    },
    {
        "content": "<p>singleing out <code>::Function</code> is not the general case though, since anything can be callable - you're not going to make that faster</p>",
        "id": 310876756,
        "sender_full_name": "Sukera",
        "timestamp": 1668793696
    },
    {
        "content": "<p>I think I've arrived at my solution:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@generated</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">getmethod</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">hasmethod</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 311034301,
        "sender_full_name": "Timothy",
        "timestamp": 1668871969
    }
]