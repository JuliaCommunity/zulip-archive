[
    {
        "content": "<p>Is there a way to filter different sized DataFrames and keep only the rows of both DataFrames where there are matching values in a specific column? E.g.</p>\n<p>Given</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">df1_test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">:col1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"low\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"med\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"high\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">:col2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"a1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"b1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"c1\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">df2_test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">:col1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"med\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">:col2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"b2\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would like to return only the <code>\"med\"</code> row of each DataFrame since only <code>\"med\"</code> of <code>:col1</code> are matching</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">df1_new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">:col1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"med\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">:col2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"b1\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">df2_new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">:col1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"med\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">:col2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"b2\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290416956,
        "sender_full_name": "Dale Black",
        "timestamp": 1658429066
    },
    {
        "content": "<p><code>subset(d, :col1 =&gt; ByRow(==(\"med\")))</code></p>",
        "id": 290423563,
        "sender_full_name": "jar",
        "timestamp": 1658432063
    },
    {
        "content": "<p>or do you mean <code>innerjoin(l,r; on=:col1)</code></p>",
        "id": 290423635,
        "sender_full_name": "jar",
        "timestamp": 1658432106
    },
    {
        "content": "<p>I am looking for a more generic approach. One that will work if <code>\"low\"</code> and <code>\"med\"</code> are matching, for example. <code>innerjoin</code> might do that, but this gives me an error</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">innerjoin</span><span class=\"p\">(</span><span class=\"n\">df1_test</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">df2_test</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"ss\">:col1</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"kt\">ArgumentError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Duplicate</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ss\">:col2</span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">Pass</span><span class=\"w\"> </span><span class=\"n\">makeunique</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"n\">them</span><span class=\"w\"> </span><span class=\"n\">unique</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">suffix</span><span class=\"w\"> </span><span class=\"n\">automatically</span><span class=\"o\">.</span><span class=\"w\"></span>\n\n<span class=\"sa\">var</span><span class=\"s\">\"#make_unique!#1\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">DataFrames</span><span class=\"o\">.</span><span class=\"n\">make_unique!</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">})</span><span class=\"nd\">@utils</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">83</span><span class=\"w\"></span>\n<span class=\"c\">#make_unique#2@utils.jl:105[inlined]</span><span class=\"w\"></span>\n<span class=\"c\">#Index#5@index.jl:27[inlined]</span><span class=\"w\"></span>\n<span class=\"sa\">var</span><span class=\"s\">\"#DataFrame#188\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">DataFrames</span><span class=\"o\">.</span><span class=\"kt\">DataFrame</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">AbstractVector</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">})</span><span class=\"nd\">@dataframe</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">339</span><span class=\"w\"></span>\n<span class=\"n\">compose_inner_table</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">DataFrames</span><span class=\"o\">.</span><span class=\"n\">DataFrameJoiner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">))</span><span class=\"nd\">@composer</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">135</span><span class=\"w\"></span>\n<span class=\"sa\">var</span><span class=\"s\">\"#_join#572\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">DataFrames</span><span class=\"o\">.</span><span class=\"n\">_join</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">DataFrames</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">DataFrames</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">)</span><span class=\"nd\">@composer</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">400</span><span class=\"w\"></span>\n<span class=\"c\">#innerjoin#573@composer.jl:576[inlined]</span><span class=\"w\"></span>\n<span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"nd\">@Local</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290424079,
        "sender_full_name": "Dale Black",
        "timestamp": 1658432373
    },
    {
        "content": "<p>You can do something like: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">df1_test</span><span class=\"o\">.</span><span class=\"n\">col1</span><span class=\"w\"> </span><span class=\"o\">∩</span><span class=\"w\"> </span><span class=\"n\">df2_test</span><span class=\"o\">.</span><span class=\"n\">col1</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">}</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"s\">\"med\"</span><span class=\"w\"></span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">df1_new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"n\">df1_test</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:col1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ByRow</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">matching</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"o\">×</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Row</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">col1</span><span class=\"w\">    </span><span class=\"n\">col2</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"w\">  </span><span class=\"kt\">String</span><span class=\"w\"></span>\n<span class=\"n\">─────┼────────────────</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">med</span><span class=\"w\">     </span><span class=\"n\">b1</span><span class=\"w\"></span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">df2_new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"n\">df2_test</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:col1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ByRow</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">matching</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"o\">×</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">DataFrame</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Row</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">col1</span><span class=\"w\">    </span><span class=\"n\">col2</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"w\">  </span><span class=\"kt\">String</span><span class=\"w\"></span>\n<span class=\"n\">─────┼────────────────</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">│</span><span class=\"w\"> </span><span class=\"n\">med</span><span class=\"w\">     </span><span class=\"n\">b2</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290424643,
        "sender_full_name": "Sundar R",
        "timestamp": 1658432670
    },
    {
        "content": "<p>You can pass <code>makeunique=true</code> like it says</p>",
        "id": 290425073,
        "sender_full_name": "jar",
        "timestamp": 1658432896
    },
    {
        "content": "<p>Thank you! Both of those solutions work!</p>",
        "id": 290425193,
        "sender_full_name": "Dale Black",
        "timestamp": 1658432974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352971\">Dale Black</span> has marked this topic as resolved.</p>",
        "id": 290425553,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658433172
    }
]