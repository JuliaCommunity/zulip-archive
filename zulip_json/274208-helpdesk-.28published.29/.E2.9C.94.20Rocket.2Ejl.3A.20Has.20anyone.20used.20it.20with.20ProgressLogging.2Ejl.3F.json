[
    {
        "content": "<p>Let's start with something simple.</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Rocket</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">ints</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterable</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">IterableObservable(Int64, UnitRange{Int64}, AsapScheduler)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">subscribe!</span><span class=\"p\">(</span><span class=\"n\">ints</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">logger</span><span class=\"p\">(</span><span class=\"s\">\"n\"</span><span class=\"p\">))</span>\n<span class=\"go\">[n] Data: 1</span>\n<span class=\"go\">[n] Data: 2</span>\n<span class=\"go\">[n] Data: 3</span>\n<span class=\"go\">[n] Data: 4</span>\n<span class=\"go\">[n] Data: 5</span>\n<span class=\"go\">[n] Data: 6</span>\n<span class=\"go\">[n] Data: 7</span>\n<span class=\"go\">[n] Data: 8</span>\n<span class=\"go\">[n] Data: 9</span>\n<span class=\"go\">[n] Data: 10</span>\n<span class=\"go\">[n] Completed</span>\n<span class=\"go\">VoidTeardown()</span>\n</code></pre></div>\n<h2><a href=\"https://juliahub.com/ui/Packages/General/ProgressLogging\">ProgressLogging.jl</a></h2>\n<p>How could I hook the animated progress bar from <a href=\"https://juliahub.com/ui/Packages/General/ProgressLogging\">ProgressLogging.jl</a> into this iteration?  (The <code>logger(n)</code> is just there for demo purposes.  Feel free to get rid of it if you want.)</p>",
        "id": 489877187,
        "sender_full_name": "G Gundam",
        "timestamp": 1734576734
    },
    {
        "content": "<p>PS:  I think you have to setup <a href=\"https://juliahub.com/ui/Packages/General/TerminalLoggers\">TerminalLoggers.jl</a> to get nice animations in the REPL.  Do something like this first.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">TerminalLoggers</span>\n<span class=\"n\">global_logger</span><span class=\"p\">(</span><span class=\"n\">TerminalLogger</span><span class=\"p\">(</span><span class=\"n\">right_justify</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">ProgressLogging</span>\n</code></pre></div>",
        "id": 489877387,
        "sender_full_name": "G Gundam",
        "timestamp": 1734576901
    },
    {
        "content": "<h2>Blocking <code>take!</code> was the key.</h2>\n<ul>\n<li>I needed a way to start <code>ProgressLogging.progress()</code> and not leave until <a href=\"https://juliahub.com/ui/Packages/General/Rocket\">Rocket.jl</a> was done iterating.</li>\n<li>To solve this, I introduced a 1 item <code>Channel</code> and I did a <code>take!(ch)</code> on it which blocks the main thread until it can take something.</li>\n<li><a href=\"https://juliahub.com/ui/Packages/General/Rocket\">Rocket.jl</a> keeps moving though.</li>\n<li>It doesn't exit the progress logging until <code>on_complete</code> puts something in the channel.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">start_iteration</span><span class=\"p\">(</span><span class=\"n\">observable</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c\"># Let a LambdaActor subscribe to candle_subject for progress logging.</span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">observable</span><span class=\"o\">.</span><span class=\"n\">iterator</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Channel</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">ProgressLogging</span><span class=\"o\">.</span><span class=\"n\">progress</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">id</span>\n<span class=\"w\">        </span><span class=\"c\"># setup progress</span>\n<span class=\"w\">        </span><span class=\"n\">on_next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"i:</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"s\"> len:</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"s\"> ratio=</span><span class=\"si\">$</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nd\">@info</span><span class=\"w\"> </span><span class=\"s\">\"running\"</span><span class=\"w\"> </span><span class=\"n\">_id</span><span class=\"o\">=</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"n\">progress</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">end</span>\n<span class=\"w\">        </span><span class=\"n\">on_complete</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">put!</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">subscribe!</span><span class=\"p\">(</span><span class=\"n\">observable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lambda</span><span class=\"p\">(;</span><span class=\"n\">on_next</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">on_complete</span><span class=\"p\">))</span>\n\n<span class=\"w\">        </span><span class=\"c\"># block until our on_complete fires</span>\n<span class=\"w\">        </span><span class=\"n\">take!</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>It's used like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">start_iteration</span><span class=\"p\">(</span><span class=\"n\">ints</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 489881816,
        "sender_full_name": "G Gundam",
        "timestamp": 1734580374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599001\">G Gundam</span> has marked this topic as resolved.</p>",
        "id": 489882020,
        "sender_full_name": "Notification Bot",
        "timestamp": 1734580553
    }
]