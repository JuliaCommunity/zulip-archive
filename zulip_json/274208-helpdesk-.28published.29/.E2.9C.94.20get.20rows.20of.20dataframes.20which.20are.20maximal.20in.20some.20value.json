[
    {
        "content": "<p>Suppose I have this dataframe:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:baz</span><span class=\"p\">,</span> <span class=\"ss\">:baz</span><span class=\"p\">],</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"mi\">8</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">x</span>      <span class=\"n\">y</span>       <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Symbol</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.467047</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.63518</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.310892</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">bar</span>     <span class=\"mf\">0.696665</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">bar</span>     <span class=\"mf\">0.206687</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">bar</span>     <span class=\"mf\">0.998533</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">baz</span>     <span class=\"mf\">0.642528</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">baz</span>     <span class=\"mf\">0.721937</span>\n</code></pre></div>\n<p>What I want is to reduce this to just have the entries with maxmimal <code>x</code> for each <code>y</code>. E.g. I want the output to be</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code> <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">x</span>      <span class=\"n\">y</span>       <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Symbol</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.310892</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">bar</span>     <span class=\"mf\">0.998533</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">baz</span>     <span class=\"mf\">0.721937</span>\n</code></pre></div>\n<p>I feel like this should be a rather basic operation, but I can't figure out the right way to do it.</p>",
        "id": 269147228,
        "sender_full_name": "Mason Protter",
        "timestamp": 1643048405
    },
    {
        "content": "<p>The closest I can figure out would be </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"ss\">:x</span><span class=\"p\">)[</span><span class=\"k\">end</span><span class=\"p\">]</span>\n<span class=\"mi\">2</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">SubDataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">x</span>      <span class=\"n\">y</span>       <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Symbol</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.310892</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">bar</span>     <span class=\"mf\">0.998533</span>\n</code></pre></div>\n<p>but because there is no entry for <code>:baz</code> with <code>x=3</code>, it doesn't get included, so that's not quite there.</p>",
        "id": 269147333,
        "sender_full_name": "Mason Protter",
        "timestamp": 1643048454
    },
    {
        "content": "<p>I like SQL approach (so called window functions, which in DataFrames are just <code>groupby</code> with <code>combine</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"ss\">:y</span><span class=\"p\">),</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 269148177,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1643048810
    },
    {
        "content": "<p>For it to work properly, you need to sort over <code>:x</code> at the beginning, of course.</p>",
        "id": 269148404,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1643048889
    },
    {
        "content": "<p>Very nice, thank you. I had been having some trouble getting my head around <code>combine</code></p>",
        "id": 269149233,
        "sender_full_name": "Mason Protter",
        "timestamp": 1643049246
    },
    {
        "content": "<p>I have very simple mental image: <code>groupby</code> splits dataframe into a vector of dataframes and <code>combine</code> applies function <code>f</code> to each dataframe in this vector and combines them together.</p>\n<p>You can think of combine as <code>combine(gdf, f) = vcat(map(f, gdf))</code> I do not think that it is made this way, but it's easier to understand.</p>",
        "id": 269150026,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1643049591
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 269151338,
        "sender_full_name": "Mason Protter",
        "timestamp": 1643050040
    },
    {
        "content": "<p>Note that you can index the <code>SubDataFrame</code>s in your <code>GroupedDataFrame</code> just like normal <code>DataFrame</code>s, so a more general solution which doesn't require sorting is:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"ss\">:y</span><span class=\"p\">),</span> <span class=\"n\">sdf</span> <span class=\"o\">-&gt;</span> <span class=\"n\">sdf</span><span class=\"p\">[</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"o\">:</span><span class=\"p\">])</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">y</span>       <span class=\"n\">x</span>      <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Symbol</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">foo</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.215512</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">bar</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.896303</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">baz</span>         <span class=\"mi\">2</span>  <span class=\"mf\">0.97978</span>\n</code></pre></div>",
        "id": 269238883,
        "sender_full_name": "Nils",
        "timestamp": 1643107651
    },
    {
        "content": "<p>(this will of course return more than one row for <code>y</code> groups in which the maximum value of <code>x</code> occurs multiple times)</p>",
        "id": 269238990,
        "sender_full_name": "Nils",
        "timestamp": 1643107691
    },
    {
        "content": "<p>Nice, I like that. Thanks Nils and Andrey!</p>",
        "id": 269345310,
        "sender_full_name": "Mason Protter",
        "timestamp": 1643155967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269150\">Mason Protter</span> has marked this topic as resolved.</p>",
        "id": 269345314,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643155971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269318\">Nils</span> <a href=\"#narrow/stream/274208-helpdesk-.28published.29/topic/.E2.9C.94.20get.20rows.20of.20dataframes.20which.20are.20maximal.20in.20some.20value/near/269238990\">said</a>:</p>\n<blockquote>\n<p>(this will of course return more than one row for <code>y</code> groups in which the maximum value of <code>x</code> occurs multiple times)</p>\n</blockquote>\n<p>That's not true, right? Since <code>argmax</code> always returns a single index. E.g. modifying the example a bit to be degenerate,</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:baz</span><span class=\"p\">,</span> <span class=\"ss\">:baz</span><span class=\"p\">],</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"mi\">8</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">x</span>      <span class=\"n\">y</span>       <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Symbol</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">foo</span>         <span class=\"mf\">1.0</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">foo</span>         <span class=\"mf\">1.0</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">foo</span>         <span class=\"mf\">1.0</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">bar</span>         <span class=\"mf\">1.0</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">bar</span>         <span class=\"mf\">1.0</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">bar</span>         <span class=\"mf\">1.0</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">baz</span>         <span class=\"mf\">1.0</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">baz</span>         <span class=\"mf\">1.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"ss\">:y</span><span class=\"p\">),</span> <span class=\"n\">sdf</span> <span class=\"o\">-&gt;</span> <span class=\"n\">sdf</span><span class=\"p\">[</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"o\">:</span><span class=\"p\">])</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">y</span>       <span class=\"n\">x</span>      <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Symbol</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">foo</span>         <span class=\"mi\">3</span>      <span class=\"mf\">1.0</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">bar</span>         <span class=\"mi\">3</span>      <span class=\"mf\">1.0</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">baz</span>         <span class=\"mi\">2</span>      <span class=\"mf\">1.0</span>\n</code></pre></div>",
        "id": 269662729,
        "sender_full_name": "Eric Hanson",
        "timestamp": 1643329254
    },
    {
        "content": "<p>I think you're correct Eric, but I don't think your example demonstrates it</p>",
        "id": 269665196,
        "sender_full_name": "Mason Protter",
        "timestamp": 1643330808
    },
    {
        "content": "<p>For a given <code>y</code> group, there's no repeat <code>x</code> values in your example</p>",
        "id": 269665218,
        "sender_full_name": "Mason Protter",
        "timestamp": 1643330832
    },
    {
        "content": "<p>Rather I think the demonstration would be</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:foo</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:bar</span><span class=\"p\">,</span> <span class=\"ss\">:baz</span><span class=\"p\">,</span> <span class=\"ss\">:baz</span><span class=\"p\">],</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n<span class=\"mi\">9</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">x</span>      <span class=\"n\">y</span>       <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Int64</span>  <span class=\"kt\">Symbol</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼──────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.288488</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.722006</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.654092</span>\n   <span class=\"mi\">4</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">foo</span>     <span class=\"mf\">0.262445</span>\n   <span class=\"mi\">5</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">bar</span>     <span class=\"mf\">0.932314</span>\n   <span class=\"mi\">6</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">bar</span>     <span class=\"mf\">0.0627638</span>\n   <span class=\"mi\">7</span> <span class=\"n\">│</span>     <span class=\"mi\">3</span>  <span class=\"n\">bar</span>     <span class=\"mf\">0.856708</span>\n   <span class=\"mi\">8</span> <span class=\"n\">│</span>     <span class=\"mi\">1</span>  <span class=\"n\">baz</span>     <span class=\"mf\">0.45854</span>\n   <span class=\"mi\">9</span> <span class=\"n\">│</span>     <span class=\"mi\">2</span>  <span class=\"n\">baz</span>     <span class=\"mf\">0.233986</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"ss\">:y</span><span class=\"p\">),</span> <span class=\"n\">sdf</span> <span class=\"o\">-&gt;</span> <span class=\"n\">sdf</span><span class=\"p\">[</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"o\">:</span><span class=\"p\">])</span>\n<span class=\"mi\">3</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"n\">DataFrame</span>\n <span class=\"n\">Row</span> <span class=\"n\">│</span> <span class=\"n\">y</span>       <span class=\"n\">x</span>      <span class=\"n\">z</span>\n     <span class=\"n\">│</span> <span class=\"kt\">Symbol</span>  <span class=\"kt\">Int64</span>  <span class=\"kt\">Float64</span>\n<span class=\"n\">─────┼─────────────────────────</span>\n   <span class=\"mi\">1</span> <span class=\"n\">│</span> <span class=\"n\">foo</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.654092</span>\n   <span class=\"mi\">2</span> <span class=\"n\">│</span> <span class=\"n\">bar</span>         <span class=\"mi\">3</span>  <span class=\"mf\">0.856708</span>\n   <span class=\"mi\">3</span> <span class=\"n\">│</span> <span class=\"n\">baz</span>         <span class=\"mi\">2</span>  <span class=\"mf\">0.233986</span>\n</code></pre></div>",
        "id": 269665387,
        "sender_full_name": "Mason Protter",
        "timestamp": 1643330925
    },
    {
        "content": "<p>Ah oops, thought we were maximizing <code>z</code>, not <code>x</code></p>",
        "id": 269666029,
        "sender_full_name": "Eric Hanson",
        "timestamp": 1643331364
    },
    {
        "content": "<p>Ah yes of course, it would have been <code>combine(groupby(df, :y), sdf -&gt; sdf[sdf.x .== argmax(sdf.x), :])</code> to return multiple maxima. Migh actually be the better way to write this to guard against duplicates silently vanishing</p>",
        "id": 269728532,
        "sender_full_name": "Nils",
        "timestamp": 1643373292
    }
]