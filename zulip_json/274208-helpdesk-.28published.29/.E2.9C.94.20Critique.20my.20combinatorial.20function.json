[
    {
        "content": "<p>I wrote this function to give me all selections, with replacement, of size t, from a collection a.<br>\nIs there a more compact idiomatic way of writing this? I'd like it to be simple enough to be 'obviously correct'.<br>\nIt seems to be working, but it makes me unhappy when I look at it. The collect/flattening is a horrible hack. I think I fell between collections and iterators.<br>\nCorrect functions? Composition? Pipes?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">Combinatorics</span>\n<span class=\"k\">using</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">:</span> <span class=\"n\">flatten</span>\n<span class=\"k\">function</span> <span class=\"n\">permutationsWithOrder</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">with_replacement_combinations</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">permutations</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">collect</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))(</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"kt\">Set</span><span class=\"p\">(</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">c3</span><span class=\"p\">)))</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">permutationsWithOrder</span><span class=\"p\">([</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"nb\">false</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">8</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">permutationsWithOrder</span><span class=\"p\">([</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"nb\">false</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 262961856,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1638153628
    },
    {
        "content": "<p>take 99</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">Combinatorics</span>\n<span class=\"k\">using</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">:</span> <span class=\"n\">flatten</span>\n<span class=\"k\">using</span> <span class=\"kt\">Pipe</span><span class=\"o\">:</span> <span class=\"nd\">@pipe</span>\n\n<span class=\"k\">function</span> <span class=\"n\">permutationsWithOrder</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"nd\">@pipe</span> <span class=\"n\">with_replacement_combinations</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span>\n          <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">permutations</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span>\n          <span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span>\n          <span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span>\n          <span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span>\n          <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"c\"># :-(</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"n\">permutationsWithOrder</span><span class=\"p\">([</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"nb\">false</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">8-element Vector{Vector{Bool}}:</span>\n<span class=\"go\"> [1, 1, 1]</span>\n<span class=\"go\"> [1, 1, 0]</span>\n<span class=\"go\"> [1, 0, 1]</span>\n<span class=\"go\"> [0, 1, 1]</span>\n<span class=\"go\"> [1, 0, 0]</span>\n<span class=\"go\"> [0, 1, 0]</span>\n<span class=\"go\"> [0, 0, 1]</span>\n<span class=\"go\"> [0, 0, 0]</span>\n\n<span class=\"gp\">julia&gt;</span> <span class=\"n\">permutationsWithOrder</span><span class=\"p\">([</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"nb\">false</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">2-element Vector{Vector{Bool}}:</span>\n<span class=\"go\"> [1]</span>\n<span class=\"go\"> [0]</span>\n</code></pre></div>",
        "id": 262964151,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1638157339
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nThe llvm is huge - so I assume must be moving across module boundaries inefficiently.</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"nd\">@code_lowered</span> <span class=\"n\">permutationsWithOrder</span><span class=\"p\">([</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"nb\">false</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">CodeInfo(</span>\n<span class=\"go\">1 ─ %1 = Main.with_replacement_combinations(a, t)</span>\n<span class=\"go\">│   %2 = Main.map(Main.permutations, %1)</span>\n<span class=\"go\">│   %3 = Main.unique(%2)</span>\n<span class=\"go\">│   %4 = Main.flatten(%3)</span>\n<span class=\"go\">│   %5 = Main.unique(%4)</span>\n<span class=\"go\">│   %6 = Main.collect(%5)</span>\n<span class=\"go\">└──      return %6</span>\n</code></pre></div>",
        "id": 262964465,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1638157826
    },
    {
        "content": "<p>in <a href=\"https://discourse.julialang.org/t/how-to-generate-the-permutation-of-a-vector-with-elements-selected-from-a-certain-set/36032/2\">How to generate the permutation of a vector with elements selected</a> @<strong>Tamas_Papp</strong>  suggests:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">all_perm</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"p\">,</span> <span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">ntuple</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>I tried putting calls together by increments:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">let</span>\n    <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">]</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n    <span class=\"nd\">@pipe</span> <span class=\"n\">ntuple</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>My interpretation:</p>\n<ol>\n<li>copies = ntuple() is making n copies of xs</li>\n<li>p = Iterators.product() is creating the products of the copies</li>\n<li>d = map.collect is turning p into an iterable of Arrays</li>\n<li>vec turns d into a column vector</li>\n</ol>\n<p>I'm happy with that. also several orders of magnitude faster</p>",
        "id": 262972528,
        "sender_full_name": "Peter Goodall",
        "timestamp": 1638169117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"427737\">Peter Goodall</span> has marked this topic as resolved.</p>",
        "id": 262973329,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638170104
    }
]