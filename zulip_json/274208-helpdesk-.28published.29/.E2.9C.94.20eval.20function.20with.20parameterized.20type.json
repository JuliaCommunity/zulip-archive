[
    {
        "content": "<p>I'm trying to create a convenience copy-paster with eval to not have to type out many function definitions at once but I get  into problems with parametric types where I want to omit the parametric type in the signature. Probably easier to understand from the MWE below :) </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">TestMod</span>\n<span class=\"w\">       </span><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ff</span>\n<span class=\"w\">       </span><span class=\"k\">struct</span> <span class=\"kt\">A</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"w\">       </span><span class=\"k\">struct</span> <span class=\"kt\">B</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">str</span><span class=\"o\">::</span><span class=\"kt\">String</span>\n<span class=\"w\">           </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">A</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"w\">       </span><span class=\"c\"># This is legal</span>\n<span class=\"w\">       </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">a</span>\n\n<span class=\"w\">       </span><span class=\"c\"># But doing the same thing with eval is not??</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">fieldnames</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">ft</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">eachsplit</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">fieldtype</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"sc\">'{'</span><span class=\"p\">)))</span>\n<span class=\"w\">           </span><span class=\"nd\">@info</span><span class=\"w\"> </span><span class=\"s\">\"Try to create function with </span><span class=\"si\">$ft</span><span class=\"s\">\"</span>\n<span class=\"w\">           </span><span class=\"nd\">@eval</span><span class=\"w\"> </span><span class=\"n\">TestMod</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"o\">$</span><span class=\"kt\">ft</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.$</span><span class=\"n\">fn</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">WARNING</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">replacing</span><span class=\"w\"> </span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">TestMod</span><span class=\"o\">.</span>\n<span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">Info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"kt\">String</span>\n<span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">Info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">TestMod</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">UndefVarError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"sb\">`Main.TestMod.A`</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">defined</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Is there a way to get the above to work?</p>",
        "id": 328807813,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1676813258
    },
    {
        "content": "<p>Figured it out. The module qualifier was what made it not work somehow. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">TestMod</span>\n<span class=\"w\">       </span><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ff</span>\n<span class=\"w\">       </span><span class=\"k\">struct</span> <span class=\"kt\">A</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"w\">       </span><span class=\"k\">struct</span> <span class=\"kt\">B</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">str</span><span class=\"o\">::</span><span class=\"kt\">String</span>\n<span class=\"w\">           </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">A</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n\n<span class=\"w\">       </span><span class=\"c\"># This is legal</span>\n<span class=\"w\">       </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">A</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">a</span>\n\n<span class=\"w\">       </span><span class=\"c\"># But doing the same thing with eval is not??</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">fieldnames</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">ftt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">eachsplit</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">fieldtype</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"sc\">'{'</span><span class=\"p\">))</span>\n<span class=\"w\">           </span><span class=\"n\">ft</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">ftt</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"sc\">'.'</span><span class=\"p\">)))</span>\n<span class=\"w\">           </span><span class=\"nd\">@info</span><span class=\"w\"> </span><span class=\"s\">\"Try to create function with </span><span class=\"si\">$ft</span><span class=\"s\">\"</span>\n<span class=\"w\">           </span><span class=\"nd\">@eval</span><span class=\"w\"> </span><span class=\"n\">TestMod</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"o\">&lt;:$</span><span class=\"kt\">ft</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">.$</span><span class=\"n\">fn</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">Info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"kt\">String</span>\n<span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">Info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"n\">Main</span><span class=\"o\">.</span><span class=\"n\">TestMod</span>\n</code></pre></div>",
        "id": 328809183,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1676813906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300483\">DrChainsaw</span> has marked this topic as resolved.</p>",
        "id": 328809217,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676813927
    }
]