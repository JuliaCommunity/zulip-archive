[
    {
        "content": "<p>I have a function that's intended to take a <code>Array{UInt32}</code> and shuffle the bytes of each element from AAA...BBB...CCC...DDD... to  ABCDABCDABCD...:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">deshuffle</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">byte_stride</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">÷</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nd\">@inbounds</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">byte_stride</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">out_i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">out_i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">out_i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">byte_stride</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">out_i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">byte_stride</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">out_i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">byte_stride</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My problem is that if I pass in a reinterpreted/reshaped array as <code>out</code> instead of a plain <code>Array</code>, the performance drops:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">UInt8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">512</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">out2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">UInt32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"n\">deshuffle</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">out</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"go\">BenchmarkTools.Trial: 10000 samples with 1 evaluation.</span>\n<span class=\"go\"> Range (min … max):  20.130 μs …  51.287 μs  ┊ GC (min … max): 0.00% … 0.00%</span>\n<span class=\"go\"> Time  (median):     20.459 μs               ┊ GC (median):    0.00%</span>\n<span class=\"go\"> Time  (mean ± σ):   20.552 μs ± 704.751 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%</span>\n\n<span class=\"go\">     ▄█</span>\n<span class=\"go\">  ▂▂▃██▅▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▂</span>\n<span class=\"go\">  20.1 μs         Histogram: frequency by time         24.8 μs &lt;</span>\n\n<span class=\"go\"> Memory estimate: 0 bytes, allocs estimate: 0.</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"n\">deshuffle</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">UInt8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">out2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"go\">BenchmarkTools.Trial: 10000 samples with 1 evaluation.</span>\n<span class=\"go\"> Range (min … max):  30.474 μs … 59.981 μs  ┊ GC (min … max): 0.00% … 0.00%</span>\n<span class=\"go\"> Time  (median):     30.798 μs              ┊ GC (median):    0.00%</span>\n<span class=\"go\"> Time  (mean ± σ):   31.096 μs ±  1.953 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%</span>\n\n<span class=\"go\">  ▃▇██▆▃▁                                                     ▂</span>\n<span class=\"go\">  ███████▇▃▄▁▃▁▁▃▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▃▄▁▁▁▁▁▄▁▃▄▅▄▇▆▆▇▇▇▆▇█▇▇▇▇▇▆▆ █</span>\n<span class=\"go\">  30.5 μs      Histogram: log(frequency) by time      37.2 μs &lt;</span>\n\n<span class=\"go\"> Memory estimate: 112 bytes, allocs estimate: 3.</span>\n</code></pre></div>\n<p>It still vectorizes but not quite as effectively, and I don't know how to tell the compiler that these two array types are functionally the same. <code>@code_llvm</code> shows that the vectorization is quite a bit more complicated. One workaround is to unwrap the the reinterpreted array:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">out2_flat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reinterpret</span><span class=\"p\">(</span><span class=\"kt\">UInt8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"n\">out2</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@benchmark</span><span class=\"w\"> </span><span class=\"n\">deshuffle</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unsafe_wrap</span><span class=\"p\">(</span><span class=\"kt\">Array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">out2_flat</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">out2_flat</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"go\">BenchmarkTools.Trial: 10000 samples with 1 evaluation.</span>\n<span class=\"go\"> Range (min … max):  20.101 μs …  51.699 μs  ┊ GC (min … max): 0.00% … 0.00%</span>\n<span class=\"go\"> Time  (median):     20.541 μs               ┊ GC (median):    0.00%</span>\n<span class=\"go\"> Time  (mean ± σ):   20.636 μs ± 702.697 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%</span>\n\n<span class=\"go\">     ▂▆█▆▂                                                     ▁</span>\n<span class=\"go\">  ▇█▇█████▇▆▅▄▃▁▁▁▁▁▁▁▃▁▁▃▃▃▃▁▁▄▃▁▃▁▁▁▁▃▃▃▁▁▁▃▄▃▄▅▆▆▆▆▆▅▆▅▆▆▅▅ █</span>\n<span class=\"go\">  20.1 μs       Histogram: log(frequency) by time      24.9 μs &lt;</span>\n\n<span class=\"go\"> Memory estimate: 64 bytes, allocs estimate: 2.</span>\n</code></pre></div>\n<p>But that's quite an ugly hack... anyone have ideas on how to make the performance match that of <code>Array</code>?</p>",
        "id": 299469642,
        "sender_full_name": "James Wrigley",
        "timestamp": 1663529715
    },
    {
        "content": "<p>This is on 1.8.1 BTW:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">versioninfo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"go\">Julia Version 1.8.1</span>\n<span class=\"go\">Commit afb6c60d69a (2022-09-06 15:09 UTC)</span>\n<span class=\"go\">Platform Info:</span>\n<span class=\"go\">  OS: Linux (x86_64-linux-gnu)</span>\n<span class=\"go\">  CPU: 40 × Intel(R) Xeon(R) CPU E5-2640 v4 @ 2.40GHz</span>\n<span class=\"go\">  WORD_SIZE: 64</span>\n<span class=\"go\">  LIBM: libopenlibm</span>\n<span class=\"go\">  LLVM: libLLVM-13.0.1 (ORCJIT, broadwell)</span>\n<span class=\"go\">  Threads: 1 on 40 virtual cores</span>\n</code></pre></div>",
        "id": 299469871,
        "sender_full_name": "James Wrigley",
        "timestamp": 1663529894
    },
    {
        "content": "<p>This is likely due to the implicit arithmetic done on the view of the reinterpreted array. Every element access has the same type of strided offset computed on the fly for a view.</p>",
        "id": 299475991,
        "sender_full_name": "Michael Fiano",
        "timestamp": 1663535427
    },
    {
        "content": "<p>Hmmm, that's unfortunate...</p>",
        "id": 299486571,
        "sender_full_name": "James Wrigley",
        "timestamp": 1663547558
    },
    {
        "content": "<p>Relevant post: <a href=\"https://discourse.julialang.org/t/reinterpretedarray-performance-even-worse-on-1-8/80102/26\">https://discourse.julialang.org/t/reinterpretedarray-performance-even-worse-on-1-8/80102/26</a><br>\nLinked PR: <a href=\"https://github.com/JuliaLang/julia/pull/44186\">https://github.com/JuliaLang/julia/pull/44186</a></p>",
        "id": 299487965,
        "sender_full_name": "James Wrigley",
        "timestamp": 1663549287
    }
]