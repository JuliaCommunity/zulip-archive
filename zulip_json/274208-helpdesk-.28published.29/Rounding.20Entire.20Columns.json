[
    {
        "content": "<p>Hello: </p>\n<p>I have a two columns in a dataframe whose values I would <br>\nlike to round. I am using;</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">FINAL</span><span class=\"p\">,</span> <span class=\"n\">round</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">FINAL</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"n\">digits</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I COULD split the dataframe and then use the hcat function<br>\nbut I was wondering if there is a one-line approach? </p>\n<p>Thank you,</p>",
        "id": 228750622,
        "sender_full_name": "QuBit",
        "timestamp": 1614854861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390081\">qu bit</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Rounding.20Entire.20Columns/near/228750622\">said</a>:</p>\n<blockquote>\n<p>Hello: </p>\n<p>I have a two columns in a dataframe whose values I would <br>\nlike to round. I am using;</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">FINAL</span><span class=\"p\">,</span> <span class=\"n\">round</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">FINAL</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"n\">digits</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I COULD split the dataframe and then use the hcat function<br>\nbut I was wondering if there is a one-line approach? </p>\n<p>Thank you,</p>\n</blockquote>\n<p>Update, </p>\n<p>I am experimenting with using <a href=\"https://github.com/search?q=Query.jl&amp;type=Repositories\">Query.jl</a><br>\nwhere: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"n\">FINAL</span> <span class=\"o\">=</span> <span class=\"nd\">@from</span> <span class=\"n\">i</span> <span class=\"kp\">in</span> <span class=\"n\">DF</span> <span class=\"k\">begin</span>\n                 <span class=\"nd\">@select</span> <span class=\"n\">i</span>\n                 <span class=\"nd\">@orderby</span> <span class=\"n\">descending</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                 <span class=\"nd\">@collect</span> <span class=\"n\">DataFrame</span>\n                 <span class=\"k\">end</span>\n<span class=\"n\">FINAL</span> <span class=\"o\">=</span> <span class=\"nd\">@from</span> <span class=\"n\">i</span> <span class=\"kp\">in</span> <span class=\"n\">DF</span> <span class=\"k\">begin</span>\n                 <span class=\"nd\">@select</span> <span class=\"n\">round</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"n\">digits</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                 <span class=\"nd\">@collect</span> <span class=\"n\">DataFrame</span>\n                 <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Any suggestions about this?</p>",
        "id": 228760232,
        "sender_full_name": "QuBit",
        "timestamp": 1614859551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390081\">qu bit</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Rounding.20Entire.20Columns/near/228760232\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"390081\">qu bit</span> <a href=\"#narrow/stream/274208-helpdesk-(published)/topic/Rounding.20Entire.20Columns/near/228750622\">said</a>:</p>\n<blockquote>\n<p>Hello: </p>\n<p>I have a two columns in a dataframe whose values I would <br>\nlike to round. I am using;</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">FINAL</span><span class=\"p\">,</span> <span class=\"n\">round</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">FINAL</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"n\">digits</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I COULD split the dataframe and then use the hcat function<br>\nbut I was wondering if there is a one-line approach? </p>\n<p>Thank you,</p>\n</blockquote>\n<p>Update, </p>\n<p>I am experimenting with using <a href=\"https://github.com/search?q=Query.jl&amp;type=Repositories\">Query.jl</a><br>\nwhere: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"n\">FINAL</span> <span class=\"o\">=</span> <span class=\"nd\">@from</span> <span class=\"n\">i</span> <span class=\"kp\">in</span> <span class=\"n\">DF</span> <span class=\"k\">begin</span>\n                 <span class=\"nd\">@select</span> <span class=\"n\">i</span>\n                 <span class=\"nd\">@orderby</span> <span class=\"n\">descending</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                 <span class=\"nd\">@collect</span> <span class=\"n\">DataFrame</span>\n                 <span class=\"k\">end</span>\n<span class=\"n\">FINAL</span> <span class=\"o\">=</span> <span class=\"nd\">@from</span> <span class=\"n\">i</span> <span class=\"kp\">in</span> <span class=\"n\">DF</span> <span class=\"k\">begin</span>\n                 <span class=\"nd\">@select</span> <span class=\"n\">round</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"n\">digits</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                 <span class=\"nd\">@collect</span> <span class=\"n\">DataFrame</span>\n                 <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Any suggestions about this?</p>\n</blockquote>\n<p>A simple  way to approach this is to use:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">SinkDF</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">round</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">SourceSF</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>After the first argument you can apply <br>\ndifferent arithmetic operators to save <br>\na column calculation step.</p>",
        "id": 228932795,
        "sender_full_name": "QuBit",
        "timestamp": 1614941124
    }
]