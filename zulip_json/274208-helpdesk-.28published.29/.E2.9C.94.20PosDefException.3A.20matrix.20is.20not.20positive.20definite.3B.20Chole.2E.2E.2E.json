[
    {
        "content": "<p>Hello Julians: </p>\n<p>Full Title: PosDefException - matrix is not positive definite; Cholesky factorization failed</p>\n<p>Session: <a href=\"https://github.com/search?q=Pluto.jl&amp;type=Repositories\">Pluto.jl</a><br>\nJulia Version: 1.6.3<br>\nBrowser: Firefox</p>\n<p>I am encountering the issue above when <br>\nI am building a logistic regression model <br>\nusing the GLM package. </p>\n<p>I was able to catch a reply from @tim.holy <br>\nthat covered some functions that could <br>\npotentially address this issue <a href=\"https://github.com/timholy/PositiveFactorizations.jl/blob/master/src/cholesky.jl\">HERE</a></p>\n<p>I am not sure what to consider when <br>\nattempting to apply the different <br>\n<a href=\"https://github.com/search?q=PositiveFactorizations.jl&amp;type=Repositories\">PositiveFactorizations.jl</a> functions. </p>\n<p>My DataFrame has the structure/content</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Teams</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Jazz\"</span><span class=\"p\">,</span> <span class=\"s\">\"Heat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hawks\"</span><span class=\"p\">]</span>\n<span class=\"n\">Rank</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"1st\"</span><span class=\"p\">,</span> <span class=\"s\">\"2nd\"</span><span class=\"p\">,</span> <span class=\"s\">\"3rd\"</span><span class=\"p\">]</span>\n<span class=\"n\">Outcome</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Win\"</span><span class=\"p\">,</span> <span class=\"s\">\"Loss\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">Season</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">Id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">Gate</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span>\n                                  <span class=\"n\">Top3</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">Teams</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span>\n                                   <span class=\"n\">Position</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">Rank</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span>\n                                   <span class=\"n\">Column</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">Outcome</span> <span class=\"o\">.==</span><span class=\"s\">\"Win\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I performed the _onehot function from:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"k\">function</span> <span class=\"n\">_onehot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span><span class=\"n\">symb</span><span class=\"p\">)</span>\n        <span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">df</span>\n        <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">copy</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"n\">symb</span><span class=\"p\">])</span>\n            <span class=\"n\">copy</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"n\">symb</span><span class=\"p\">]</span> <span class=\"o\">.==</span> <span class=\"n\">c</span>\n        <span class=\"k\">end</span>\n        <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">copy</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Then when I attempted perform the logistic regression build<br>\nvia: </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"nd\">@formula</span><span class=\"p\">(</span><span class=\"n\">Column</span><span class=\"o\">~</span> <span class=\"n\">Top3</span> <span class=\"o\">+</span> <span class=\"n\">Position</span> <span class=\"o\">+</span> <span class=\"n\">Gate</span> <span class=\"o\">+</span> <span class=\"n\">Jazz</span> <span class=\"o\">+</span> <span class=\"n\">Heat</span> <span class=\"o\">+</span> <span class=\"n\">Hawks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"n\">rd</span><span class=\"o\">+</span>\n                         <span class=\"n\">Win</span> <span class=\"o\">+</span> <span class=\"n\">Loss</span><span class=\"p\">)</span>\n<span class=\"n\">logit</span> <span class=\"o\">=</span> <span class=\"n\">glm</span><span class=\"p\">(</span><span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">Binomial</span><span class=\"p\">(),</span> <span class=\"n\">Probit</span><span class=\"p\">())</span>\n</code></pre></div>\n<p>I am returning the error in the subject line.  Is there a way to <br>\nmanipulate this data frame so that the encoded columns are <br>\nprocessed during the LogReg model build?</p>",
        "id": 247707663,
        "sender_full_name": "QuBit",
        "timestamp": 1627651761
    },
    {
        "content": "<p>###########Considerations############ </p>\n<ol>\n<li>\n<p>I am following a tutorial by Kabir, from machinelearningplus, <br>\ncreated October 2020, for Logistic Regressions with Julia.</p>\n</li>\n<li>\n<p>I understand that adding the encoded columns could <br>\nlead to multicollinearity (exploratory variable confounding)<br>\nissues BUT in the tutorial, the author was able to generate<br>\nan output. PERHAPS the design is not agreeable with you...</p>\n</li>\n<li>\n<p>I have attempted to run the GLM LogReg model WITHOUT<br>\nencoding but am having an index mapping issue where</p>\n</li>\n</ol>\n<p>I am returning:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">Intercept</span><span class=\"p\">)</span>\n<span class=\"n\">Top3</span><span class=\"o\">:</span> <span class=\"n\">Jazz</span>\n<span class=\"n\">Top3</span><span class=\"o\">:</span> <span class=\"n\">Heat</span>\n<span class=\"n\">Position</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"n\">nd</span>\n<span class=\"n\">Position</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"n\">rd</span>\n<span class=\"n\">Gate</span>\n</code></pre></div>\n<p>You will notice that 'Top3' is missing 'Hawks' (at index 3)<br>\nand that 'Position' is missing '1st' (at index 1). </p>\n<p>Am I missing something(s) here?</p>",
        "id": 247708308,
        "sender_full_name": "QuBit",
        "timestamp": 1627652063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390081\">QuBit</span></p>\n<p>Solution: <br>\nDo not fall for the <a href=\"http://home.cc.umanitoba.ca/~godwinrt/3040/overheads/lecture17.pdf\">'Dummy Variable Trap'</a></p>\n<p>Approaches (while build LogReg Model): </p>\n<ol>\n<li>Drop one of the groups (for one of your categorical attributes)</li>\n<li>Drop the intercept </li>\n</ol>\n<p>Tip: <br>\nQuestion online sources if they do not account<br>\nfor 'Multi-collinearity' during regression builds.</p>",
        "id": 247740357,
        "sender_full_name": "QuBit",
        "timestamp": 1627667261
    }
]