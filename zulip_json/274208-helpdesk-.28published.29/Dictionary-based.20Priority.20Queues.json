[
    {
        "content": "<p>Hi,</p>\n<p>I need a data structure for representing log-weighted observations. I was originally thinking of using a <a href=\"https://github.com/JuliaCollections/DataStructures.jl/blob/master/src/priorityqueue.jl\">PriorityQueue</a> from <a href=\"https://github.com/search?q=DataStructures.jl&amp;type=Repositories\">DataStructures.jl</a>. But this stores an array of pairs and mutates this as it goes, maintaining heap ordering at each insert. In high dimensions, this is a lot of copying, so it will get very slow.</p>\n<p>Also, this data structure stores each key twice: once in the array of pairs, and again in an <code>Index::Dict{K,Int}</code> field. For large collections, this seems like a waste of memory.</p>\n<p>Finally, lots of functions will depend only on the values (the log-weights), so iterating through them needs to be fast.</p>\n<p>I was thinking of adapting some ideas from <span class=\"user-mention\" data-user-id=\"300749\">@Andy Ferris</span> 's <a href=\"https://github.com/search?q=Dictionaries.jl&amp;type=Repositories\">Dictionaries.jl</a>:</p>\n<ul>\n<li>A modified <code>Indices</code> with<br>\n    - the <code>values</code> field changed to <code>&lt;:AbstractArray</code> (with a type parameter). This way indices could be stored in a <code>StructArray</code> or <code>TupleVector</code>, which give better efficiency for many operations.<br>\n    - fields for permutations, one for <code>lookup</code> and one for <code>find</code>. This would allow reordering without changing the original array.</li>\n<li>A <code>&lt;: AbstractDictionary</code> that's very similar to <code>Dictionary</code>, but maintains heap ordering similarly to <code>DataStructures.PriorityQueue</code></li>\n<li>A <code>logtotal</code> field, maybe using the <a href=\"https://github.com/joshday/OnlineStats.jl/blob/26fabda6483f176d454c28fd7b3d342ab9399d04/src/stats/stats.jl#L805\">new <code>LogSumExp</code> in OnlineStats</a></li>\n</ul>\n<p>I know the ordering on indices is internal, but this would use it in a similar way to what <code>Dictionary</code> does.</p>\n<p>What do you think? Or maybe there's an easier way to do this?</p>",
        "id": 243183696,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1624034191
    },
    {
        "content": "<p>I think I found a better way to do this:<br>\n<a href=\"https://github.com/cscherrer/PermutedArrays.jl\">https://github.com/cscherrer/PermutedArrays.jl</a></p>",
        "id": 243251233,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1624111128
    },
    {
        "content": "<p>I think the idea of making the internals of <code>Indices</code> more abstract/replaceable is OK. I backed out of it because there's no real trait for <code>resize!</code> on arrays, and I wanted to get at least something out that worked and was easy to use. Certainly something you could implement via some copy-paste of the <a href=\"https://github.com/search?q=Dictionaries.jl&amp;type=Repositories\">Dictionaries.jl</a> code. If someone figures out how to make it robust we can probably upstream it.</p>\n<p>Sort-ordered dictionaries are an area of interest for me (though I'm probably more thinking about fully-sorted dictionaries rather than heaps at the moment).</p>\n<p>Maintaining summary stats for data structures is another really cool idea. For invertible, associative, commutative operations I think that this can be done easily enough with a wrapper that intercepts the mutations (assuming you don't want to track the deltas manually); for more general associative reductions it depends somewhat on the data structure (e.g. you can do this with a tree).</p>\n<p>If PermutedArrays can do everything you want already, using that sounds like a great idea.</p>",
        "id": 243297162,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1624185258
    },
    {
        "content": "<p>Thanks for the feedback <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>If <code>Indices</code> can be made to take another type parameter, say replacing <code>values::Vector{I}</code> with <code>values::V</code>, this could be something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">MyDictionary</span><span class=\"p\">{</span><span class=\"kt\">I</span><span class=\"p\">,</span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"kt\">V</span><span class=\"p\">,</span><span class=\"kt\">F</span><span class=\"p\">,</span><span class=\"kt\">S</span><span class=\"p\">}</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractDictionary</span><span class=\"p\">{</span><span class=\"kt\">I</span><span class=\"p\">,</span> <span class=\"kt\">T</span><span class=\"p\">}</span>\n    <span class=\"n\">inds</span><span class=\"o\">::</span><span class=\"kt\">Indices</span><span class=\"p\">{</span><span class=\"kt\">I</span><span class=\"p\">,</span><span class=\"kt\">V</span><span class=\"p\">}</span>\n\n    <span class=\"c\"># keys.data === inds.values</span>\n    <span class=\"n\">keys</span><span class=\"o\">::</span><span class=\"kt\">PermutedVector</span><span class=\"p\">{</span><span class=\"kt\">V</span><span class=\"p\">}</span>\n\n    <span class=\"c\"># This could be abstracted too, but no need to do everything at once</span>\n    <span class=\"n\">values</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n\n    <span class=\"n\">stats</span><span class=\"o\">::</span><span class=\"kt\">S</span>            <span class=\"c\"># e.g., OnlineStats.LogSumExp</span>\n    <span class=\"n\">update_stats!</span><span class=\"o\">::</span><span class=\"kt\">F</span>    <span class=\"c\"># e.g., OnlineStats.fit!</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I had convinced myself this is important for my JuliaCon talk, but I think that's just because it sounds fun. So I should work on slides. I'll think about this some more in the background, and maybe we can talk some more in a week or two?</p>",
        "id": 243323121,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1624225402
    },
    {
        "content": "<p>With JuliaCon submitted (<span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ), I have a little catch-up to do. Adding this to my to-do list, hope to get back to it soon <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 245314545,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1625751929
    }
]