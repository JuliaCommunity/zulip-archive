[
    {
        "content": "<p>Is it possible to build reductions over individual vector elements with <a href=\"https://github.com/search?q=FLoops.jl&amp;type=Repositories\">FLoops.jl</a> (or any other package? I only know of FLoops for now)? I'm trying to get a solution to a question I asked some time ago, <a href=\"https://discourse.julialang.org/t/problem-converting-serial-code-to-parallel-code-with-floops/87610\">https://discourse.julialang.org/t/problem-converting-serial-code-to-parallel-code-with-floops/87610</a>, and this seems to be the issue with it. The actual example I'm interested in is for parallelising some finite volume code <a href=\"https://github.com/DanielVandH/FiniteVolumeMethod.jl/blob/main/src/fvm.jl#L793-L902\">https://github.com/DanielVandH/FiniteVolumeMethod.jl/blob/main/src/fvm.jl#L793-L902</a>.</p>",
        "id": 314331512,
        "sender_full_name": "Daniel VandenHeuvel",
        "timestamp": 1670362847
    },
    {
        "content": "<blockquote>\n<p>Is it possible to build reductions over individual vector elements</p>\n</blockquote>\n<p>Can you give a minimal example of what this means?</p>",
        "id": 314337712,
        "sender_full_name": "jar",
        "timestamp": 1670365322
    },
    {
        "content": "<p>Well, actually I'm not 100% sure what I mean there other than that I wanted to use <code>FLoops.@reduce</code> for this, applying it to expressions like <code>du[j] += 100</code> so that <code>@reduce du[j] += 100</code> works.</p>\n<p>In the linked discourse post, I have the code:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">FLoops</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Random</span><span class=\"w\"></span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">update_u!</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">.=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]],</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]]]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">du</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">du</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">[(</span><span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"n\">sin</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">sin</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">nothing</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">do_parallel</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"o\">::</span><span class=\"kt\">AbstractVector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elements</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nd\">@floop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">âˆˆ</span><span class=\"w\"> </span><span class=\"n\">elements</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nd\">@views</span><span class=\"w\"> </span><span class=\"n\">update_u!</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">nothing</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This somewhat captures what I want. <code>@reduce</code> would (I believe) avoid the data-race issues with updating <code>du</code>, but it doesn't seem to work on expressions like that.</p>",
        "id": 314338423,
        "sender_full_name": "Daniel VandenHeuvel",
        "timestamp": 1670365615
    },
    {
        "content": "<p>The floop macro is just a wrapper around the functional primitives, so if it's not working you should still be able to write it with Folds or Transducers</p>",
        "id": 314344221,
        "sender_full_name": "jar",
        "timestamp": 1670368033
    },
    {
        "content": "<p>I'll look into those packages. I had previously considered those but couldn't follow the documentation. Thanks</p>",
        "id": 314345999,
        "sender_full_name": "Daniel VandenHeuvel",
        "timestamp": 1670368866
    }
]