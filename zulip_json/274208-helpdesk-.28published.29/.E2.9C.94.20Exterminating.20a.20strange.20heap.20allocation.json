[
    {
        "content": "<p>This is a cross-post from <code>#performance-helpdesk</code> on slack, but I'm tantalisingly close to having implemented a zero-heap-allocation function. There's just one bit which is allocating, and I'd dearly like to get rid of it.<br>\nWith <code>--track-allocation=use</code> I see:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">turboshake</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c\"># &lt;:Unsigned or NTuple{n, &lt;:Unsigned}</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\">                     </span><span class=\"n\">message</span><span class=\"o\">::</span><span class=\"kt\">AbstractVector</span><span class=\"p\">{</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">UInt64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UInt8</span><span class=\"p\">}},</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\">                     </span><span class=\"n\">delimsufix</span><span class=\"o\">::</span><span class=\"kt\">UInt8</span><span class=\"o\">=</span><span class=\"mh\">0x80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">capacity</span><span class=\"o\">::</span><span class=\"kt\">Val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Val</span><span class=\"p\">{</span><span class=\"kt\">CAPACITY</span><span class=\"p\">}())</span>\n<span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">finalblk</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ingest</span><span class=\"p\">(</span><span class=\"n\">EMPTY_STATE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">capacity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pad</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">capacity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">finalblk</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">delimsufix</span><span class=\"p\">)</span>\n<span class=\"mi\">720</span><span class=\"w\">     </span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">capacity</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"k\">end</span>\n</code></pre></div>\n<p>Analysing a <code>turboshake(UInt128, ...)</code> call with Cthulu and PProf I see that this is fully-inferred, and for some reason a the output <code>UInt128</code> is heap-allocated instead of stack-allocated? There's also a <code>NTuple{25, UInt64}</code> (which would correspond to <code>state</code>) that I also expect should be on the stack.</p>\n<p><a href=\"/user_uploads/7178/6r4oS2kR2EFfVOpFZWr47hKi/image.png\">cthulhu.png</a><br>\n<a href=\"/user_uploads/7178/wa_veqQV7Gwx3hodRO1Cg9bC/image.png\">pprof.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/6r4oS2kR2EFfVOpFZWr47hKi/image.png\" title=\"cthulhu.png\"><img src=\"/user_uploads/7178/6r4oS2kR2EFfVOpFZWr47hKi/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/7178/wa_veqQV7Gwx3hodRO1Cg9bC/image.png\" title=\"pprof.png\"><img src=\"/user_uploads/7178/wa_veqQV7Gwx3hodRO1Cg9bC/image.png\"></a></div><p>If I can interest anybody in taking a look, you can see the rest of the code here: <a href=\"https://github.com/tecosaur/KangarooTwelve.jl/blob/30f178a0b43be89ed68c23746c529b2b637ab51a/src/KangarooTwelve.jl\">https://github.com/tecosaur/KangarooTwelve.jl/blob/30f178a0b43be89ed68c23746c529b2b637ab51a/src/KangarooTwelve.jl</a></p>",
        "id": 394178009,
        "sender_full_name": "Timothy",
        "timestamp": 1696151696
    },
    {
        "content": "<p>I did a bunch of fiddling with the code, and the alloc mysteriously disappeared?</p>",
        "id": 394469684,
        "sender_full_name": "Timothy",
        "timestamp": 1696263569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400021\">Timothy</span> has marked this topic as resolved.</p>",
        "id": 394469691,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696263572
    }
]