[
    {
        "content": "<p>I have been experimenting with generators (e.g. in the form of <code>Iterators.map</code> and <code>(something... for x in 1:n)</code>) and finding that it can be very nice for composing separate parts of a calculation together and avoiding a bunch of intermediate allocations. However, I'm having a hard time creating generalized functions on them. I think the lack of a formal contract of \"this object is an iterable\" and not being able to peek into a generator's <code>eltype</code> to dispatch are the specific reasons why I'm having a hard time. I think I also don't really see lazy iterators/generators used heavily in Julia. Should I just bite the bullet and focus on arrays? Not sure if it matters, but I'm speaking of various applications of survival arrays, timepoints, cashflows, etc from the JuliaActuary ecosystem.</p>",
        "id": 318909079,
        "sender_full_name": "Alec",
        "timestamp": 1672609748
    },
    {
        "content": "<p>it depends very heavily on what you're trying to do with iterators - if all your data is already tabular, staying tabular is going to be an advantage</p>",
        "id": 318909266,
        "sender_full_name": "Sukera",
        "timestamp": 1672609913
    },
    {
        "content": "<p>I've had the same problem as you. My solution was to just not dispatch on iterators in my code. It sucks though.</p>",
        "id": 318974332,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1672658660
    },
    {
        "content": "<p>Also agree. In case you missed it, there are a couple of holy-trait functions which can help in some cases: <a href=\"https://docs.julialang.org/en/v1/manual/interfaces/\">https://docs.julialang.org/en/v1/manual/interfaces/</a></p>\n<p>I often do wonder why something like <code>itertype</code> is not in that list though.</p>",
        "id": 318991229,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1672665628
    },
    {
        "content": "<p>You can (in theory) always use <code>eltype</code> as a \"trait\" for dispatching to an internal function, though be prepared to have a lengthy fallback for <code>Any</code>..</p>",
        "id": 318993007,
        "sender_full_name": "Sukera",
        "timestamp": 1672666274
    },
    {
        "content": "<p>Lazy calculations, arrays, tables - in Julia there's no need to choose, you easily get all three :)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">FlexiMaps</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Tables</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"w\"></span>\n\n<span class=\"c\"># apply lazily computed map</span><span class=\"w\"></span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mapview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i2</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"o\">...:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">...</span><span class=\"w\"></span>\n\n<span class=\"c\"># ys is an abstractvector with the correct eltype</span><span class=\"w\"></span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">eltype</span><span class=\"p\">(</span><span class=\"n\">ys</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:i2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"k\">isa</span><span class=\"w\"> </span><span class=\"kt\">AbstractVector</span><span class=\"w\"></span>\n<span class=\"nb\">true</span><span class=\"w\"></span>\n\n<span class=\"c\"># and it's a table, so all Tables.jl integrations work</span><span class=\"w\"></span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">columntable</span><span class=\"p\">(</span><span class=\"n\">ys</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">i2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">49</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">81</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">])</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 319846800,
        "sender_full_name": "aplavin",
        "timestamp": 1673033017
    }
]