[
    {
        "content": "<p>I'm working on <a href=\"https://github.com/stemann/MLX.jl\">MLX.jl</a> to provide access to the <a href=\"https://github.com/ml-explore/mlx\">MLX array framework</a> (in particular for machine learning on Apple platforms).</p>\n<p>In MLX almost all (array) operations are lazy (to make it possible to optimize a computational graph), i.e. operations are not executed until <a href=\"https://github.com/ml-explore/mlx-c/blob/v0.1.0/mlx/c/array.h#L173\"><code>eval</code></a> is called, <a href=\"https://ml-explore.github.io/mlx/build/html/usage/quick_start.html\">e.g.</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"o\">&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">mlx.core</span> <span class=\"k\">as</span> <span class=\"nn\">mx</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">mx</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">mx</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>    <span class=\"c1\"># c not yet evaluated</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">mx</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>  <span class=\"c1\"># evaluates c</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>     <span class=\"c1\"># Also evaluates c</span>\n</code></pre></div>\n<p>(sorry for the \"P-language\" example <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>\n<p>How to best represent lazy arrays and operations on lazy arrays in Julia?<br>\nI have so far found <a href=\"https://juliahub.com/ui/Packages/General/Lazy\">Lazy.jl</a>, <a href=\"https://juliahub.com/ui/Packages/General/LazyArrays\">LazyArrays.jl</a>, and <a href=\"https://juliahub.com/ui/Packages/General/Thunks\">Thunks.jl</a> (<span aria-label=\"top hat\" class=\"emoji emoji-1f3a9\" role=\"img\" title=\"top hat\">:top_hat:</span> tip to <a href=\"https://juliahub.com/ui/Packages/General/Dagger\">Dagger.jl</a>) - and there is also <a href=\"https://juliadiff.org/ChainRulesCore.jl/dev/rule_author/writing_good_rules.html#Thunks\">Thunks in ChainRulesCore</a>, but not sure which approach would be best... suggestions?</p>",
        "id": 489074428,
        "sender_full_name": "Jesper Stemann Andersen",
        "timestamp": 1734260338
    },
    {
        "content": "<p>Do you want/need to expose the lazyness?</p>",
        "id": 491501450,
        "sender_full_name": "Simone Carlo Surace",
        "timestamp": 1735739511
    },
    {
        "content": "<p>I guess you could define your own lazy type that wraps the mlx lazy array and which can be materialized. This is how LazyArrays does it. I don‘t see why you‘d need to integrate with those Julia libraries at all.</p>",
        "id": 491501653,
        "sender_full_name": "Simone Carlo Surace",
        "timestamp": 1735739686
    },
    {
        "content": "<p>The input I got from Slack was to look into broadcasting, LazyArrays or how Reactant does tracing: <a href=\"https://julialang.slack.com/archives/C6A044SQH/p1734260542606079\">https://julialang.slack.com/archives/C6A044SQH/p1734260542606079</a></p>",
        "id": 491523021,
        "sender_full_name": "Jesper Stemann Andersen",
        "timestamp": 1735759798
    },
    {
        "content": "<p>Right now an AbstractArray/StridedArray interface is implemented for MLXArray. But it seems somewhat misleading if the array is not materialized.</p>",
        "id": 491523144,
        "sender_full_name": "Jesper Stemann Andersen",
        "timestamp": 1735759888
    }
]