[
    {
        "content": "<p>If I see:</p>\n<blockquote>\n<p>double free or corruption (out)<br>\ndouble free or corruption (!prev)</p>\n<p>signal (6): Aborted<br>\nin expression starting at REPL[2]:1<br>\n[1]    104817 IOT instruction (core dumped)  julia --project=@. --threads=32</p>\n</blockquote>\n<p>is this a me-problem or a julialang-problem?</p>",
        "id": 285882713,
        "sender_full_name": "Timothy",
        "timestamp": 1655097293
    },
    {
        "content": "<p>For context, this seems to be the code triggering it:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">rows</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">DataFrameRow</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"nd\">@threads</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">axes</span><span class=\"p\">(</span><span class=\"n\">gnomad1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c\"># stuff</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">[</span><span class=\"n\">threadid</span><span class=\"p\">()],</span><span class=\"w\"> </span><span class=\"n\">rowd</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 285882810,
        "sender_full_name": "Timothy",
        "timestamp": 1655097394
    },
    {
        "content": "<p>Tried running again and I see</p>\n<blockquote>\n<p>corrupted size vs. prev_size while consolidating</p>\n<p>signal (6): Aborted<br>\nin expression starting at REPL[2]:1<br>\n__pthread_kill_implementation at /lib64/libc.so.6 (unknown line)<br>\nraise at /lib64/libc.so.6 (unknown line)<br>\nabort at /lib64/libc.so.6 (unknown line)<br>\n__libc_message at /lib64/libc.so.6 (unknown line)<br>\nmalloc_printerr at /lib64/libc.so.6 (unknown line)<br>\n_int_free at /lib64/libc.so.6 (unknown line)<br>\nfree at /lib64/libc.so.6 (unknown line)<br>\njl_realloc_aligned at /buildworker/worker/package_linux64/build/src/gc.c:249 [inlined]<br>\ngc_managed_realloc_ at /buildworker/worker/package_linux64/build/src/gc.c:3540 [inlined]<br>\njl_gc_managed_realloc at /buildworker/worker/package_linux64/build/src/gc.c:3557<br>\narray_resize_buffer at /buildworker/worker/package_linux64/build/src/array.c:681<br>\njl_array_grow_at_end at /buildworker/worker/package_linux64/build/src/array.c:904 [inlined]<br>\njl_array_grow_end at /buildworker/worker/package_linux64/build/src/array.c:968<br>\n_growend! at ./array.jl:948 [inlined]<br>\npush! at ./array.jl:995<br>\n...</p>\n</blockquote>",
        "id": 285883113,
        "sender_full_name": "Timothy",
        "timestamp": 1655097798
    },
    {
        "content": "<p><code>threadid()</code> is not a stable way to query this</p>",
        "id": 285885298,
        "sender_full_name": "Sukera",
        "timestamp": 1655100419
    },
    {
        "content": "<p>also, your <code>rows</code> holds the exact same array multiple times</p>",
        "id": 285885329,
        "sender_full_name": "Sukera",
        "timestamp": 1655100466
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">mutable</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"kt\">Example</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">Example</span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">UInt</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Example</span><span class=\"p\">}</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"p\">(</span><span class=\"mh\">0x32bdaaec78c24bc5</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"p\">(</span><span class=\"mh\">0x32bdaaec78c24bc5</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"p\">(</span><span class=\"mh\">0x32bdaaec78c24bc5</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nb\">true</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 285885410,
        "sender_full_name": "Sukera",
        "timestamp": 1655100534
    },
    {
        "content": "<p>either fill in a loop explicitly or use a comprehension, otherwise you're possibly trying to grow the exact same array from multiple threads</p>",
        "id": 285885421,
        "sender_full_name": "Sukera",
        "timestamp": 1655100555
    },
    {
        "content": "<p>Ah, thanks for that hint. I'll try <code>[DataFrameRow[] for _ in 1:nthreads()]</code>. Do you know if this could also cause an <code>UndefRefError</code>? I ask because it will take me ~1.5h to see if the fix worked.</p>",
        "id": 285888363,
        "sender_full_name": "Timothy",
        "timestamp": 1655103623
    },
    {
        "content": "<p>don't think so? I'd have to take a look at the stacktrace</p>",
        "id": 285895652,
        "sender_full_name": "Sukera",
        "timestamp": 1655108796
    },
    {
        "content": "<p>Well, I'll find out in a few minutes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 285895704,
        "sender_full_name": "Timothy",
        "timestamp": 1655108823
    },
    {
        "content": "<p>1.5h seems like a very long time, do you not have a small-ish check program to run for testing purposes?</p>",
        "id": 285895709,
        "sender_full_name": "Sukera",
        "timestamp": 1655108827
    },
    {
        "content": "<p>ah, yeah <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 285895720,
        "sender_full_name": "Sukera",
        "timestamp": 1655108834
    },
    {
        "content": "<p>or is that already your small-ish check?</p>",
        "id": 285895739,
        "sender_full_name": "Sukera",
        "timestamp": 1655108841
    },
    {
        "content": "<p>I've stumbled across a bunch of issues that don't happen with small data sets, I'm guessing they're friendlier on race conditions etc.</p>",
        "id": 285895860,
        "sender_full_name": "Timothy",
        "timestamp": 1655108896
    },
    {
        "content": "<p>Wooo! I think it worked</p>",
        "id": 285896305,
        "sender_full_name": "Timothy",
        "timestamp": 1655109128
    },
    {
        "content": "<p>haha yeah, I can see that</p>",
        "id": 285896482,
        "sender_full_name": "Sukera",
        "timestamp": 1655109246
    },
    {
        "content": "<p>resiliency against data races is hard (unless you go for Rust, then it's a little easier)</p>",
        "id": 285896518,
        "sender_full_name": "Sukera",
        "timestamp": 1655109267
    },
    {
        "content": "<p>The moments of anticipation when the ETA counted down to 0s and it was processing were killing me <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> worse than a horror movie</p>",
        "id": 285896530,
        "sender_full_name": "Timothy",
        "timestamp": 1655109280
    },
    {
        "content": "<p><a href=\"/user_uploads/7178/oWQK0InS57IBQhah6VxrJHqh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/oWQK0InS57IBQhah6VxrJHqh/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/oWQK0InS57IBQhah6VxrJHqh/image.png\"></a></div>",
        "id": 285896611,
        "sender_full_name": "Timothy",
        "timestamp": 1655109342
    },
    {
        "content": "<p>nice</p>",
        "id": 285902478,
        "sender_full_name": "Sukera",
        "timestamp": 1655112523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400021\">Timothy</span> has marked this topic as resolved.</p>",
        "id": 285928175,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655127484
    }
]