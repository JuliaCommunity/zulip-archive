[
    {
        "content": "<p>Hello,</p>\n<p>In the following code, I have tried parallelising the <code>for (j, pair)</code> loop, however although the results of one iteration should be independent of other iterations, whenever I add <code>Threads.@threads</code> the result I get changes <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"n\">tightnesses</span> <span class=\"o\">=</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">𝐑</span><span class=\"p\">))</span>\n    <span class=\"n\">besttightness</span> <span class=\"o\">=</span> <span class=\"nb\">Inf</span>\n    <span class=\"nd\">@simpleprog</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">ixy</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">𝐑</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"n\">ixy</span>\n        <span class=\"n\">D₁</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">)</span>\n        <span class=\"n\">pairs</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">],</span><span class=\"o\">:</span><span class=\"p\">]</span>\n        <span class=\"n\">pairs′</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">R</span> <span class=\"o\">*</span> <span class=\"n\">pairs</span> <span class=\"k\">for</span> <span class=\"n\">R</span> <span class=\"o\">∈</span> <span class=\"n\">𝐑</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"p\">(</span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pairs′</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">collect</span><span class=\"p\">)</span>\n            <span class=\"n\">proginc!</span><span class=\"p\">()</span>\n            <span class=\"n\">D₁</span><span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">],</span><span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pair</span>\n            <span class=\"n\">𝚡</span> <span class=\"o\">=</span> <span class=\"n\">basisparameterise</span><span class=\"p\">(</span><span class=\"n\">D₁</span><span class=\"p\">,</span> <span class=\"n\">𝐱cent𝛟</span><span class=\"p\">,</span> <span class=\"n\">𝐱𝛟</span><span class=\"p\">)</span>\n            <span class=\"n\">tightnesses</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">basistightness</span><span class=\"p\">(</span><span class=\"n\">𝚡</span><span class=\"p\">,</span> <span class=\"n\">𝐱</span><span class=\"p\">;</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">krepr</span><span class=\"p\">)</span>\n        <span class=\"k\">end</span>\n        <span class=\"k\">if</span> <span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">tightnesses</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">besttightness</span>\n            <span class=\"n\">besttightness</span> <span class=\"o\">=</span> <span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">tightnesses</span><span class=\"p\">)</span>\n            <span class=\"n\">D</span><span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">],</span><span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pairs′</span><span class=\"p\">[</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">tightnesses</span><span class=\"p\">)]</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">𝐃</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n</code></pre></div>\n<p>If anyone has any ideas what's happening and/or how I can get this to work, that would be much appreciated!</p>",
        "id": 245019064,
        "sender_full_name": "Timothy",
        "timestamp": 1625566661
    },
    {
        "content": "<p>For reference <code>length(𝐑)</code> is <code>360</code>.</p>",
        "id": 245019141,
        "sender_full_name": "Timothy",
        "timestamp": 1625566689
    },
    {
        "content": "<p>Many questions arise.</p>\n<p>What is <code>ixy</code>? What is <code>@simpleprog</code>? What is <code>proginc!</code>? What is <code>D</code>? Is there any difference between <code>D</code> and <code>𝐃</code>?  What is <code>basisparametrise</code>? What is <code>𝐱cent𝛟</code>? And so on....</p>\n<p>Any of this things can potentially make loop iterations-dependent, and it is impossible to say which one just by looking at this code.</p>\n<p>One thing, though - you make <code>D1</code> as a copy of <code>D</code>, and at the same time you change <code>D</code> inside iteration (in <code>if minimum...</code> branch).  So, it looks like iterations are not independent.</p>",
        "id": 245021007,
        "sender_full_name": "Kwaku Oskin",
        "timestamp": 1625568059
    },
    {
        "content": "<p>Unfortunately I the full context is rather ... large. However, I'll attempt to give an idea of what's going on here:</p>\n<ul>\n<li><code>ixy</code> is a vector of tuples <code>[(1, 1, 2), (2, 1, 3), (3, 1, 4), ..., (26, 2, 13), ..., (240, 15, 16)]</code></li>\n<li><code>𝐑</code> is a vector of 2D rotation matrices</li>\n<li><code>@simpleprog n body</code> is a simple macro that generates a progress output for <code>body</code> which is incremented by <code>proginc!()</code></li>\n<li><code>D</code> is just some ortonormal matrix</li>\n<li><code>𝐃</code> is a tensor recording the evolution of <code>D</code></li>\n<li><code>basisparameterise</code> is a pure function (i.e. no state) which is completely determanistic</li>\n<li><code>basistightness</code> is also a pure function, but has a very small random element</li>\n<li><code>𝐱cent𝛟</code> and  <code>𝐱𝛟</code> are another can of worms, but they're constant values</li>\n</ul>\n<p>Regarding your comment:</p>\n<blockquote>\n<p>One thing, though - you make D1 as a copy of D, and at the same time you change D inside iteration (in if minimum... branch). So, it looks like iterations are not independent.</p>\n</blockquote>\n<p><code>D</code> is changed in the outer loop <code>for (i, x, y)</code>, I'm talking about the inner loop <code>for (j, pair)</code>.</p>\n<p>To further clarify regarding that inner loop:</p>\n<ul>\n<li><code>proginc!()</code> has no effect on the result</li>\n<li><code>D₁</code> and <code>tightnesses[j]</code> are the only values affected by it</li>\n<li>all other values are (within that loop) constants</li>\n</ul>",
        "id": 245023208,
        "sender_full_name": "Timothy",
        "timestamp": 1625569622
    },
    {
        "content": "<p>Perhaps it could help if I make a \"reduced\" version?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">besttightness</span> <span class=\"o\">=</span> <span class=\"nb\">Inf</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"o\">∈</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">∈</span> <span class=\"n\">ys</span>\n    <span class=\"n\">D₁</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">)</span>\n    <span class=\"n\">pairs</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">],</span><span class=\"o\">:</span><span class=\"p\">]</span>\n    <span class=\"n\">pairs′</span> <span class=\"o\">=</span> <span class=\"n\">makerotations</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"p\">(</span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pairs′</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">collect</span><span class=\"p\">)</span>\n        <span class=\"n\">D₁</span><span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">],</span><span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pair</span>\n        <span class=\"n\">tightnesses</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">somepurefunction</span><span class=\"p\">(</span><span class=\"n\">D₁</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">if</span> <span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">tightnesses</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">besttightness</span>\n        <span class=\"n\">besttightness</span> <span class=\"o\">=</span> <span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">tightnesses</span><span class=\"p\">)</span>\n        <span class=\"n\">D</span><span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">],</span><span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pairs′</span><span class=\"p\">[</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">tightnesses</span><span class=\"p\">)]</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 245023519,
        "sender_full_name": "Timothy",
        "timestamp": 1625569854
    },
    {
        "content": "<p>I also tried adding <code>D₁ = copy(D)</code> before <code>D₁[[x,y],:] = pair</code> at some point, but that didn't improve things.</p>",
        "id": 245023669,
        "sender_full_name": "Timothy",
        "timestamp": 1625569940
    },
    {
        "content": "<p>a minimal working example would be better but definitely it seems that that line is the one causing you problems.</p>\n<p>By the way, it seems like the <code>collect</code> in there is not necessary:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"mi\">1</span><span class=\"o\">×</span><span class=\"mi\">3</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n       <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"s\">\" \"</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)</span>\n       <span class=\"k\">end</span>\n<span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"p\">(</span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">collect</span><span class=\"p\">)</span>\n       <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"s\">\" \"</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)</span>\n       <span class=\"k\">end</span>\n<span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 245352462,
        "sender_full_name": "Argel Ramírez Reyes",
        "timestamp": 1625768910
    },
    {
        "content": "<p>Which line are you referring to? Oh, and <code>collect</code> is needed when using <code>@threads</code>.</p>",
        "id": 245587948,
        "sender_full_name": "Timothy",
        "timestamp": 1625978819
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"p\">)</span> <span class=\"o\">∈</span> <span class=\"p\">(</span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pairs′</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">collect</span><span class=\"p\">)</span>\n        <span class=\"n\">D₁</span><span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">],</span><span class=\"o\">:</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pair</span>\n        <span class=\"n\">tightnesses</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">somepurefunction</span><span class=\"p\">(</span><span class=\"n\">D₁</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n</code></pre></div>\n<p>I don't see how this possibly could be parallelized. All threads will try to update the contents of <code>D₁</code> and will overwrite each other in a data race. You will need to set things up so each thread has its own copy of <code>D₁</code> to play with.</p>",
        "id": 245597876,
        "sender_full_name": "Gunnar Farnebäck",
        "timestamp": 1625995365
    }
]