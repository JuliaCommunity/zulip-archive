[
    {
        "content": "<p>I know I've asked this before, but probably on slack or something, so I thought I'd ask here for a non-ephemeral answer. I routinely find myself using the pattern <code>collection[find{all|first}(pred, collection)]</code>. That is, I want to find <em>and return</em> the elements of a collection that match some predicate, rather than just the indices.</p>\n<p>I'm wondering if there is an existing function that does this in one shot, since often my collection is something that I'm constructing on the fly and then intend to discard.</p>",
        "id": 294761856,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1661199984
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nd\">@show</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"w\"></span>\n<span class=\"mi\">30</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 294765920,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1661201947
    },
    {
        "content": "<p>Doesn't</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>work as well?</p>",
        "id": 294790647,
        "sender_full_name": "Leandro Mart√≠nez",
        "timestamp": 1661217913
    },
    {
        "content": "<p>Sure. This is syntax for <code>collect(Iterators.filter(...))</code>, and this may be better than my eager <code>filter</code> when \"my collection <code>x</code> is something that I'm constructing on the fly\" i.e. is probably a Generator</p>",
        "id": 294791746,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1661219027
    },
    {
        "content": "<p>My <code>first(...)</code> case could be done more carefully to give say <code>nothing</code> when there are no answers, like <code>findfirst</code> does.</p>",
        "id": 294791896,
        "sender_full_name": "Michael Abbott",
        "timestamp": 1661219151
    },
    {
        "content": "<p>Ahh, filter - of course <img alt=\":derp:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/7178/emoji/images/14983.png\" title=\"derp\"> </p>\n<p>I like the <code>first</code> version using <code>Iterators.filter</code>... that's clever!</p>",
        "id": 294940531,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1661286076
    }
]