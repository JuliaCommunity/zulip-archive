[
    {
        "content": "<p>I found that <code>@fastmath</code> has some problems with <code>Base.Cartesian.@nexprs</code>, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"nd\">@nexprs</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y_j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">()</span>\n<span class=\"go\">0.13646394987531396</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@fastmath</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"nd\">@nexprs</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x_j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">y_</span><span class=\"p\">{</span><span class=\"kt\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"gr\">ERROR: UndefVarError: `y_` not defined in `Main`</span>\n<span class=\"gr\">Suggestion: check for spelling errors or missing imports.</span>\n<span class=\"gr\">Stacktrace:</span>\n<span class=\"gr\"> [1] top-level scope</span>\n<span class=\"gr\">   @ REPL[2]:1</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@macroexpand</span><span class=\"w\"> </span><span class=\"nd\">@fastmath</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"nd\">@nexprs</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x_j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">y_</span><span class=\"p\">{</span><span class=\"kt\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"go\">quote</span>\n<span class=\"go\">    x_1 = y_{Base.FastMath.add_fast(1, 1)}</span>\n<span class=\"go\">    x_2 = y_{Base.FastMath.add_fast(2, 1)}</span>\n<span class=\"go\">    x_3 = y_{Base.FastMath.add_fast(3, 1)}</span>\n<span class=\"go\">    x_4 = y_{Base.FastMath.add_fast(4, 1)}</span>\n<span class=\"go\">end</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@macroexpand</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"nd\">@nexprs</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x_j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">y_</span><span class=\"p\">{</span><span class=\"kt\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"go\">quote</span>\n<span class=\"go\">    x_1 = y_2</span>\n<span class=\"go\">    x_2 = y_3</span>\n<span class=\"go\">    x_3 = y_4</span>\n<span class=\"go\">    x_4 = y_5</span>\n<span class=\"go\">end</span>\n</code></pre></div>\n<p>It looks like it's basically <code>@fastmath(@nexprs(4, ...))</code>, so evaluating from inside to outside, shouldn't <code>@fastmath</code> just enable fastmath for the whole block after getting the output from the <code>@nexprs</code> macro? Or does macro evaluation follow a different order, like from outside in?</p>",
        "id": 542772289,
        "sender_full_name": "wheeheee",
        "timestamp": 1759419002
    },
    {
        "content": "<p>Yes, macros evaluate outside in, because they operate on chunks of code.</p>",
        "id": 542777092,
        "sender_full_name": "Mason Protter",
        "timestamp": 1759420268
    },
    {
        "content": "<p>Can I sort of make them evaluate inside out?</p>",
        "id": 542784610,
        "sender_full_name": "wheeheee",
        "timestamp": 1759422374
    },
    {
        "content": "<p>Or achieve that kind of effect, basically.</p>",
        "id": 542784721,
        "sender_full_name": "wheeheee",
        "timestamp": 1759422412
    },
    {
        "content": "<p>yes, you just have to make the outer macro look for macros inside of it and then <code>macroexpand</code> them</p>",
        "id": 542830388,
        "sender_full_name": "Mason Protter",
        "timestamp": 1759438737
    },
    {
        "content": "<p>I suppose the most general way would be to define a separate macro <code>@expandafter</code> that rewrites</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@expandafter</span><span class=\"w\"> </span><span class=\"nd\">@outer</span><span class=\"w\"> </span><span class=\"nd\">@inner</span><span class=\"w\"> </span><span class=\"n\">expr</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@outer</span><span class=\"w\"> </span><span class=\"n\">inner_expr_expanded</span>\n</code></pre></div>\n<p>In TeX, which is a pure macro expansion language, this macro is built in.</p>",
        "id": 542846574,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1759447963
    },
    {
        "content": "<p><a href=\"https://jkrumbiegel.com/pages/2022-08-09-composing-macros/\">https://jkrumbiegel.com/pages/2022-08-09-composing-macros/</a></p>",
        "id": 542873513,
        "sender_full_name": "Mos√® Giordano",
        "timestamp": 1759470996
    }
]