[
    {
        "content": "<p>Hey there. Maybe this is obvious, but I'm having trouble with dicts and the time it takes. <br>\nFor example, I have a function that takes a graph and vertex positions and calculates the line segments for edges. This takes only ~15μs. But for some reason, the line the assigns this to a dictionary takes like ~50ms, the line is <code>edges_to_segments::Dict{Tuple{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64}, GeometryBasics.Line{2, Float32}} = get_edges_to_segments(G, positions)</code></p>\n<p>Is there no way to use a dict and have this be fast? I tried giving a size hint and I don't think it did anything.</p>",
        "id": 421125882,
        "sender_full_name": "Nicolas Arnold",
        "timestamp": 1707770955
    },
    {
        "content": "<p>It's hard to even speculate without any information of what <code>get_edges_to_segments</code> actually does or how it is implemented.</p>",
        "id": 421135622,
        "sender_full_name": "Gunnar Farnebäck",
        "timestamp": 1707774490
    },
    {
        "content": "<p>Here is a minimum running example that is set up to demonstrates it. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">LinearAlgebra</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Graphs</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">TimerOutputs</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">GeometryBasics</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">NetworkLayout</span>\n\n\n\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TimerOutput</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">testing_generate_graph</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">45</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">max_edges</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">÷</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_edges</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">graph</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SimpleGraph</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c\">#graph = SimpleDiGraph(n, e)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">graph</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">testing_generate_layout</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">::</span><span class=\"kt\">AbstractGraph</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">layout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SFDP</span><span class=\"p\">(</span><span class=\"n\">Ptype</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Float32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tol</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c\">#layout = Spring()</span>\n<span class=\"w\">    </span><span class=\"n\">positions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">positions</span>\n<span class=\"k\">end</span>\n\n\n\n<span class=\"nd\">@timeit</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">get_edges_to_segments</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">graph</span><span class=\"o\">::</span><span class=\"kt\">AbstractGraph</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">positions</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">GeometryBasics</span><span class=\"o\">.</span><span class=\"kt\">Point</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span>\n<span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"cm\">#=</span>\n<span class=\"cm\">    edges_to_segments = Dict(</span>\n<span class=\"cm\">        (e, i) =&gt; Segment(</span>\n<span class=\"cm\">            Meshes.Point(positions[src(e)][1], positions[src(e)][2]),</span>\n<span class=\"cm\">            Meshes.Point(positions[dst(e)][1], positions[dst(e)][2]),</span>\n<span class=\"cm\">        ) for (i, e) in enumerate(edges(graph))</span>\n<span class=\"cm\">    ) =#</span>\n<span class=\"w\">    </span><span class=\"n\">edges_to_segments</span><span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Graphs</span><span class=\"o\">.</span><span class=\"kt\">SimpleGraphs</span><span class=\"o\">.</span><span class=\"kt\">SimpleEdge</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">GeometryBasics</span><span class=\"o\">.</span><span class=\"kt\">Line</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float32</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">GeometryBasics</span><span class=\"o\">.</span><span class=\"n\">Line</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">positions</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)],</span>\n<span class=\"w\">           </span><span class=\"n\">positions</span><span class=\"p\">[</span><span class=\"n\">dst</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)],</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">edges_to_segments</span>\n<span class=\"k\">end</span>\n\n\n<span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">testing_generate_graph</span><span class=\"p\">()</span>\n<span class=\"n\">vertpositions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">testing_generate_layout</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n\n\n\n\n\n<span class=\"nd\">@timeit</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"s\">\"section1\"</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_edges_to_segments</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vertpositions</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n\n\n<span class=\"n\">to_flatten</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TimerOutputs</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">)</span>\n<span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">to_flatten</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">compact</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 421138464,
        "sender_full_name": "Nicolas Arnold",
        "timestamp": 1707775653
    },
    {
        "content": "<p>What if you define</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">edges_to_segments</span><span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Graphs</span><span class=\"o\">.</span><span class=\"kt\">SimpleGraphs</span><span class=\"o\">.</span><span class=\"kt\">SimpleEdge</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">GeometryBasics</span><span class=\"o\">.</span><span class=\"kt\">Line</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float32</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Graphs</span><span class=\"o\">.</span><span class=\"kt\">SimpleGraphs</span><span class=\"o\">.</span><span class=\"kt\">SimpleEdge</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">GeometryBasics</span><span class=\"o\">.</span><span class=\"kt\">Line</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float32</span><span class=\"p\">}}(</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">GeometryBasics</span><span class=\"o\">.</span><span class=\"n\">Line</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">positions</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)],</span>\n<span class=\"w\">           </span><span class=\"n\">positions</span><span class=\"p\">[</span><span class=\"n\">dst</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)],</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n</code></pre></div>\n<p>?<br>\nThat is, create your initial dict with the desired type, rather than with ??? type and converting it to the desired type.</p>",
        "id": 421189335,
        "sender_full_name": "chriselrod",
        "timestamp": 1707809805
    },
    {
        "content": "<p>I think this was solved on Discourse</p>",
        "id": 421189622,
        "sender_full_name": "jar",
        "timestamp": 1707809978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"669432\">Lilith Hafner</span> has marked this topic as resolved.</p>",
        "id": 422482993,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708455819
    }
]