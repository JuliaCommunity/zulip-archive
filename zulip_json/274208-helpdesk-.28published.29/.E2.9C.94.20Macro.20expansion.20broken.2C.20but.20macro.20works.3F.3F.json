[
    {
        "content": "<p>I tried <a href=\"https://github.com/TuringLang/DynamicPPL.jl/pull/311/files\">changing some of the code</a> of <a href=\"https://github.com/search?q=Turing.jl&amp;type=Repositories\">Turing.jl</a>'s <code>@model</code> macro, with the curios effect that  macro expansion doesn't work -- with a <code>malformed expression</code> syntax error -- but the macro actually works... any idea what could cause something like that?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@model</span> <span class=\"k\">function</span> <span class=\"n\">demo4</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span><span class=\"o\">=</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span>\n           <span class=\"n\">m</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">()</span>\n           <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">TV</span><span class=\"p\">(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n           <span class=\"nd\">@show</span> <span class=\"n\">__varinfo__</span>\n           <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n               <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">malformed</span> <span class=\"n\">expression</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@macroexpand</span> <span class=\"nd\">@model</span> <span class=\"k\">function</span> <span class=\"n\">demo4</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span><span class=\"o\">=</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span>\n           <span class=\"n\">m</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">()</span>\n           <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">TV</span><span class=\"p\">(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n           <span class=\"nd\">@show</span> <span class=\"n\">__varinfo__</span>\n           <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n               <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span>\n<span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:error</span><span class=\"p\">,</span> <span class=\"s\">\"malformed expression\"</span><span class=\"p\">)))</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"sa\">var</span><span class=\"s\">\"@model\"</span><span class=\"p\">(</span><span class=\"kt\">LineNumberNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"k\">function</span> <span class=\"n\">demo4</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span><span class=\"o\">=</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span>\n           <span class=\"n\">m</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">()</span>\n           <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">TV</span><span class=\"p\">(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n           <span class=\"nd\">@show</span> <span class=\"n\">__varinfo__</span>\n           <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n               <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span><span class=\"p\">))</span>\n<span class=\"o\">:</span><span class=\"p\">(</span><span class=\"cm\">#= /home/philipp/git/DynamicPPL.jl/src/compiler.jl:517 =#</span> <span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nd\">@__doc__</span> <span class=\"k\">function</span> <span class=\"n\">demo4</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">};</span> <span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">TV</span>\n          <span class=\"cm\">#= line 1 =#</span>\n          <span class=\"n\">evaluator</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">__model__</span><span class=\"o\">::</span><span class=\"kt\">Model</span><span class=\"p\">,</span> <span class=\"n\">__varinfo__</span><span class=\"o\">::</span><span class=\"kt\">AbstractVarInfo</span><span class=\"p\">,</span> <span class=\"n\">__context__</span><span class=\"o\">::</span><span class=\"kt\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">AbstractContext</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"kt\">TV</span><span class=\"o\">-&gt;</span><span class=\"k\">begin</span>\n                      <span class=\"k\">begin</span>\n                          <span class=\"cm\">#= REPL[7]:1 =#</span>\n                          <span class=\"cm\">#= REPL[7]:2 =#</span>\n                          <span class=\"k\">begin</span>\n                              <span class=\"n\">vn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">VarName</span><span class=\"p\">){</span><span class=\"ss\">:m</span><span class=\"p\">}()</span>\n                              <span class=\"n\">inds</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n                              <span class=\"n\">isassumption</span> <span class=\"o\">=</span> <span class=\"k\">begin</span>\n                                      <span class=\"k\">let</span> <span class=\"n\">vn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">VarName</span><span class=\"p\">){</span><span class=\"ss\">:m</span><span class=\"p\">}()</span>\n                                          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">contextual_isassumption</span><span class=\"p\">)(</span><span class=\"n\">__context__</span><span class=\"p\">,</span> <span class=\"n\">vn</span><span class=\"p\">)</span>\n                                              <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">((</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">inargnames</span><span class=\"p\">)(</span><span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">__model__</span><span class=\"p\">))</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">inmissings</span><span class=\"p\">)(</span><span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">__model__</span><span class=\"p\">)</span>\n                                                  <span class=\"nb\">true</span>\n                                              <span class=\"k\">else</span>\n                                                  <span class=\"n\">m</span> <span class=\"o\">===</span> <span class=\"nb\">missing</span>\n                                              <span class=\"k\">end</span>\n                                          <span class=\"k\">else</span>\n                                              <span class=\"nb\">false</span>\n                                          <span class=\"k\">end</span>\n                                      <span class=\"k\">end</span>\n                                  <span class=\"k\">end</span>\n                              <span class=\"k\">if</span> <span class=\"n\">isassumption</span>\n                                  <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">tilde_assume!</span><span class=\"p\">)(</span><span class=\"n\">__context__</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">unwrap_right_vn</span><span class=\"p\">)((</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">check_tilde_rhs</span><span class=\"p\">)(</span><span class=\"n\">Normal</span><span class=\"p\">()),</span> <span class=\"n\">vn</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">inds</span><span class=\"p\">,</span> <span class=\"n\">__varinfo__</span><span class=\"p\">)</span>\n                              <span class=\"k\">else</span>\n                                  <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">((</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">inargnames</span><span class=\"p\">)(</span><span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">__model__</span><span class=\"p\">))</span>\n                                      <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">getvalue_nested</span><span class=\"p\">)(</span><span class=\"n\">__context__</span><span class=\"p\">,</span> <span class=\"n\">vn</span><span class=\"p\">)</span>\n                                  <span class=\"k\">end</span>\n                                  <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">tilde_observe!</span><span class=\"p\">)(</span><span class=\"n\">__context__</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">check_tilde_rhs</span><span class=\"p\">)(</span><span class=\"n\">Normal</span><span class=\"p\">()),</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">inds</span><span class=\"p\">,</span> <span class=\"n\">__varinfo__</span><span class=\"p\">)</span>\n                              <span class=\"k\">end</span>\n                          <span class=\"k\">end</span>\n                          <span class=\"cm\">#= REPL[7]:3 =#</span>\n                          <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">TV</span><span class=\"p\">(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n                          <span class=\"cm\">#= REPL[7]:4 =#</span>\n                          <span class=\"k\">begin</span>\n                              <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"__varinfo__ = \"</span><span class=\"p\">,</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">repr</span><span class=\"p\">(</span><span class=\"k\">begin</span>\n                                          <span class=\"cm\">#= show.jl:955 =#</span>\n                                          <span class=\"k\">local</span> <span class=\"sa\">var</span><span class=\"s\">\"#37#value\"</span> <span class=\"o\">=</span> <span class=\"n\">__varinfo__</span>\n                                      <span class=\"k\">end</span><span class=\"p\">))</span>\n                              <span class=\"sa\">var</span><span class=\"s\">\"#37#value\"</span>\n                          <span class=\"k\">end</span>\n                          <span class=\"cm\">#= REPL[7]:5 =#</span>\n                          <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n                              <span class=\"n\">vn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">VarName</span><span class=\"p\">){</span><span class=\"ss\">:x</span><span class=\"p\">}(((</span><span class=\"n\">i</span><span class=\"p\">,),))</span>\n                              <span class=\"n\">inds</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,),)</span>\n                              <span class=\"n\">isassumption</span> <span class=\"o\">=</span> <span class=\"k\">begin</span>\n                                      <span class=\"k\">let</span> <span class=\"n\">vn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">VarName</span><span class=\"p\">){</span><span class=\"ss\">:x</span><span class=\"p\">}(((</span><span class=\"n\">i</span><span class=\"p\">,),))</span>\n                                          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">contextual_isassumption</span><span class=\"p\">)(</span><span class=\"n\">__context__</span><span class=\"p\">,</span> <span class=\"n\">vn</span><span class=\"p\">)</span>\n                                              <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">((</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">inargnames</span><span class=\"p\">)(</span><span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">__model__</span><span class=\"p\">))</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">inmissings</span><span class=\"p\">)(</span><span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">__model__</span><span class=\"p\">)</span>\n                                                  <span class=\"nb\">true</span>\n                                              <span class=\"k\">else</span>\n                                                  <span class=\"cm\">#= /home/philipp/git/DynamicPPL.jl/src/compiler.jl:90 =#</span> <span class=\"nd\">@views</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">===</span> <span class=\"nb\">missing</span>\n                                              <span class=\"k\">end</span>\n                                          <span class=\"k\">else</span>\n                                              <span class=\"nb\">false</span>\n                                          <span class=\"k\">end</span>\n                                      <span class=\"k\">end</span>\n                                  <span class=\"k\">end</span>\n                              <span class=\"k\">if</span> <span class=\"n\">isassumption</span>\n                                  <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">tilde_assume!</span><span class=\"p\">)(</span><span class=\"n\">__context__</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">unwrap_right_vn</span><span class=\"p\">)((</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">check_tilde_rhs</span><span class=\"p\">)(</span><span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)),</span> <span class=\"n\">vn</span><span class=\"p\">)</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">inds</span><span class=\"p\">,</span> <span class=\"n\">__varinfo__</span><span class=\"p\">)</span>\n                              <span class=\"k\">else</span>\n                                  <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"p\">((</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">inargnames</span><span class=\"p\">)(</span><span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">__model__</span><span class=\"p\">))</span>\n                                      <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">getvalue_nested</span><span class=\"p\">)(</span><span class=\"n\">__context__</span><span class=\"p\">,</span> <span class=\"n\">vn</span><span class=\"p\">)</span>\n                                  <span class=\"k\">end</span>\n                                  <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">tilde_observe!</span><span class=\"p\">)(</span><span class=\"n\">__context__</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">DynamicPPL</span><span class=\"o\">.</span><span class=\"n\">check_tilde_rhs</span><span class=\"p\">)(</span><span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)),</span> <span class=\"cm\">#= /home/philipp/git/DynamicPPL.jl/src/compiler.jl:90 =#</span> <span class=\"nd\">@views</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span> <span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">inds</span><span class=\"p\">,</span> <span class=\"n\">__varinfo__</span><span class=\"p\">)</span>\n                              <span class=\"k\">end</span>\n                          <span class=\"k\">end</span>\n                      <span class=\"k\">end</span>\n                  <span class=\"k\">end</span><span class=\"p\">)</span>\n          <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">)(</span><span class=\"ss\">:demo4</span><span class=\"p\">,</span> <span class=\"n\">evaluator</span><span class=\"p\">,</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:n</span><span class=\"p\">,</span> <span class=\"ss\">:TV</span><span class=\"p\">)}((</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">TV</span><span class=\"p\">)),</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:TV</span><span class=\"p\">,)}((</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},)))</span>\n      <span class=\"k\">end</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"sa\">var</span><span class=\"s\">\"@model\"</span><span class=\"p\">(</span><span class=\"kt\">LineNumberNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Main</span><span class=\"p\">,</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"k\">function</span> <span class=\"n\">demo4</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span><span class=\"o\">=</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">TV</span><span class=\"p\">}</span>\n           <span class=\"n\">m</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">()</span>\n           <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">TV</span><span class=\"p\">(</span><span class=\"nb\">undef</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n           <span class=\"nd\">@show</span> <span class=\"n\">__varinfo__</span>\n           <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n               <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">~</span> <span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n           <span class=\"k\">end</span>\n       <span class=\"k\">end</span><span class=\"p\">))</span> <span class=\"o\">|&gt;</span> <span class=\"n\">eval</span>\n<span class=\"n\">demo4</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">demo4</span>\n<span class=\"n\">demo4</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">demo4</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"kt\">Model</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#1#2\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"ss\">:n</span><span class=\"p\">,</span> <span class=\"ss\">:TV</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"ss\">:TV</span><span class=\"p\">,),</span> <span class=\"p\">(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">DataType</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DataType</span><span class=\"p\">},</span> <span class=\"kt\">DefaultContext</span><span class=\"p\">}(</span><span class=\"ss\">:demo4</span><span class=\"p\">,</span> <span class=\"sa\">var</span><span class=\"s\">\"#1#2\"</span><span class=\"p\">(),</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">TV</span> <span class=\"o\">=</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}),</span> <span class=\"p\">(</span><span class=\"n\">TV</span> <span class=\"o\">=</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},),</span> <span class=\"n\">DefaultContext</span><span class=\"p\">())</span>\n</code></pre></div>",
        "id": 250324278,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1629707863
    },
    {
        "content": "<p>I don't know what is going on but I'd try</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">macro</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n    <span class=\"k\">global</span> <span class=\"n\">INPUT</span> <span class=\"o\">=</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">f</span> <span class=\"o\">...</span>\n    <span class=\"k\">global</span> <span class=\"n\">OUTPUT</span> <span class=\"o\">=</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>to see the real input and output when expanding the macro.</p>",
        "id": 250405025,
        "sender_full_name": "Takafumi Arakaki (tkf)",
        "timestamp": 1629749543
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>\n</code></pre></div>",
        "id": 250829437,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1630007392
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">index fb3e732d41..6f8aff9874 100644</span>\n<span class=\"gd\">--- a/src/jlfrontend.scm</span>\n<span class=\"gi\">+++ b/src/jlfrontend.scm</span>\n<span class=\"gu\">@@ -22,10 +22,10 @@</span>\n                `(incomplete ,msg)\n                (cons 'error (cdr e))))\n          (begin\n<span class=\"gd\">-           ;;(newline)</span>\n<span class=\"gd\">-           ;;(display \"unexpected error: \")</span>\n<span class=\"gd\">-           ;;(prn e)</span>\n<span class=\"gd\">-           ;;(print-stack-trace (stacktrace))</span>\n<span class=\"gi\">+           (newline)</span>\n<span class=\"gi\">+           (display \"unexpected error: \")</span>\n<span class=\"gi\">+           (prn e)</span>\n<span class=\"gi\">+           (print-stack-trace (stacktrace))</span>\n            '(error \"malformed expression\"))))\n    thk))\n</code></pre></div>",
        "id": 250829446,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1630007395
    },
    {
        "content": "<p>If you have access to a source build, you could also have it spit out the full lispy error</p>",
        "id": 250829561,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1630007430
    },
    {
        "content": "<p>Thanks for the tip <span class=\"user-mention\" data-user-id=\"369728\">@Jameson Nash</span>, <a href=\"https://gist.github.com/devmotion/077af8c2a35d49964fdde7d1b3a593ea\">here's</a> the output. Top of the stack trace:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(type-error car cons ())\nunexpected error: #0 (caddr (:: (curly Type TV)))\n#1 (resolve-expansion-vars-\n (kw (:: (curly Type TV)) (curly Vector Float64))\n ((n . |#118#n|) (|#unused#| . |#119##unused#|) (TV . |#120#TV|))\n #&lt;julia: DynamicPPL&gt; () #t)\n</code></pre></div>\n<p>So it's not happy with the <code>Type</code> in there, or what?</p>",
        "id": 251404105,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1630423660
    },
    {
        "content": "<p>Apparently the hygiene pass does not know about the <code>::Type{TV}=Vector{Float64}</code> syntax</p>",
        "id": 251410209,
        "sender_full_name": "Jameson Nash",
        "timestamp": 1630425626
    },
    {
        "content": "<p>Appearently so... I <a href=\"https://github.com/JuliaLang/julia/issues/42220\">raised an issue</a>.</p>",
        "id": 252970006,
        "sender_full_name": "Philipp Gabler",
        "timestamp": 1631435238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272951\">Philipp Gabler</span> has marked this topic as resolved.</p>",
        "id": 253093810,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631541583
    }
]