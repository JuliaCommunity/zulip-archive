[
    {
        "content": "<p>I'm aware that <code>rand()</code> is not guaranteed to give the same output even when using the same seed in general, and that people who need this have to use <code>StableRNGs.jl</code>. I'm wondering though whether there are cases where I should expect the same outputs? E.g. if I use the same Julia binary on the same OS would that be expected to yield the same numbers?</p>\n<p>If someone wants to try, I'm on 1.10-rc2 on Windows 10:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Random</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Random</span><span class=\"o\">.</span><span class=\"n\">seed!</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">TaskLocalRNG</span><span class=\"p\">()</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">()</span>\n<span class=\"mf\">0.521213795535383</span>\n</code></pre></div>",
        "id": 406263203,
        "sender_full_name": "Nils",
        "timestamp": 1701853902
    },
    {
        "content": "<p>it definitely should give the same output for the same seed (on the same version)</p>",
        "id": 406267612,
        "sender_full_name": "Sukera",
        "timestamp": 1701855537
    },
    {
        "content": "<p>I think this even goes as far as being the same on the same architecture</p>",
        "id": 406267678,
        "sender_full_name": "Sukera",
        "timestamp": 1701855564
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Random</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Random</span><span class=\"o\">.</span><span class=\"n\">seed!</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">TaskLocalRNG</span><span class=\"p\">()</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">()</span>\n<span class=\"mf\">0.521213795535383</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">versioninfo</span><span class=\"p\">()</span>\n<span class=\"n\">Julia</span><span class=\"w\"> </span><span class=\"n\">Version</span><span class=\"w\"> </span><span class=\"mf\">1.11.0</span><span class=\"o\">-</span><span class=\"n\">DEV</span><span class=\"mf\">.822</span>\n<span class=\"n\">Commit</span><span class=\"w\"> </span><span class=\"mi\">528</span><span class=\"n\">fefb66a7</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"n\">UTC</span><span class=\"p\">)</span>\n<span class=\"n\">Platform</span><span class=\"w\"> </span><span class=\"n\">Info</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">OS</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Linux</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">pc</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">CPU</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"o\">×</span><span class=\"w\"> </span><span class=\"n\">AMD</span><span class=\"w\"> </span><span class=\"n\">Ryzen</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"mi\">7900</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">Processor</span>\n<span class=\"w\">  </span><span class=\"n\">WORD_SIZE</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"w\">  </span><span class=\"n\">LLVM</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">libLLVM</span><span class=\"o\">-</span><span class=\"mf\">15.0.7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ORCJIT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">znver3</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Threads</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">34</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"n\">virtual</span><span class=\"w\"> </span><span class=\"n\">cores</span>\n<span class=\"n\">Environment</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">JULIA_PKG_USE_CLI_GIT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span>\n</code></pre></div>",
        "id": 406267704,
        "sender_full_name": "Sukera",
        "timestamp": 1701855576
    },
    {
        "content": "<p>the issue with relying on this to never change is that it may change between versions &amp; architectures; generally though, for the same julia version it should give the same output.</p>",
        "id": 406267816,
        "sender_full_name": "Sukera",
        "timestamp": 1701855610
    },
    {
        "content": "<p>Does it really depend on the arch though? How? Does it use FMA?</p>",
        "id": 406271026,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1701856750
    },
    {
        "content": "<p>I'm pretty sure it shouldn't, but I don't think Julia actually guarantees it</p>",
        "id": 406279509,
        "sender_full_name": "Sukera",
        "timestamp": 1701859933
    },
    {
        "content": "<p>Hard to tell: The <a href=\"https://docs.julialang.org/en/v1.11-dev/stdlib/Random/#Reproducibility\">reproducibility section</a> only mentions Julia version changes</p>",
        "id": 406280513,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1701860304
    },
    {
        "content": "<p>that section doesn't give a whole lot guarantees at all anyway</p>",
        "id": 406280904,
        "sender_full_name": "Sukera",
        "timestamp": 1701860426
    },
    {
        "content": "<p>from the way the RNGs are currently implemented, it should be consistent across architectures</p>",
        "id": 406281024,
        "sender_full_name": "Sukera",
        "timestamp": 1701860458
    },
    {
        "content": "<p>Julia just doesn't guarantee that to be the case</p>",
        "id": 406281053,
        "sender_full_name": "Sukera",
        "timestamp": 1701860464
    },
    {
        "content": "<p>e.g. I'm not sure you're guaranteed to get the same result on a GPU, which has a different default RNG</p>",
        "id": 406281197,
        "sender_full_name": "Sukera",
        "timestamp": 1701860502
    },
    {
        "content": "<p>Cool thanks - it sounds to me like I'm okay to share a notebook that includes <code>versioninfo()</code> and <code>Random.seed!(123)</code> in the expectation that someone would be able to get the same outputs.</p>",
        "id": 406287451,
        "sender_full_name": "Nils",
        "timestamp": 1701862868
    },
    {
        "content": "<p>Currently, in 1.9 and 1.10, specifying the exact Julia version is sufficient. However, IMO by doing this you are depending on internals (i.e. there is no guarantee that this will still work when you and the folks reproducing your code are on 1.12)</p>",
        "id": 406333680,
        "sender_full_name": "Lilith Hafner",
        "timestamp": 1701877582
    },
    {
        "content": "<p>Sure, but that's expected. I'm just after having a historical record that says \"this sample was drawn with Julia 1.10rc-2 on Windows 10, using the random seed 123\" so that someone else can download the same Julia version and get the same results with the same seed.</p>",
        "id": 406341785,
        "sender_full_name": "Nils",
        "timestamp": 1701880045
    },
    {
        "content": "<p>Seems like that's what <a href=\"https://juliahub.com/ui/Packages/General/StableRNGs\">StableRNGs.jl</a> is for</p>",
        "id": 406349489,
        "sender_full_name": "Mason Protter",
        "timestamp": 1701882450
    },
    {
        "content": "<p>Yes as I said originally that's the correct solution, I just wondered under which circumstances I can go without it.</p>",
        "id": 406358107,
        "sender_full_name": "Nils",
        "timestamp": 1701885659
    },
    {
        "content": "<p>Or <a href=\"https://github.com/wildart/Xkcd221\">https://github.com/wildart/Xkcd221</a> for even stronger reproducibility guarantees</p>",
        "id": 406390883,
        "sender_full_name": "Mosè Giordano",
        "timestamp": 1701897568
    }
]