[
    {
        "content": "<p>Say I want to have a type that looks something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"k\">struct</span> <span class=\"kt\">MyVectorType</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"o\">&lt;:</span> <span class=\"kt\">AbstractVector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n        <span class=\"n\">pointer</span><span class=\"o\">::</span><span class=\"kt\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n        <span class=\"n\">length</span><span class=\"o\">::</span><span class=\"kt\">Int</span>\n    <span class=\"k\">end</span>\n</code></pre></div>\n<p>but I <em>also</em> want <code>MyVectorType</code> to be a subtype of <code>MyOtherAbstractTypeForDispatch</code>... </p>\n<p>Can this be done? I haven't seemed to be able to make it work yet</p>",
        "id": 271755668,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1644772393
    },
    {
        "content": "<p>It cannot, see <a href=\"https://github.com/JuliaLang/julia/issues/5\">https://github.com/JuliaLang/julia/issues/5</a><br>\nTo achieve the desired behavior for dispatch you would need to use traits. Sadly there's no way to achieve this behavior ad-hoc if the functions to dispatch to weren't implemented with traits in mind.<br>\nOne possibility may be to define another type which subtypes <code>MyOtherAbstractTypeForDispatch</code> and have conversion methods between <code>MyVectorType</code> and the new subtype so that you can convert back and forth depending on what dispatch behavior you want to achieve.</p>",
        "id": 271757257,
        "sender_full_name": "CÃ©dric Belmant",
        "timestamp": 1644774861
    },
    {
        "content": "<p>Typing in Julia makes a tree.<br>\nAnd there are always (AFAIK) one and only one direct supertype of a type.</p>\n<p>So, I don't think what you're trying to do is possible.</p>\n<p>You can use Union though, if you don't mind a bit of unstability for your pointer.</p>",
        "id": 271757274,
        "sender_full_name": "awnmp",
        "timestamp": 1644774914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"293896\">Brenhin Keller</span> has marked this topic as resolved.</p>",
        "id": 271757418,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644775176
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 271757422,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1644775193
    }
]