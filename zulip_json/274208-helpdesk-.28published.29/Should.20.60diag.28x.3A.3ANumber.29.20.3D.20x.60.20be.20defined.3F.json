[
    {
        "content": "<p>I am writing n-dimensional algorithms and it would be convenient to call this function with either numbers or matrices.</p>",
        "id": 494445643,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737150351
    },
    {
        "content": "<p>Could this method be added to Base? Any counter-argument?</p>",
        "id": 494445837,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737150444
    },
    {
        "content": "<p>If you're working on <code>n</code>-dimensional arrays and you need to support the <code>n=0</code> case, Julia has a 0-dimensional array type <code>Array{T, 0}</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"n\">dimensional</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">:</span>\n<span class=\"mi\">4</span>\n</code></pre></div>\n<p>that might work for your application.</p>",
        "id": 494446134,
        "sender_full_name": "jar",
        "timestamp": 1737150602
    },
    {
        "content": "<p>Would it have the same performance benefits of a Number though? Stack allocation?</p>",
        "id": 494448542,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737151633
    },
    {
        "content": "<p>Ideally the algorithm would retain its performance with Number inputs</p>",
        "id": 494448612,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737151670
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">mydiag</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">diag</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">mydiag</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Number</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 494898273,
        "sender_full_name": "Fredrik Bagge Carlson",
        "timestamp": 1737401208
    },
    {
        "content": "<p>Yes. My question is if there is a problem in defining this in Base?</p>",
        "id": 494898802,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737401429
    },
    {
        "content": "<p>I don't really see why we'd put this in base. I think it'd be better to just define your own <code>mydiag</code> like Fredrik showed</p>",
        "id": 494900687,
        "sender_full_name": "Mason Protter",
        "timestamp": 1737402284
    },
    {
        "content": "<p>Mathematically speaking, doesn't it make sense to extend the method?</p>",
        "id": 494901898,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737402807
    },
    {
        "content": "<p>I've seen Number used in places that expect matrices or vectors as inputs.</p>",
        "id": 494902166,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737402932
    },
    {
        "content": "<p>Numbers are not matrices or vectors. They're zero dimensional objects. <code>diag</code> is specifically defined on matrices</p>",
        "id": 494905762,
        "sender_full_name": "Mason Protter",
        "timestamp": 1737404381
    },
    {
        "content": "<p>I thought that numbers could be seen as linear algebras over themselves.</p>",
        "id": 494906259,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737404554
    },
    {
        "content": "<p>In that case one can introduce a coord system and identify the number with itself. Consequently defining diag too</p>",
        "id": 494906358,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737404600
    },
    {
        "content": "<p>But if people already see a problem with this on Zulip. The chances it gets accepted in Base are low</p>",
        "id": 494906426,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1737404626
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/JuliaLang/julia/pull/56175\">https://github.com/JuliaLang/julia/pull/56175</a></p>",
        "id": 497827506,
        "sender_full_name": "Andrés Riedemann",
        "timestamp": 1738741686
    }
]