[
    {
        "content": "<p>Are there any packages that implement INT? This is defined as</p>\n<p><a href=\"/user_uploads/7178/KUCoKSvdhy21jRv0UaTV11jI/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/KUCoKSvdhy21jRv0UaTV11jI/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/KUCoKSvdhy21jRv0UaTV11jI/image.png\"></a></div><p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Φ</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Phi^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Φ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> is the probit function, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">r_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the rank of observation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is the number of observations.</p>",
        "id": 248237613,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1628004745
    },
    {
        "content": "<p>I did a bit of googling for this or for probit, but all of the results are about probit link functions in the context of linear modeling for example</p>",
        "id": 248237916,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1628004860
    },
    {
        "content": "<p><a href=\"https://github.com/search?q=StatsFuns.jl&amp;type=Repositories\">StatsFuns.jl</a> has normcdf and norminvcdf</p>",
        "id": 248239583,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1628005585
    },
    {
        "content": "<p>Alternatively, take a look at the erf functions from <a href=\"https://github.com/search?q=SpecialFunctions.jl&amp;type=Repositories\">SpecialFunctions.jl</a>:</p>\n<p><a href=\"https://specialfunctions.juliamath.org/stable/functions_overview/#\u0002klzzwxh:0001\u0003-1\">https://specialfunctions.juliamath.org/stable/functions_overview/#<a href=\"https://dlmf.nist.gov/7\">Error-Functions,-Dawson%E2%80%99s-and-Fresnel-Integrals</a>-1</a></p>",
        "id": 248240409,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1628005945
    },
    {
        "content": "<p>The Gaussian cdf can be expressed and properly implemented with the erf function</p>",
        "id": 248240461,
        "sender_full_name": "Júlio Hoffimann",
        "timestamp": 1628005967
    },
    {
        "content": "<p>There might be a better way to get the ranks (is there?), but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">3</span>\n <span class=\"mi\">5</span>\n <span class=\"mi\">2</span>\n <span class=\"mi\">7</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"p\">)[</span><span class=\"n\">invperm</span><span class=\"p\">(</span><span class=\"n\">sortperm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))]</span>\n<span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">2</span>\n <span class=\"mi\">3</span>\n <span class=\"mi\">1</span>\n <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 248243830,
        "sender_full_name": "Chad Scherrer",
        "timestamp": 1628007396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"286004\">@Chad Scherrer</span> That's the way I'd do it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>... well, skipping using the range</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span> <span class=\"n\">sortperm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"n\">invperm</span>\n<span class=\"go\">4-element Vector{Int64}:</span>\n<span class=\"go\"> 2</span>\n<span class=\"go\"> 3</span>\n<span class=\"go\"> 1</span>\n<span class=\"go\"> 4</span>\n</code></pre></div>",
        "id": 248245653,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1628008369
    },
    {
        "content": "<p>Cool. </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">Distributions</span>\n<span class=\"k\">using</span> <span class=\"n\">CairoMakie</span>\n<span class=\"k\">using</span> <span class=\"n\">StatsFuns</span>\n<span class=\"k\">using</span> <span class=\"n\">StatsBase</span>\n\n<span class=\"k\">function</span> <span class=\"n\">invnormaltransform</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"n\">μ</span><span class=\"p\">,</span> <span class=\"n\">σ</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">mean_and_var</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"n\">rank</span> <span class=\"o\">=</span> <span class=\"n\">invperm</span><span class=\"p\">(</span><span class=\"n\">sortperm</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">norminvcdf</span><span class=\"p\">(</span><span class=\"n\">μ</span><span class=\"p\">,</span> <span class=\"n\">σ</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">rank</span><span class=\"p\">]</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">Beta</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">1000</span><span class=\"p\">);</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">invnormaltransform</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n\n<span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">hist!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">current_figure</span><span class=\"p\">()</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/7178/PQKq-IGb_EM_FcAMSc35Ndp4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/7178/PQKq-IGb_EM_FcAMSc35Ndp4/image.png\" title=\"image.png\"><img src=\"/user_uploads/7178/PQKq-IGb_EM_FcAMSc35Ndp4/image.png\"></a></div>",
        "id": 248248031,
        "sender_full_name": "Kevin Bonham",
        "timestamp": 1628009563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217836\">Kevin Bonham</span> has marked this topic as resolved.</p>",
        "id": 248507534,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628183760
    }
]