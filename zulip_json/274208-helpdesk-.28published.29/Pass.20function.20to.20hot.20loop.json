[
    {
        "content": "<p>Maybe someone can help me save a few minutes of benchmarking here.</p>\n<p>I have a situation where I would like to pass a function <code>fa</code> as an argument to another function <code>fb</code> where <code>fb</code> will call <code>fa</code> in a hot loop and where <code>fa</code> is determined at runtime. </p>\n<p>Are there any performance gotchas here (I'm mainly thinking about the fact that Julia does not specialize on the function type by default)?</p>\n<p>I can see the following options:<br>\n1) Just pass it as an argument<br>\n2) Pass it as an argument but qualify the type (ie. <code>function fb(fa::F, ...) where F</code>)<br>\n3) Write a macro</p>\n<p>I'm thinking 1) might be ok since functions like <code>map</code> seem to do it, but I'm not sure here.</p>\n<p>In case more context is needed: <code>fb</code> is getting a pcap-reader which holds many captured packets. <code>fb</code> loops over all packets in the pcap-reader.  The pcap reader has a single header which tells me what protocol all the captured packets are, so my <code>fa</code> will be things like  <code>process_ipv4_packet</code>, <code>process_ethernet_packet</code> etc.</p>",
        "id": 509678027,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1743595565
    },
    {
        "content": "<p>Julia does specialize on function types used as arguments if either</p>\n<ul>\n<li>The argument function is used inside the function</li>\n<li>The type of the function is written explicitly with a <code>where</code> clause like this:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">F</span>\n<span class=\"w\">    </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c\"># do stuff with ys</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 509682065,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1743596629
    },
    {
        "content": "<blockquote>\n<ul>\n<li>The argument function is used inside the function</li>\n</ul>\n</blockquote>\n<p>Thanks, I somehow missed/forgot about this. I guess that makes the distinction between 1) and 2) pointless in my case (and I suppose the specialization also makes the macro pointless).</p>",
        "id": 509682481,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1743596743
    },
    {
        "content": "<p>isn't the <code>where</code> notation redundant if <code>F</code> is not used in the body ?<br>\ne.g. wouldn't this be the same ?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c\"># do stuff with ys</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 509686663,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1743597776
    },
    {
        "content": "<p>(also restricts arguments to be functions and not <code>Any</code>)</p>",
        "id": 509687198,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1743597900
    },
    {
        "content": "<p>Nope. As a latency optimisation, Julia's compiler doesn't specialize arguments whose only use in a function is to be passed on to another function. So in your <code>foo</code>, <code>foo</code> is not specialized on <code>f</code>. However, this means the type of <code>ys</code> in not inferred.</p>",
        "id": 509687355,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1743597938
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">           </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ys</span>\n<span class=\"w\">               </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"n\">y</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"w\">       </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kt\">F</span><span class=\"w\"> </span><span class=\"o\">&lt;:</span><span class=\"w\"> </span><span class=\"kt\">Function</span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">           </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ys</span>\n<span class=\"w\">               </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">           </span><span class=\"k\">end</span>\n<span class=\"w\">           </span><span class=\"n\">y</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"go\">bar (generic function with 1 method)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">BenchmarkTools</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">1000000</span><span class=\"p\">);</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"go\">  33.493 ms (2998951 allocations: 53.39 MiB)</span>\n<span class=\"go\">500000500000</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"go\">  578.063 Î¼s (4 allocations: 7.63 MiB)</span>\n<span class=\"go\">500000500000</span>\n</code></pre></div>",
        "id": 509687913,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1743598070
    },
    {
        "content": "<p>Yeah this is a common gotcha.</p>",
        "id": 509688019,
        "sender_full_name": "Mason Protter",
        "timestamp": 1743598084
    },
    {
        "content": "<p>Ahhh. yeah. now I start to remember again. It's also described here <a href=\"https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing\">https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing</a></p>",
        "id": 509689067,
        "sender_full_name": "Filippos Christou",
        "timestamp": 1743598357
    },
    {
        "content": "<p>Is there something with global scope here which makes this seem like a worse issue than it is?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mf\">63.639</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2998951</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">53.39</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"mi\">500000500000</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mf\">1.717</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">7.63</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"mi\">500000500000</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mf\">1.710</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">7.63</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"mi\">500000500000</span>\n\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">fa</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">fa</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">fb</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">fb</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span>\n<span class=\"w\">       </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100000</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">((</span><span class=\"n\">fa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fb</span><span class=\"p\">))</span>\n<span class=\"w\">       </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"mf\">78.600</span><span class=\"w\"> </span><span class=\"n\">Î¼s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">781.31</span><span class=\"w\"> </span><span class=\"n\">KiB</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mf\">78.000</span><span class=\"w\"> </span><span class=\"n\">Î¼s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">781.31</span><span class=\"w\"> </span><span class=\"n\">KiB</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 509692770,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1743599181
    },
    {
        "content": "<p>Hmmm, maybe not:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">testfun</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"k\">end</span>\n<span class=\"n\">testfun</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">testfun</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">fa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">fb</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mf\">56.751</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2998951</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">53.39</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"mi\">500000500000</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">testfun</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"n\">bar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">fa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">fb</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mf\">1.671</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">allocations</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">7.63</span><span class=\"w\"> </span><span class=\"n\">MiB</span><span class=\"p\">)</span>\n<span class=\"mi\">500000500000</span>\n</code></pre></div>",
        "id": 509694407,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1743599571
    },
    {
        "content": "<p>A bit scary that JET doesn't seem to detect the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">JET</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@report_opt</span><span class=\"w\"> </span><span class=\"n\">testfun</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fb</span><span class=\"p\">)</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"> </span><span class=\"n\">detected</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nd\">@report_opt</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"> </span><span class=\"n\">detected</span>\n</code></pre></div>",
        "id": 509694897,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1743599678
    },
    {
        "content": "<p>Just managed to speed up a different part of the code with about 20% thanks to this. I had assumed it was fine because JET didn't report any problems.</p>",
        "id": 509699229,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1743600759
    },
    {
        "content": "<p>Make a bug report!</p>",
        "id": 509705816,
        "sender_full_name": "Jakob Nybo Nissen",
        "timestamp": 1743602375
    },
    {
        "content": "<p><a href=\"https://github.com/aviatesk/JET.jl/issues/697\">https://github.com/aviatesk/JET.jl/issues/697</a></p>",
        "id": 509709899,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1743603279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300483\">DrChainsaw</span> <a href=\"#narrow/channel/274208-helpdesk-.28published.29/topic/Pass.20function.20to.20hot.20loop/near/509692770\">said</a>:</p>\n<blockquote>\n<p>Is there something with global scope here which makes this seem like a worse issue than it is?</p>\n</blockquote>\n<p>What you're seeing here is a result of inlining. <code>@btime foo(f, v)</code> creates an anonymous function <code>() -&gt; foo(f, v)</code> and times it. When <code>v</code> is interpolated, <code>foo</code> can be inlined, so the anonymous function is compiled as <code>() -&gt; &lt;body of foo(f, v)&gt;</code>, which doesn't have the specialization problem since <code>f</code> is never actually passed as an argument to any function. Inlining does not happen when <code>v</code> is not interpolated because then <code>v</code> is an untyped global, so it's impossible to resolve which method of <code>foo</code> to inline at compile time. (Well, actually, in this case it's not impossible because <code>foo</code> only has a single method, but automatic inlining doesn't use that kind of world-splitting method resolution; it breaks function barriers, which is usually detrimental to performance.)</p>",
        "id": 509736067,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1743609368
    },
    {
        "content": "<p>Here's one way to get around this in your timings without having to avoid interpolation:</p>\n<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">foowrap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nd\">@noinline</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"go\">foowrap (generic function with 1 method)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">barwrap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nd\">@noinline</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"go\">barwrap (generic function with 1 method)</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">foowrap</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"go\">  20.406 ms (2998951 allocations: 53.39 MiB)</span>\n<span class=\"go\">500000500000</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"nd\">@btime</span><span class=\"w\"> </span><span class=\"n\">barwrap</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"go\">  481.709 Î¼s (2 allocations: 7.63 MiB)</span>\n<span class=\"go\">500000500000</span>\n</code></pre></div>",
        "id": 509736739,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1743609573
    },
    {
        "content": "<p>That said, the fact that inlining immediately fixes the problem is kind of the point. Avoided specialization is considered a worthwhile tradeoff because this is expected to happen in many/most real-world use cases, so performance usually won't suffer.</p>",
        "id": 509737491,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1743609753
    },
    {
        "content": "<p>I'm not sure I agree that it works out like that in practice. I've been bitten by this often enough that I now reflexively add the specialization parameter every time I write a method that takes a function as an argument. But that's the idea.</p>",
        "id": 509738294,
        "sender_full_name": "Daniel Wennberg",
        "timestamp": 1743609968
    },
    {
        "content": "<p>19114<br>\n167409079868000</p>",
        "id": 510307957,
        "sender_full_name": "Flag",
        "timestamp": 1743809820
    }
]