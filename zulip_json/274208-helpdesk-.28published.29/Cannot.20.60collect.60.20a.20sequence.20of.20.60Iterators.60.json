[
    {
        "content": "<p>Hey! I tried to be clever and I wrote this function, which drops the last <code>n</code> elements from an iterator:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">droplast</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>But when I try it on a simple vector:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">droplast</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">collect</span>\n</code></pre></div>\n<p>I get an error! I don't understand the error.</p>\n<p><strong>Q:</strong> what does the error mean, and how do I get the desired result?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">MethodError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Drop</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}})</span>\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"sb\">`keys`</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">combination</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"o\">.</span>\n\n<span class=\"n\">Closest</span><span class=\"w\"> </span><span class=\"n\">candidates</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">TermInfo</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"n\">terminfo</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">232</span>\n<span class=\"w\">  </span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Cmd</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">716</span>\n<span class=\"w\">  </span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">SimpleVector</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">944</span>\n<span class=\"w\">  </span><span class=\"o\">...</span>\n\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">itrs</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Drop</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}})</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">318</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Drop</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}}})</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">iterators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">143</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">copyto!</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Drop</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}}})</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">934</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">_collect</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">::</span><span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">…</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">itr</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">…</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">HasEltype</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">isz</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">HasLength</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">722</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Drop</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}}})</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">716</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Drop</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Reverse</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}}},</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"p\">))</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"o\">./</span><span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">926</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">scope</span>\n<span class=\"w\">   </span><span class=\"err\">@</span><span class=\"w\"> </span><span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"sb\">`show(err)`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">complete</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 494773748,
        "sender_full_name": "Fons van der Plas",
        "timestamp": 1737369187
    },
    {
        "content": "<p>I remember seeing complaints recently (can't remember if it was on Slack or on Github) that our iterators don't compose, you often can't take the output of one <code>Iterators</code> function and feed it to another and have it work. This seems to be an instance of that, <code>Iterators.reverse</code> seems to expect that its argument will have a <code>keys</code> method defined on it to get its indices, which <code>drop</code>'s return object <code>Iterators.Drop</code> apparently doesn't provide. I'll link the Github discussion if I find it in my history.</p>",
        "id": 494781765,
        "sender_full_name": "Sundar R",
        "timestamp": 1737371487
    },
    {
        "content": "<p>In this case, if the iterator has a length (which should be the most common case), <br>\n<code>droplast(iter, n) = Iterators.take(iter, length(iter) - n)</code><br>\ndoes what you want, right?</p>",
        "id": 494781973,
        "sender_full_name": "Sundar R",
        "timestamp": 1737371539
    },
    {
        "content": "<p>ah shame that they dont compose! thats unexpected... and also tricky that the error message is not helpful</p>",
        "id": 494782223,
        "sender_full_name": "Fons van der Plas",
        "timestamp": 1737371623
    },
    {
        "content": "<p>i want to drop from the end, but I can just use indexing <code>begin:end-n</code> :)</p>",
        "id": 494782391,
        "sender_full_name": "Fons van der Plas",
        "timestamp": 1737371666
    },
    {
        "content": "<p>I think this only really sensible in cases where length is defined, so <span class=\"user-mention\" data-user-id=\"423970\">@Sundar R</span>'s method seems better.</p>",
        "id": 494809234,
        "sender_full_name": "Mason Protter",
        "timestamp": 1737379326
    },
    {
        "content": "<p>We could probably make <code>reverse(::Take{Reverse})</code> work, but it'd have to be done quite carefully, and it'd just be a game of whack-a-mole</p>",
        "id": 494809391,
        "sender_full_name": "Mason Protter",
        "timestamp": 1737379374
    },
    {
        "content": "<p>or we define <code>keys(t::Take) = take(keys(t.iter), t.n)</code>?</p>",
        "id": 494809856,
        "sender_full_name": "Fons van der Plas",
        "timestamp": 1737379486
    },
    {
        "content": "<p>Seems like it'd just turn into an infinite recursion</p>",
        "id": 494813727,
        "sender_full_name": "Mason Protter",
        "timestamp": 1737380507
    },
    {
        "content": "<p>without defining a bunch of base-cases</p>",
        "id": 494813770,
        "sender_full_name": "Mason Protter",
        "timestamp": 1737380517
    },
    {
        "content": "<p>I'm sure it's quite doable though</p>",
        "id": 494813882,
        "sender_full_name": "Mason Protter",
        "timestamp": 1737380538
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia console\"><pre><span></span><code><span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">::</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"n\">Drop</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">xs</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">droplast</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">));</span>\n\n<span class=\"gp\">julia&gt;</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">droplast</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"gr\">ERROR: StackOverflowError:^C</span>\n<span class=\"gr\">SYSTEM (REPL): showing an error caused an error</span>\n<span class=\"gr\">ERROR: InterruptException:</span>\n</code></pre></div>",
        "id": 494814137,
        "sender_full_name": "Mason Protter",
        "timestamp": 1737380621
    },
    {
        "content": "<p>I guess you could roll your own iterator struct which queues <code>n</code> elements internally and returns the top if the wrapped iterator does not return nothing . </p>\n<p>Shouldn't be too bad performance wise if you take the extra effort to make it a ringbuffer.</p>",
        "id": 494985171,
        "sender_full_name": "DrChainsaw",
        "timestamp": 1737445264
    }
]