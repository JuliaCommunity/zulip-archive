[
    {
        "content": "<p>I have a tree-like structure, composed of a mix of types, and I'm looking to iterate through each of them in a DFS-like manner. I've managed to get some code working, but it's much slower than I expected and I'm not sure why.</p>\n<p>I use a wrapper type for the iterator, and the idea is that I keep the current \"tree path\" as a stack, if from the current node I can decent further the first child is added to the stack, and when the iterator at the end of the stack is exhausted, the stack is <code>pop!</code>ed.</p>\n<p>Here's the full code for the iterator (for later: line 1 below corresponds to line 1 of the file)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">import</span> <span class=\"n\">Base</span><span class=\"o\">:</span> <span class=\"n\">iterate</span><span class=\"p\">,</span> <span class=\"n\">length</span>\n\n<span class=\"k\">struct</span> <span class=\"kt\">OrgIterator</span>\n    <span class=\"n\">o</span><span class=\"o\">::</span><span class=\"kt\">Org</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">IteratorSize</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">OrgIterator</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">SizeUnknown</span><span class=\"p\">()</span>\n<span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">::</span><span class=\"kt\">OrgIterator</span><span class=\"p\">)</span> <span class=\"o\">=</span>\n    <span class=\"k\">if</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">o</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">}([(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">)]))</span>\n    <span class=\"k\">end</span>\n<span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">::</span><span class=\"kt\">OrgIterator</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">)</span> <span class=\"o\">=</span>\n    <span class=\"k\">if</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n            <span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n        <span class=\"k\">end</span>\n        <span class=\"k\">if</span> <span class=\"n\">isnothing</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">)</span>\n            <span class=\"n\">pop!</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span>\n            <span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">next</span>\n            <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">applicable</span><span class=\"p\">(</span><span class=\"n\">iterate</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">)</span>\n                <span class=\"n\">push!</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">))</span>\n            <span class=\"k\">end</span>\n            <span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">)</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n</code></pre></div>\n<p>This takes 1.2s to run on a structure with 26262 nodes. I have profiled <code>Iterators.filter(c -&gt; c isa FootnoteRef, OrgIterator(m)) |&gt; collect</code> (which just matches ~130 nodes) and looking at <code>Profile.print()</code> (full result: <a href=\"http://ix.io/3L3w\">http://ix.io/3L3w</a>) it appears that other than spending ages on <code>poptask</code> (which seems to always be the case in profiles?) the bulk of the time looks to be spent on line 26, i.e. <code>if applicable(iterate, el)</code>.<br>\nHowever, benchmarking some call of <code>applicable</code> (I assume that the performance is the same for any type) shows it taking around 140ns per call, so calling that on every node should take ~4000000ns or 0.004s, which wouldn't explain the poor performance.</p>\n<p>So, I'm somewhat perplexed. Might anyone have some idea as to what is going on and how I can improve this?</p>",
        "id": 266895492,
        "sender_full_name": "Timothy",
        "timestamp": 1641355229
    }
]